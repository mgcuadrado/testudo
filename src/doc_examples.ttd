#ifndef NAUTOTEST

#include <testudo/testudo_lc>
#include <testudo/testudo_eo>
// { include-testudo-base
#include <testudo/testudo_base.h>
// }
// { include-mock-turtle
#include <testudo/mock_turtle.h>
// }
#include <cmath>
#include <iomanip>

#define SPACE
#define OPSP
#define CLSP

  // This file contains the (working, in a sense) examples used in the manual.
  // each example is marked by
  //
  //     // { <example-name>
  //     ... example code ...
  //     // }
  //
  // for identification by the extractor.  The extractor extracts each example,
  // then creates four LaTeX versions: two of them in "lc" style, two in "uc"
  // style; two of them in "open" style ("op"), two of them in "cluttered"
  // style ("class").  The suffixes for the files are "lc-cl", "lc-op",
  // "uc-cl", and "uc-op".  Resulting LaTeX example files have the
  // "\begin{cpplisting}" and "\end{cpplisting}" LaTeX grouping commands.
  //
  // Here are the rules for writing examples:
  //
  //   * write them in the "lc-op" style; the others are generated
  //     automatically from it;
  //
  //   * words in comments that are also Testudo keywords are broken in two
  //     with a "{}" so that the lc-to-uc filter doesn't convert them;
  //
  //   * add "SPACE" where you want spaces to be kept in the "cl" style;
  //
  //   * write "OPSP" to generate a space in the "op" style, but none in the
  //     "cl" style
  //
  //   * write "CLSP" to achieve the opposite effect of "OPSP"
  //
  //   * end with "// @hide@" lines that the code needs but you don't want in
  //     the document

namespace {

  using namespace std;
  using namespace testudo;

  define_top_test_node("", (examples, "examples"), 1000);

  define_test(examples, "style")
  {
    // { styles
    declare(int a = 7); // d{}eclare a variable
    check(a + 2)_equal(9); // c{}heck for equality
    // }
  }

  namespace no_report {

    define_test_node(examples, (tricorder, "tricorder"));

    // { define-test-node-no-report
    define_test_node(tricorder,
                     (medical, "medical capabilities"));
    // }

    // { define-test-ellipses
    define_test(medical, "switch on after creation")
    {
      // \texttt{...}
    }
    // }

  }

  struct Tricorder {
    struct Medical {
      bool is_on() const { return true; }
      void push_on_button() { }
    } medical;
  };

  define_top_test_node("", (tricorder, "tricorder"));

  // { define-test-node
  define_test_node(tricorder,
                   (medical, "medical capabilities"));

  // \texttt{...} definition of test ``switch on after creation'' (see next example)
  // } test tricorder.medical

  // { define-test-full
  define_test(medical, "switch on after creation")
  {
    declare(Tricorder t); // see~\Sref{cha:test-steps} for the test steps syntax
    check(t.medical.is_on())_false();
    perform(t.medical.push_on_button());
    check(t.medical.is_on())_true();
  }
  // } test tricorder.medical.switch on after creation

  // { top-test-node-no-parent-and-child
  define_top_test_node("", // no parent
                       (búri, // name
                        "Búri, father of gods"), // title
                       990); // priority
  define_test_node(búri,
                   (borr,
                    "Borr, son of Búri, father of Odin"));
  // } test búri

  // { top-test-node
  define_top_test_node("outatime.delorean", // parent full name
                       (flux_capacitor, // name
                        "flux capacitor"), // title
                       200); // priority
  // } test outatime.delorean.flux_capacitor

  struct Delorean {
    Delorean(double transition_mph = 0., double max_mph = 1.)
      : transition_mph(transition_mph), max_mph(max_mph) { }
    struct Door {
      bool is_open() const { return false; }
    } left_door, right_door;
    struct Engine {
      bool is_running() const { return false; }
    } engine;
    struct Fan {
      bool is_running() const { return true; }
    } fan;
    double pu() const { return 0.; }
    double const transition_mph;
    double const max_mph;
    bool time_travel(double mph) const
      { return mph >= transition_mph and mph <= max_mph; }
  };

  // { top-test
  define_top_test("outatime.delorean", // parent full name
                  "doors closed initially", // title
                  150) // priority
  {
    declare(Delorean d);
    check(not d.left_door.is_open())_true();
    check(not d.right_door.is_open())_true();
  }
  // } test outatime.delorean.doors closed initially

  using my_list_exception = std::runtime_error;
  using my_map_exception = std::string;

  template <typename>
  struct my_list {
    int first_element() const { throw my_list_exception("empty list"); }
    int last_element() const { return 0; }
  };

  struct Helicopter {
    double remaining_fuel() const { return 203.9; }
  };

  struct Tree {
    string name() const { return "Yggdrasil"; }
  };

  struct LoggedDestruction {
    LoggedDestruction(string) { }
    ~LoggedDestruction() { ++ n_destructions_p; }
    static int n_destructions() { return n_destructions_p; }
  private:
    inline static int n_destructions_p=0;
  };

  struct Client {
    struct answer {
      bool valid = true;
      bool ok = true;
      string text = "res://punk_license";
    };
    answer request(string) const { return {}; }
  };

  define_test(examples, "declare")
  {
    // { declare
    declare(using namespace std);
    declare(pair<int, double> p = { 2, 3.5 });
    // } content examples.declare
    (void) p;
  }
  define_test(examples, "perform")
  {
    pair<int, double> p;
    // { perform
    perform(p.first += 10);
    // } content examples.perform
  }

  define_test(examples, "check true")
  {
    double dispersion_rate = .001;
    double accuracy = 100.;
    double fine_dispersion_rate = .0001;
    double fine_accuracy = 10000.;
    // { check-true
    check(dispersion_rate < (1. / accuracy))_true();
    check(fine_dispersion_rate < (1. / fine_accuracy))_true();
    // } content examples.check true
  }

  define_test(examples, "check false")
  {
    Delorean d;
    // { check-false
    check(d.left_door.is_open())_false();
    check(d.right_door.is_open())_false();
    check(d.fan.is_running())_false();
    // } content examples.check false
  }

  define_test(examples, "check equal")
  {
    int captain_age = 36;
    int n_ships = 14;

    // { check-equal
    check(captain_age)_equal(26 + 10);
    check(n_ships)_equal(26 - 10);
    // } content examples.check equal
  }

  define_test(examples, "check not equal")
  {
    int numerator = 1;
    int denominator = 0;

    // { check-not-equal
    check(numerator)_not_equal(1);
    check(denominator)_not_equal(1);
    // } content examples.check not equal
  }

  define_test(examples, "check equal automatic type")
  {
    map<string, int> inventory{ { "apple", 2 }, { "banana", 3 } };

    // { check-equal-automatic-type
    check(inventory)
      _equal(map<string, int>{ { "apple", 2 }, { "banana", 3 } });
    check(inventory)_equal({ { "apple", 2 }, { "banana", 3 } });
    // } content examples.check equal automatic type
  }

  define_test(examples, "100")
  {
    declare(int a = 1);
    declare(int b = 2);
    declare(int c = 5);

    // { check-are-equal
    check(are_equal(a + b, c))_true()_show(a, b, a + b, c);
    // }

    declare(double x = 1.);
    declare(double y = 2.01);

    // { check-are-approx
    // with current value of~$\varepsilon$ for tolerance:
    check(are_approx(2 * x, y))_true()_show(x, 2 * x, y);
    // with explicit tolerance (\texttt{.1})
    check(are_approx(2 * x, y, .1))_true()_show(x, 2 * x, y);
    // }
  }

  define_test(examples, "check approx")
  {

    double computed_pi = 3.141593;
    double computed_e = 2.718335;

    // { check-approx
    check(computed_pi)_approx(2. * asin(1.));
    check(computed_e)_approx(exp(1.));
    // } content examples.check approx
  }

  define_test(examples, "check not approx")
  {

    double singularity = -1.001789;
    double pole = 1.99999997;

    // { check-not-approx
    check(singularity)_not_approx(-1.);
    check(pole)_not_approx(2.);
    // } content examples.check not approx
  }

  define_test(examples, "define approx epsilon")
  {
    // { define-approx-epsilon
    define_approx_epsilon(1e-3); // one thousandth
    // } content examples.define approx epsilon
    (void) approx_epsilon;
  }

  define_test(examples, "set approx epsilon")
  {
    // { set-approx-epsilon
    set_approx_epsilon(1e-3); // one thousandth
    // } content examples.set approx epsilon
  }

  define_test(examples, "show approx epsilon")
  {
    // { show-approx-epsilon
    show_approx_epsilon();
    // } content examples.show approx epsilon
  }

  define_test(examples, "check approx tol")
  {
    double area = 3.64;

    // { check-approx-tol
    check(area)_approx(3.5); // with current tolerance
    check(area)_approx(3.5)_with_tol(.1); // use .1 tolerance just this once
    check(area)_approx(3.5)_with_tol(.2); // use .2 tolerance just this once
    // } content examples.check approx tol
  }

  define_test(examples, "check show")
  {
    int p = 1;
    int q = 2;
    int r = 5;
    int s = 6;

    // { check-show
    check(p + q < r)_true()_show(p, q, r);
    check(q + r < s)_true()_show(q, r, s);
    // } content examples.check show
  }

  define_test(examples, "check show other")
  {
    int a = 3;
    int b = 4;
    int c = 5;

    double dist = 100.5;
    double t = 6.3;
    double v = 15.1;

    // { check-show-other
    check(a * a + b * b)_equal(c * c)_show(a, b, c);
    check(a + b)_equal(c)_show(a, b);
    check(v)_approx(dist / t)_with_tol(.1)_show(dist, t);
    // } content examples.check show other
  }

  define_test(examples, "check explain")
  {
    int done = 5;
    int postponed = 0;
    int total = 6;
    list<string> non_essential_tasks={"not today", "procras"};
    list<string> failed_tasks={};

    // { check-explain
    check(failed_tasks.empty())_true()
      << failed_tasks.size() << " tasks failed";
    check(postponed > 0)_true()
      << "should be postponing non-essential tasks "
      << testudo::to_text(non_essential_tasks);
    check(postponed + done)_equal(total)_show(postponed, done)
      << "all tasks should be either done or postponed";
    // } content examples.check explain
  }

  define_test(examples, "check try catch")
  {
    // { check-try-catch
    // when it's empty, "\texttt{my\_list<...>}" correctly throws on
    // "\texttt{first\_element()}", but not yet on "\texttt{last\_element()}"
    declare(my_list<int> numbers);
    check_try(numbers.first_element())_catch();
    check_try(numbers.last_element())_catch();
    // } content examples.check try catch
  }

  define_test(examples, "check try catch exception")
  {
    // { check-try-catch-exception
    declare(my_list<int> numbers);
    check_try(numbers.first_element())_catch(my_list_exception);
    check_try(numbers.first_element())_catch(my_map_exception);
    // the following is never executed, because the actual exception in the
    // last check-try-catch was unexpected
    tout << "this shouldn't be printed: wrong exception type";
    // } content examples.check try catch exception
  }

  define_test(examples, "show value")
  {
    Helicopter helicopter;
    float longitude=23.1f, latitude=-57.3f, altitude=789.4f;

    // { show-value
    show_value(helicopter.remaining_fuel());
    show_value(longitude, latitude, altitude);
    // } content examples.show value
  }

  define_test(examples, "show value unquoted")
  {
    Tree tree;

    // { show-value-unquoted
    show_value(tree.name());
    show_value(testudo::unquoted(tree.name()));
    // } content examples.show value unquoted
  }

  define_test(examples, "in scope")
  {
    // { in-scope
    declare(LoggedDestruction ld1("1"));
    check(LoggedDestruction::n_destructions())_equal(0);
    in_scope("outer scope") { // named scope
      declare(LoggedDestruction ld2("2"));
      in_scope() { // unnamed scope
        declare(LoggedDestruction ld3("3"));
      SPACE}
      check(LoggedDestruction::n_destructions())_equal(1);
    SPACE}
    check(LoggedDestruction::n_destructions())_equal(2);
    // } content examples.in scope
  }

  define_test(examples, "with declare")
  {
    Client client;

    // { with-declare
    with_declare(auto answer = client.request("get license")) {
      check(answer.valid and answer.ok)_true();
      check(answer.text)_equal("res://punk_license");
    }
    with_declare(auto answer = client.request("reset"))
      check(answer.valid and answer.ok)_true();
    // } content examples.with declare
  }

  define_test(examples, "with declare several")
  {
    string action="sin";
    int times = 542;
    // { with-declare-several
    with_declare(auto [what, n] = tuple{ "sin", 77 * 7 }) {
      check(action)_equal(what);
      check(times<=n)_true()_show(times, n);
    }
    // } content examples.with declare several
  }

  namespace tricorder3 {
    define_top_test_node("", (tricorder3, "tricorder3"));

    define_test_node(tricorder3,
                     (medical, "medical capabilities"));

    // { step-id
    define_test(medical, "switch on after creation")
    {
      declare(Tricorder t);
      tout.step_id("init_off"); // relative to this test; no need to identify it
      check(t.medical.is_on())_false();
    }
    // } test tricorder3.medical.switch on after creation
  }

  struct Terrible {
    void report() const;
  };

  struct Resource {
    bool acquired() const { return true; }
    int size() const { return 10; }
  };

  define_test(examples, "tout")
  {
    float speed=50.f;
    // { tout
    tout << "the speed hasn't been updated yet";
    tout << "it's still " << speed << "km/h";
    tout << "here's a multiline list:\n"
            "  1. you can end a line with a \\n...\n"
            "  2. ... or with an endl" << endl <<
            "  3. but no need to finish the last line";
    // } content examples.tout
  }

  define_test(examples, "print break")
  {
    bool all_tasks_assigned = true;
    int n_tasks_done;
    // { print-break
    // \texttt{...}
    check(all_tasks_assigned)_true();
    tout.print_break();
    perform(n_tasks_done = 0);
    // \texttt{...}
    // } content examples.print break
  }

  define_test(examples, "200")
  {
    // { fake-declare
    #ifdef DEBUGGING
    declare(LoggedInt n_cases); // optimised to \texttt{int} in production
    #else
    fake_declare(LoggedInt n_cases);
    int n_cases; // replacement declaration (naked)
    #endif
    // }

    perform((void) n_cases);

    declare(Terrible terrible_p);
    declare(ostringstream log);

    // { fake-perform
    #ifdef DEBUGGING
    perform(terrible_p.report()); // won't work in production
    #else
    fake_perform(terrible_p.report());
    log << "terrible_p reported" << endl; // replacement action (naked)
    #endif
    // }

    perform((void) terrible_p);
  }

  define_test(examples, "tfos")
  {
    // { tfos
    show_value(31);
    perform(tfos << hex << setw(8));
    show_value(31); // will print in hexadecimal with a width of 8
    // } content examples.tfos
  }

  define_test(examples, "tfos to text")
  {
    // { tfos-to-text
    declare(int h = 26);
    perform(tfos << hex);
    check(testudo::to_text(tfos, h))_equal("1a");
    // } content examples.tfos to text
  }

  define_test(examples, "unexpected exception")
  {
    // { unexpected-exception
    declare(my_list<int> numbers);
    check(numbers.first_element())_equal(0);
    // the following is never executed, because the last instruction threw an
    // unexpected exception
    tout << "this shouldn't be printed: unexpected exception";
    // } content examples.unexpected exception
  }


  define_test(examples, "provided")
  {
    Resource res;
    int totals[2] = { 2, 1 };
    int totals_size = 2;

    bool all_jobs_done = false;
    int n_hops = 0, depth = 0, n_jobs = 0;

    // { provided
    provided (check(res.acquired())_true())
      check(res.size())_equal(10);
    provided (check(totals_size)_equal(2)) {
      check(totals[0] > 0)_true()_show(totals[0]);
      check(totals[1] > totals[0])_true()
        _show(totals[0], totals[1]);
    }
    provided (check(all_jobs_done)_true()) {
      check(n_hops<depth)_true()_show(n_hops, depth);
      check(n_jobs)_equal(14);
    }
    // } content examples.provided
  }

  define_top_test_node("", (container, "container"));

  // { test-aware-functions
  template <typename Container>
  void test_container_emptyness(
      test_management_t test_management,
      Container &container)
  {
    check(container.empty())_true();
  }

  class Cauldron {
  public:
    bool empty() const;
    // \texttt{...}
  };

  define_test(container, "Cauldron emptyness")
  {
    declare(Cauldron container);
    test_container_emptyness(test_management, container);
  }

  class Marmite {
  public:
    bool empty() const;
    // \texttt{...}
  };

  define_test(container, "Marmite emptyness")
  {
    declare(Marmite container);
    test_container_emptyness(test_management, container);
  }
  // } test container

  bool Cauldron::empty() const { return true; }
  bool Marmite::empty() const { return true; }

  define_test(examples, "with data") {
    // { with-data
    declare(auto is_even =
            [](auto const &a) { return ((a % 2) == 0); });
    declare(list<int> even_numbers{ 2, 4, 8 }); // even numbers
    with_data(x, even_numbers)
      check(is_even(x))_true()_show(x);
    with_data(x, even_numbers)
    {
      declare(int y = x + 1);
      check(is_even(y))_false()_show(y);
    }
    with_data(x, even_numbers)
      with_data(y, { 2, 4, 9 })
        check(x % 2)_equal(y % 2)_show(x, y); // will fail when \texttt{y == 9}
    // } content examples.with data
  }

  define_test(examples, "with data structured binding") {
    // { with-data-structured-binding
    declare(list<tuple<int, int, int>>
              list_of_sums{ { 1, 3, 4 },
                            { 3, 7, 11 }, // this tuple will fail
                            { 10, 15, 25 } });
    with_data((a, b, sum), list_of_sums)
      check(sum)_equal(a + b)_show(a, b, sum);
    // } content examples.with data structured binding
  }

  define_test(examples, "with multiline data") {
    // { with-multiline-data
    with_multiline_data((a, b, sum), list<tuple<int, int, int>>
        { { 1, 3, 4 },
          { 3, 7, 11 }, // this tuple will fail
          { 10, 15, 25 } })
      check(sum)_equal(a + b)_show(a, b, sum);
    // } content examples.with multiline data
  }

  namespace vectori2 {
    // { data-for-with-data-vector
    class VectorI2
    {
    public:
      VectorI2(int x, int y);
      int x, y;
    };
    VectorI2 operator+(VectorI2 v, VectorI2 w); // sum
    bool operator==(VectorI2 v, VectorI2 w); // equality (\Sref{sec:equality})
    string to_text(VectorI2 v); // text representation (\Sref{sec:textual-representation})
    // }

    // { data-for-with-data-generator
    VectorI2 random_vector2i(int max_abs_x, int max_abs_y);
    // }

    VectorI2::VectorI2(int, int) : x(0), y(0) { }
    VectorI2 operator+(VectorI2, VectorI2) { return {0, 0}; }
    bool operator==(VectorI2, VectorI2) { return true; }
    [[maybe_unused]] string to_text(VectorI2) { return ""; }
    VectorI2 random_vector2i(int, int) { return {0, 0}; }

    define_test(examples, "data for with data loop") {
      // { data-for-with-data-loop
      declare(auto generate_20_20 =
              []() { return random_vector2i(20, 20); });
      // 10,000 che{}cks:
      with_data(v, generate_data(100, generate_20_20))
        with_data(w, generate_data(100, generate_20_20))
        check(v + w)_equal(w + v);
      // } content examples.data for with data loop
    }

    define_test(examples, "generate data tuple") {
      // { generate-data-tuple
      declare(auto generate_20_20 =
              []() { return random_vector2i(20, 20); });
      // 100 che{}cks:
      with_data((v, w),
                generate_data_tuple(100,
                                    generate_20_20,
                                    generate_20_20))
        check(v + w)_equal(w + v);
      // } content examples.generate data tuple
    }

    define_test(examples, "cartesian product") {
      // { cartesian-product
      declare(auto generate_20_20 =
              []() { return random_vector2i(20, 20); });
      // 10,000 che{}cks:
      with_data((v, w),
                cartesian_product(
                  generate_data(100, generate_20_20),
                  generate_data(100, generate_20_20)))
        check(v + w)_equal(w + v);
      // } content examples.cartesian product
    }
  }

  // { fixture-outatime-definition
  struct OutATimeFixture : Fixture
  {
    OutATimeFixture(test_management_t test_management,
                    double transition_mph = 88.,
                    double max_mph = 670.6)
      : Fixture(test_management)
    {
      perform(d = new Delorean(transition_mph, max_mph));
    SPACE}
    ~OutATimeFixture()
    {
      perform(delete d);
    SPACE}
    Delorean *d; // dumb pointer, just so we can show a teardown procedure
  };
  // }

  define_top_test_node("", (delorean, "Delorean"));

  define_test_node(delorean, (start, "start"));

  // { fixture-outatime-test
  define_test(start,
              "engine is off at start",
              with_fixture(OutATimeFixture)) // with-fixture
  {
    check(not d->engine.is_running())_true();
  }

  define_test(start,
              "there's no Plutonium initially",
              visible_fixture(OutATimeFixture)) // visible-fixture
  {
    check(d->pu())_approx(0.);
  }
  // } test delorean.start

  // { fixture-outatime-test-arguments
  define_test(delorean,
              "slower transition speed",
              with_fixture(OutATimeFixture),
              fixture_args(67., 767.3))
  {
    check(d->time_travel(70.))_true();
  }
  // } test delorean.slower transition speed

  define_top_test_node("", (numbers, "Number"));

  // { fixture-members
  struct NumbersFixture : Fixture
  {
    NumbersFixture(test_management_t test_management)
      : Fixture(test_management),
        fixture_init(x, 1.),
        fixture_init(z, 3.14) { }
    fixture_member(double x);
    fixture_member(double y = -2.5, z); // two variables defined here
  };

  define_test(numbers,
              "fixture members",
              visible_fixture(NumbersFixture)) {
    check(x)_approx(1.);
    check(y)_approx(-2.5);
    check(z)_approx(3.14);
  }
  // } test numbers.fixture members

  namespace first_mocks {

    // { mock-class
    class KettleBase
    {
    public:
      virtual ~KettleBase() = default;
      virtual void fill(float volume) = 0;
      virtual float temperature() const = 0;
    };

    class KettleMock
      : public MockClass<KettleBase>
    {
    public:
      // method mocks and wraps overriding base methods\ellipsis{}
    };

    class ContainerMock
      : public MockClass<>
    {
    public:
      // method mocks and wraps defining a cointainer interface\ellipsis{}
    };
    // }

#if 0
    // { mock-class-name-clash
    class ImageMock
      : public MockClass<>
    {
    public:
      mock_method((void), set, ((float)));
      mock_method((void), set, ((int))); // name clash!
    };
    // }
#endif

    // { mock-class-name-clash-avoided
    class ImageMock
      : public MockClass<>
    {
    public:
      mock_method((void), set, ((float)));
      mock_method((void), (set, set_int), ((int)));
    };
    // }

  }

  // { mock-class-mock-method
  class KettleBase
  {
  public:
    virtual ~KettleBase() = default;
    virtual void fill(float volume) = 0;
    virtual float temperature() const = 0;
  };

  class KettleMock
    : public MockClass<KettleBase>
  {
  public:
    mock_method((void), fill, ((float volume)), (override));
    mock_method((float), temperature, (), (const, override));
  };
  // }

  // { mock-class-wrap-method
  class Tally
  {
  public:
    virtual ~Tally() = default;
    virtual void add_counter(int delta) = 0;
    virtual int total() const = 0;
  };

  class TallyMock
    : public MockClass<Tally>
  {
  public:
    int counter = 0;
    wrap_method((void), add_counter, ((int delta)))
    {
      counter += delta;
    SPACE}
    wrap_method((int), total, (), (const))
    {
      return counter;
    SPACE}
  };
  // }

  class Soup
  {
  public:
    virtual ~Soup() = default;
    virtual bool is_tasty() const { return true; }
    virtual int temperature() const { return 0; }
    virtual int add_ingr(string, int) { return 0; }
  };

  // { mock-class-mock-method-default-return-value-assign
  class SoupMock
    : public MockClass<Soup>
  {
  public:
    // \texttt{...}
    // by default, return \texttt{true}:
    mock_method((bool), is_tasty, (), (const, override)) = true;
    // \texttt{...}
  };
  // }

  define_test_node(examples, (mock_turtle, "Mock Turtle"));

  // { mock-class-mock-method-default-return-value-set-ret-default
  define_test(mock_turtle, "Victorian recipe")
  {
    declare(auto soup_mock = make_shared<SoupMock>());
    declare(bool is_tasty_now = true);
    perform(soup_mock->set_ret_default(
              is_tasty,
              [&is_tasty_now]() {SPACE return is_tasty_now; SPACE}));
    // \texttt{...}
  }
  // }

  namespace another_soup {

    // { mock-class-mock-method-schedule-ret
    class SoupMock
      : public MockClass<Soup>
    {
    public:
      // \texttt{...}
      mock_method((int), (temperature, temp), (), (const, final));
      // \texttt{...}
    };
    // \texttt{...}
    define_test(mock_turtle, "recipe")
    {
      declare(auto soup_mock = make_shared<SoupMock>());
      // return a sequence of temperatures on subsequent calls:
      perform(soup_mock->schedule_ret(temp,
                                      20, 40, 60, 80, 100));
      // \texttt{...}
    }
    // }

  }

  define_test_node(examples, (namable, "namable"));

  // { mock-class-mock-method-schedule-exception
  class MockNamable
    : public MockClass<>
  {
  public:
    mock_method((void), create, ());
    mock_method((bool), set_name_is_good, ((string)));
  };
  // \texttt{...}
  define_test(namable, "exception 2nd set_name_is_good()")
  {
    declare(MockNamable namable);
    // return \texttt{true} for the first call, then throw an exception for the second call:
    perform(
      namable.schedule_ret(set_name_is_good,
        true,
        throw_exception(runtime_error("already named"))));
    // \texttt{...}
  }
  // }

  // { mock-class-mock-method-schedule-exception-after-void
  define_test(namable, "exception 2nd create()") {
    declare(MockNamable namable);
    // return normally from the first call, then throw an exception for the second call:
    perform(
      namable.schedule_ret(create,
        void_v,
        throw_exception(runtime_error("already created"))));
    // \texttt{...}
  }
  // }

  namespace mock_turtle_recipe {

    class SoupMock
      : public MockClass<Soup>
    {
    public:
      mock_method((int), add_ingr, ((string), (int)), (override));
      mock_method((bool), is_tasty, (), (const, override)) = true;
      mock_method((int), (temperature, temp), (), (const, final));
    };

    define_test(mock_turtle, "mock turtle recipe 100")
    {
      // { check-mock-method-logs
      declare(auto soup_mock = make_shared<SoupMock>());
      // \texttt{...}
      // five calls, with specific arguments
      check(soup_mock->logged_args(add_ingr))
        _equal({ { "calf brains", 4 },
                 { "pork liver", 3 },
                 { "water", 1 },
                 { "water", 1 },
                 { "water", 1 } });
      // }

      // { check-mock-method-logs-specific-call
      // c{}heck \emph{third} call
      provided (check(soup_mock->log_size(add_ingr) >= 3)_true())
        check(soup_mock->logged_args(add_ingr)[2])
          _equal({ "water", 1 });
      // }

      // { check-mock-method-logs-specific-call-specific-argument
      // c{}heck \emph{first} argument of third call:
      provided (check(soup_mock->log_size(add_ingr) >= 3)_true())
        check(get<0>(soup_mock->logged_args(add_ingr)[2]))
          _equal("water");
      // }
    }

    define_test(mock_turtle, "mock turtle recipe 200")
    {
      // { check-mock-method-logs-return-values
      declare(auto soup_mock = make_shared<SoupMock>());
      // \texttt{...}
      // a single call, that returned \texttt{true}
      check(soup_mock->logged_ret(is_tasty))_equal({ { true } });
      // }
    }

    define_test(mock_turtle, "mock turtle recipe 300")
    {
      // { check-mock-method-logs-return-arguments-values
      declare(auto soup_mock = make_shared<SoupMock>());
      // \texttt{...}
      // five calls, with specific arguments and return values
      check(soup_mock->logged_ret_args(add_ingr))
        _equal({ { {  4 }, { "calf brains", 4 } },
                { {  7 }, { "pork liver", 3 } },
                { {  8 }, { "water", 1 } },
                { {  9 }, { "water", 1 } },
                { { 10 }, { "water", 1 } } });
      // }
    }

    define_test(mock_turtle, "mock turtle recipe 400")
    {
      // { check-mock-method-logs-number-of-calls
      declare(auto soup_mock = make_shared<SoupMock>());
      // \texttt{...}
      // a single call
      check(soup_mock->log_size(is_tasty))_equal(1);
      // }
    }

  }

  class MockLevel
    : public MockClass<>
  {
  public:
    MockLevel(int) { }
    mock_method((int), readout, ()) = -1;
    mock_method((void), large_up, ());
  };

  define_test(examples, "ledgers")
  {
    // { ledger-setup
    declare(CallLedger cl);
    declare(MockLevel lev_1(12));
    perform(call_ledger_report_to(lev_1, &cl)); // identified as ``\texttt{lev\_1}''
    declare(auto lev_2 = make_shared<MockLevel>(47));
    perform(call_ledger_report_to(lev_2, &cl)); // identified as ``\texttt{lev\_2}''
    // }
  }

  namespace mock_turtle_recipe {

    define_test(mock_turtle, "mock turtle recipe 500")
    {
      declare(auto soup_mock = make_shared<SoupMock>());
      declare(CallLedger cl);
      declare(call_ledger_report_to(*soup_mock, &cl));
      declare(auto it = iterate(cl));
      // { ledger-iterator-get-call
      with_declare(auto call = it.get_call(*soup_mock, add_ingr))
        check(call)_equal({ 7 }, { "water", 1 });
      // }

      // { ledger-iterator-pop-call
      with_declare(auto call = it.pop_call(*soup_mock, add_ingr))
        check(call)_equal({ 7 }, { "water", 1 });
      // }
    }

    define_test(mock_turtle, "mock turtle recipe 600")
    {
      // { ledger-with-declare
      declare(auto soup_mock = make_shared<SoupMock>());
      // \texttt{...}
      with_declare(auto it = iterate(soup_mock)) {
        with_declare(auto call = it.pop_call(*soup_mock, add_ingr)) {
          check(call.ret())_equal(4);
          check(call.args())_equal("calf brains", 4);
        SPACE}
        // \texttt{...}
        with_declare(auto call = it.pop_call(*soup_mock, temp))
          check(call.ret())_equal(20);
        // \texttt{...}
        with_declare(auto call = it.pop_call(*soup_mock, is_tasty))
          check(call.ret())_true();
        // c{}heck it was the last call:
        check(it.done())_true();
      SPACE}
      // }
    }

  }

  template <typename Level>
  void equalize(Level &la, Level &lb) {
    la.large_up();
    lb.large_up();
  }

  define_test(examples, "call_ledger_report_to")
  {
    // { ledger-call-ledger-report-to
    declare(CallLedger cl);
    declare(MockLevel lev_1(12));
    perform(call_ledger_report_to(lev_1, &cl));
    declare(MockLevel lev_2(47));
    perform(call_ledger_report_to(lev_2, &cl));
    perform(equalize(lev_1, lev_2)); // this is the function we're c{}hecking
    check(lev_1.readout())_equal(52);
    check(lev_2.readout())_equal(52);
    declare(auto it = iterate(cl));
    // fast forward to the first invocation to ``\texttt{large\_up()}'':
    perform(while (it.method_name() not_eq "large_up")
              it.next());
    check(it.mock_name())_equal("lev_1");
    check(it.method_name())_equal("large_up");
    perform(it.next());
    check(it.mock_name())_equal("lev_1");
    check(it.method_name())_equal("readout");
    // }
  }

  namespace testrengthen_types {

    namespace my_space {

      template <typename T>
      struct MyType
      {
        list<T> list_of_elements;
      };
    }

    // { testudo-support-my-type-is-valid-testudo
    namespace my_space
    {
      template <typename T>
      bool is_valid_testudo(MyType<T> const &mt);
    SPACE}
    // }

    // { testudo-support-my-type-is-valid-testudo-is-valid
    namespace my_space
    {
      template <typename T>
      bool is_valid_testudo(MyType<T> const &mt)
      {
        return testudo::is_valid(mt.list_of_elements);
      SPACE}
    SPACE}
    // }

    namespace version_100 {
      // { testudo-support-my-vector-is-valid-testudo
      namespace my_space {
        class MyVector {
        public:
          // \texttt{...}
        SPACE};

        [[maybe_unused]] // @hide@
        bool is_valid_testudo(MyVector const &mv)
        {
          // \texttt{...}
          (void) mv; // @hide@
          return true; // @hide@
        SPACE}
      SPACE}
      // }
    }

    namespace version_200 {
      // { testudo-support-my-vector-insertion
      namespace my_space
      {
        class MyVector
        {
        public:
          double x, y;
          // \texttt{...}
        SPACE};

        [[maybe_unused]] // @hide@
        ostream &operator<<(ostream &os, MyVector const &mv)
        {
          return os << "(" << mv.x << " " << mv.y << ")";
        SPACE}
      SPACE}
      // }
    }

    namespace version_300 {
      // { testudo-support-my-vector-to-stream-testudo
      namespace my_space
      {
        class MyVector
        {
        public:
          double x, y;
          // \texttt{...}
        SPACE};

        [[maybe_unused]] // @hide@
        void to_stream_testudo(ostream &os, MyVector const &mv)
        {
          os << "(" << mv.x << " " << mv.y << ")";
        SPACE}
      SPACE}
      // }
    }

    namespace version_400 {
      // { testudo-support-my-vector-to-stream-testudo-to-stream
      namespace my_space
      {
        class MyVector
        {
        public:
          double x, y;
          // \texttt{...}
        SPACE};

        [[maybe_unused]] // @hide@
        void to_stream_testudo(ostream &os, MyVector const &mv)
        {
          os << "(";
          testudo::to_stream(os, mv.x);
          os << " ";
          testudo::to_stream(os, mv.y);
          os << ")";
        SPACE}
      SPACE}
      // }
    }

    namespace version_500 {
      // { testudo-support-my-vector-to-stream-testudo-to-text
      namespace my_space
      {
        class MyVector
        {
        public:
          double x, y;
          // \texttt{...}
        SPACE};

        [[maybe_unused]] // @hide@
        void to_stream_testudo(ostream &os, MyVector const &mv)
        {
          os << "(" << testudo::to_text(os, mv.x)
             << " " << testudo::to_text(os, mv.y) << ")";
        SPACE}
      SPACE}
      // }
    }

    namespace version_600 {
      // { testudo-support-my-pair-equality
      namespace my_space {
        template <typename T>
        class MyPair
        {
        public:
          // \texttt{...}
          T first, second;
        SPACE};

        template <typename T>
        bool operator==(MyPair<T> const &mp1,
                        MyPair<T> const &mp2)
        {
          // see below for ``\texttt{testudo::are\_e{}qual()}''
          return (testudo::are_equal(mp1.first, mp2.first)
                  and testudo::are_equal(mp1.second, mp2.second));
        SPACE}
      SPACE}
      // }
    }

    namespace version_700 {
      // { testudo-support-my-pair-are-equal-testudo
      namespace my_space
      {
        template <typename T>
        class MyPair
        {
        public:
          // \texttt{...}
          T first, second;
        SPACE};

        template <typename T>
        bool are_equal_testudo(MyPair<T> const &mp1,
                               MyPair<T> const &mp2)
        {
          return (testudo::are_equal(mp1.first, mp2.first)
                  and testudo::are_equal(mp1.second, mp2.second));
        SPACE}
      SPACE}
      // }
    }

    namespace version_800 {
      // { testudo-support-my-vector-absdiff-testudo
      class MyVector
      {
      public:
        double x, y;
        // \texttt{...}
      SPACE};

      [[maybe_unused]] // @hide@
      double absdiff_testudo(MyVector const &mv1,
                             MyVector const &mv2)
      {
        double dx = mv1.x - mv2.y;
        double dy = mv1.y - mv2.y;
        return sqrt(dx * dx + dy * dy);
      SPACE}
      // }
    }

    namespace version_900 {
      class MyVector
      {
      public:
        double x, y;
        // \texttt{...}
      };

      // { testudo-support-my-vector-absdiff-testudo-manhattan
      [[maybe_unused]] // @hide@
      double absdiff_testudo(MyVector const &mv1,
                             MyVector const &mv2)
      {
        double dx = mv1.x - mv2.y;
        double dy = mv1.y - mv2.y;
        return abs(dx) + abs(dy); // this is also \textsc{ok}
      SPACE}
      // }
    }

    namespace version_1000 {
      // { testudo-support-my-vector-absdiff-testudo-absdiff
      namespace my_space
      {
        template <typename T>
        class MyPair
        {
        public:
          // \texttt{...}
          T first, second;
        SPACE};

        template <typename T>
        double absdiff_testudo(MyPair<T> const &mp1,
                               MyPair<T> const &mp2)
        {
          return (testudo::absdiff(mp1.first, mp2.first)
                  + testudo::absdiff(mp1.second, mp2.second));
        SPACE}
      SPACE}
      // }
    }

  }

  namespace esperanto {
    map<string, int> vortaro = { { "unu", 1 } };

    define_test_node(examples, (esperanto_test, "Esperanto test"));

    // { esperanto
    difini_teston(esperanto_test, (numbers, "numbers"))
    {
      deklari(auto const dictionary = vortaro);
      certigi(dictionary.at("unu"))_egalas(1);
    }
    // }
  }

}

#endif
