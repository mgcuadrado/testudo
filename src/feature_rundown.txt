Rundown of all features that must be documented and tested.  Fttb, i'm writing
only the ones that aren't obvious, so i don't forget about them later.

* "check(a)_equal(b)" works even when "a" and "b" are C-style char strings
  ([testudo.h /HoldValue<char/] "Check" holds values through "HoldValue<>"; "a"
  is converted to "std::string"; "b" will compare correctly to "a" as a
  "std::string")

* you don't have to specify the type of the second argument in
  "check(call)_equal({{{2, 1}}, {{1, 2}}})" because the second argument is
  automatically converted to the type of the first one

* you don't have to specify how to construct the second argument in
  "check(call)_equal({{2, 1}}, {{1, 2}})" (note: missing outer braces) because
  the expressions in the second argument are automatically converted to the
  type of the first one

* a check with an invalid "call_record<>" as the argument to the "check" macro
  is always failed, even if the check is one of the negated ones ("_not_...()"
  or "_false")

* a "get_call()" or "pop_call()" on a "done()" call ledger iterator always
  returns an invalid call record (with the wrongly expected method name)

* Testudo support of custom types, as described in section "Adding Testudo
  support for your types"
