<testudo>
  <test location="" name="/" title="">
    <test location="" name="bttf1" title="">
      <test location="" name="bttf1.outatime" title="">
        <test location="" name="bttf1.outatime.flux_capacitor" title="FC features">
          <test location="flux_capacitor_1_test.ttd:9" name="bttf1.outatime.flux_capacitor.FC after construction" title="FC after construction">
          <text location="" brief_location="">with fixture DeloreanFixture</text>
          <declare location="flux_capacitor_1_test.ttd:12" brief_location="12">FluxCapacitor fc</declare>
          <perform location="flux_capacitor_1_test.ttd:13" brief_location="13">fc.connect_to(delorean)</perform>
          <check_true location="flux_capacitor_1_test.ttd:14" brief_location="14" success="true" prefix="">
            <expression1>not fc.is_on()</expression1>
          </check_true>
          <check_approx location="flux_capacitor_1_test.ttd:15" brief_location="15" success="false" prefix="" max_error="eps">
            <expression1 value="2.21">fc.missing_jw()</expression1>
            <expression2 value="1.21">1.21</expression2>
          </check_approx>
          <stats name="bttf1.outatime.flux_capacitor.FC after construction" n_failed="1" n_total="2" n_errors="0" success="false"/>
          </test>
        <stats name="bttf1.outatime.flux_capacitor" n_failed="1" n_total="2" n_errors="0" success="false"/>
        </test>
      <stats name="bttf1.outatime" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
    <stats name="bttf1" n_failed="1" n_total="2" n_errors="0" success="false"/>
    </test>
    <test location="" name="bttf2" title="">
      <test location="" name="bttf2.outatime" title="">
        <test location="" name="bttf2.outatime.flux_capacitor" title="FC features">
          <test location="flux_capacitor_2_test.ttd:9" name="bttf2.outatime.flux_capacitor.FC after construction" title="FC after construction">
          <text location="" brief_location="">with fixture DeloreanFixture</text>
          <declare location="flux_capacitor_2_test.ttd:13" brief_location="13">FluxCapacitor fc</declare>
          <perform location="flux_capacitor_2_test.ttd:14" brief_location="14">fc.connect_to(delorean)</perform>
          <check_true location="flux_capacitor_2_test.ttd:15" brief_location="15" success="true" prefix="">
            <expression1>not fc.is_on()</expression1>
          </check_true>
          <check_approx location="flux_capacitor_2_test.ttd:16" brief_location="16" success="false" prefix="" max_error="eps">
            <expression1 value="2.21">fc.missing_jw()</expression1>
            <expression2 value="1.21">1.21</expression2>
          </check_approx>
          <stats name="bttf2.outatime.flux_capacitor.FC after construction" n_failed="1" n_total="2" n_errors="0" success="false"/>
          </test>
        <stats name="bttf2.outatime.flux_capacitor" n_failed="1" n_total="2" n_errors="0" success="false"/>
        </test>
      <stats name="bttf2.outatime" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
    <stats name="bttf2" n_failed="1" n_total="2" n_errors="0" success="false"/>
    </test>
    <test location="" name="bttf3" title="">
      <test location="" name="bttf3.outatime" title="">
        <test location="" name="bttf3.outatime.flux_capacitor" title="FC features">
          <test location="flux_capacitor_3_test.ttd:9" name="bttf3.outatime.flux_capacitor.FC after construction" title="FC after construction">
          <text location="" brief_location="">with fixture DeloreanFixture</text>
          <declare location="flux_capacitor_3_test.ttd:12" brief_location="12">FluxCapacitor fc</declare>
          <perform location="flux_capacitor_3_test.ttd:13" brief_location="13">fc.connect_to(delorean)</perform>
          <check_true location="flux_capacitor_3_test.ttd:14" brief_location="14" success="true" prefix="">
            <expression1>not fc.is_on()</expression1>
          </check_true>
          <check_approx location="flux_capacitor_3_test.ttd:15" brief_location="15" success="false" prefix="" max_error="eps">
            <expression1 value="2.21">fc.missing_jw()</expression1>
            <expression2 value="1.21">1.21</expression2>
          </check_approx>
          <stats name="bttf3.outatime.flux_capacitor.FC after construction" n_failed="1" n_total="2" n_errors="0" success="false"/>
          </test>
        <stats name="bttf3.outatime.flux_capacitor" n_failed="1" n_total="2" n_errors="0" success="false"/>
        </test>
      <stats name="bttf3.outatime" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
    <stats name="bttf3" n_failed="1" n_total="2" n_errors="0" success="false"/>
    </test>
    <test location="" name="bttf4" title="">
      <test location="" name="bttf4.outatime" title="">
        <test location="" name="bttf4.outatime.flux_capacitor" title="FC features">
          <test location="flux_capacitor_4_test.ttd:9" name="bttf4.outatime.flux_capacitor.FC after construction" title="FC after construction">
          <text location="" brief_location="">with fixture DeloreanFixture</text>
          <declare location="flux_capacitor_4_test.ttd:12" brief_location="12">FluxCapacitor fc</declare>
          <perform location="flux_capacitor_4_test.ttd:13" brief_location="13">fc.connect_to(delorean)</perform>
          <check_true location="flux_capacitor_4_test.ttd:14" brief_location="14" success="true" prefix="">
            <expression1>not fc.is_on()</expression1>
          </check_true>
          <check_approx location="flux_capacitor_4_test.ttd:15" brief_location="15" success="false" prefix="" max_error="eps">
            <expression1 value="2.21">fc.missing_jw()</expression1>
            <expression2 value="1.21">1.21</expression2>
          </check_approx>
          <stats name="bttf4.outatime.flux_capacitor.FC after construction" n_failed="1" n_total="2" n_errors="0" success="false"/>
          </test>
        <stats name="bttf4.outatime.flux_capacitor" n_failed="1" n_total="2" n_errors="0" success="false"/>
        </test>
      <stats name="bttf4.outatime" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
    <stats name="bttf4" n_failed="1" n_total="2" n_errors="0" success="false"/>
    </test>
    <test location="" name="container" title="container">
      <test location="doc_examples.ttd:624" name="container.Cauldron emptyness" title="Cauldron emptyness">
      <declare location="doc_examples.ttd:626" brief_location="626">Cauldron container</declare>
      <check_true location="doc_examples.ttd:615" brief_location="615" success="true" prefix="">
        <expression1>container.empty()</expression1>
      </check_true>
      <stats name="container.Cauldron emptyness" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:636" name="container.Marmite emptyness" title="Marmite emptyness">
      <declare location="doc_examples.ttd:638" brief_location="638">Marmite container</declare>
      <check_true location="doc_examples.ttd:615" brief_location="615" success="true" prefix="">
        <expression1>container.empty()</expression1>
      </check_true>
      <stats name="container.Marmite emptyness" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
    <stats name="container" n_failed="0" n_total="2" n_errors="0" success="true"/>
    </test>
    <test location="" name="delorean" title="Delorean">
      <test location="" name="delorean.start" title="start">
        <test location="doc_examples.ttd:769" name="delorean.start.engine is off at start" title="engine is off at start">
        <text location="" brief_location="">with fixture OutATimeFixture</text>
        <check_true location="doc_examples.ttd:773" brief_location="773" success="true" prefix="">
          <expression1>not d-&gt;engine.is_running()</expression1>
        </check_true>
        <stats name="delorean.start.engine is off at start" n_failed="0" n_total="1" n_errors="0" success="true"/>
        </test>
        <test location="doc_examples.ttd:776" name="delorean.start.there&apos;s no Plutonium initially" title="there&apos;s no Plutonium initially">
        <text location="" brief_location="">visible fixture OutATimeFixture</text>
        <perform location="doc_examples.ttd:754" brief_location="754">d = new Delorean(transition_mph, max_mph)</perform>
        <text location="" brief_location="">fixture constructor done</text>
        <check_approx location="doc_examples.ttd:780" brief_location="780" success="true" prefix="" max_error="eps">
          <expression1 value="0">d-&gt;pu()</expression1>
          <expression2 value="0">0.</expression2>
        </check_approx>
        <text location="" brief_location="">fixture destructor</text>
        <perform location="doc_examples.ttd:758" brief_location="758">delete d</perform>
        <stats name="delorean.start.there&apos;s no Plutonium initially" n_failed="0" n_total="1" n_errors="0" success="true"/>
        </test>
      <stats name="delorean.start" n_failed="0" n_total="2" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:785" name="delorean.slower transition speed" title="slower transition speed">
      <text location="" brief_location="">with fixture OutATimeFixture(67., 767.3)</text>
      <check_true location="doc_examples.ttd:790" brief_location="790" success="true" prefix="">
        <expression1>d-&gt;time_travel(70.)</expression1>
      </check_true>
      <stats name="delorean.slower transition speed" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
    <stats name="delorean" n_failed="0" n_total="3" n_errors="0" success="true"/>
    </test>
    <test location="" name="numbers" title="Number">
      <test location="doc_examples.ttd:807" name="numbers.fixture members" title="fixture members">
      <text location="" brief_location="">visible fixture NumbersFixture</text>
      <declare location="doc_examples.ttd:803" brief_location="803">(fixture) double x</declare>
      <perform location="doc_examples.ttd:801" brief_location="801">(fixture) init x(1.)</perform>
      <declare location="doc_examples.ttd:804" brief_location="804">(fixture) double y = -2.5, z</declare>
      <perform location="doc_examples.ttd:802" brief_location="802">(fixture) init z(3.14)</perform>
      <text location="" brief_location="">fixture constructor done</text>
      <check_approx location="doc_examples.ttd:810" brief_location="810" success="true" prefix="" max_error="eps">
        <expression1 value="1">x</expression1>
        <expression2 value="1">1.</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:811" brief_location="811" success="true" prefix="" max_error="eps">
        <expression1 value="-2.5">y</expression1>
        <expression2 value="-2.5">-2.5</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:812" brief_location="812" success="true" prefix="" max_error="eps">
        <expression1 value="3.14">z</expression1>
        <expression2 value="3.14">3.14</expression2>
      </check_approx>
      <text location="" brief_location="">fixture destructor</text>
      <stats name="numbers.fixture members" n_failed="0" n_total="3" n_errors="0" success="true"/>
      </test>
    <stats name="numbers" n_failed="0" n_total="3" n_errors="0" success="true"/>
    </test>
    <test location="" name="outatime" title="">
      <test location="" name="outatime.delorean" title="">
        <test location="doc_examples.ttd:146" name="outatime.delorean.doors closed initially" title="doors closed initially">
        <declare location="doc_examples.ttd:150" brief_location="150">Delorean d</declare>
        <check_true location="doc_examples.ttd:151" brief_location="151" success="true" prefix="">
          <expression1>not d.left_door.is_open()</expression1>
        </check_true>
        <check_true location="doc_examples.ttd:152" brief_location="152" success="true" prefix="">
          <expression1>not d.right_door.is_open()</expression1>
        </check_true>
        <stats name="outatime.delorean.doors closed initially" n_failed="0" n_total="2" n_errors="0" success="true"/>
        </test>
        <test location="" name="outatime.delorean.flux_capacitor" title="flux capacitor">
        <stats name="outatime.delorean.flux_capacitor" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
      <stats name="outatime.delorean" n_failed="0" n_total="2" n_errors="0" success="true"/>
      </test>
    <stats name="outatime" n_failed="0" n_total="2" n_errors="0" success="true"/>
    </test>
    <test location="" name="testudo" title="Testudo">
      <test location="" name="testudo.main" title="main() test">
        <test location="testudo_tree.ttd:9" name="testudo.main.show test tree" title="show test tree">
        <declare location="testudo_tree.ttd:10" brief_location="10">ostringstream trs</declare>
        <perform location="testudo_tree.ttd:11" brief_location="11">testudo::print_tree(trs, testudo::TestNode::root_node())</perform>
        <show_value location="testudo_tree.ttd:12" brief_location="12">
          <expression1 value="-- /&#xa;|- bttf1&#xa;|  `- outatime&#xa;|     `- flux_capacitor&#xa;|        `- FC after construction&#xa;|- bttf2&#xa;|  `- outatime&#xa;|     `- flux_capacitor&#xa;|        `- FC after construction&#xa;|- bttf3&#xa;|  `- outatime&#xa;|     `- flux_capacitor&#xa;|        `- FC after construction&#xa;|- bttf4&#xa;|  `- outatime&#xa;|     `- flux_capacitor&#xa;|        `- FC after construction&#xa;|- container&#xa;|  |- Cauldron emptyness&#xa;|  `- Marmite emptyness&#xa;|- delorean&#xa;|  |- start&#xa;|  |  |- engine is off at start&#xa;|  |  `- there&apos;s no Plutonium initially&#xa;|  `- slower transition speed&#xa;|- numbers&#xa;|  `- fixture members&#xa;|- outatime&#xa;|  `- delorean&#xa;|     |- doors closed initially&#xa;|     `- flux_capacitor&#xa;|- testudo&#xa;|  |- main&#xa;|  |  `- show test tree&#xa;|  |- use_instructions&#xa;|  |- testarudo&#xa;|  |  |- simple testarudo tests&#xa;|  |  |- complex&#xa;|  |  |  |- difficult test&#xa;|  |  |  |- complicated test&#xa;|  |  |  |- test_with_error&#xa;|  |  |  |- penultimate test&#xa;|  |  |  |- &quot;true()&quot;-with arguments syntax&#xa;|  |  |  |- &quot;true_for&quot; checking for validity&#xa;|  |  |  |- show relevant expressions and check their validity&#xa;|  |  |  |- explain fails&#xa;|  |  |  |- try_catch&#xa;|  |  |  |- test_with_an_absurdly_long_name_so_we_can_check_multiline_cartouches&#xa;|  |  |  `- &quot;with&quot; checks&#xa;|  |  |- disorder&#xa;|  |  |  |- du&#xa;|  |  |  |- unu&#xa;|  |  |  |- absdiff&#xa;|  |  |  |- testarudo_ext&#xa;|  |  |  `- no_representation&#xa;|  |  |- external function&#xa;|  |  |- absdiff with mismatched sizes&#xa;|  |  |- provided&#xa;|  |  |- tfos&#xa;|  |  |- show_value() in with_data()&#xa;|  |  |- random data generators&#xa;|  |  |- track this&#xa;|  |  `- lambda inside test&#xa;|  |- esperanto_test&#xa;|  |  `- numbers&#xa;|  |- fixture&#xa;|  |  |- + commutativity&#xa;|  |  |- * commutativity&#xa;|  |  |- associativity&#xa;|  |  |- fixtures with arguments, specified size&#xa;|  |  `- fixtures with arguments, specified size and value&#xa;|  |- scope&#xa;|  |- Testudo syntax&#xa;|  |- multiline&#xa;|  |- UTF8 length&#xa;|  |- mock_turtle&#xa;|  |  |- Queen of Hearts&apos; recipe&#xa;|  |  |- Queen of Hearts&apos; recipe calls&#xa;|  |  |- approx&#xa;|  |  |- calls with several mocks&#xa;|  |  |- predicates&#xa;|  |  |- exceptions with mock&#xa;|  |  |- exceptions with wrap&#xa;|  |  `- functions for default mock method values&#xa;|  |- crc&#xa;|  |  |- crc32&#xa;|  |  |  |- table&#xa;|  |  |  `- examples&#xa;|  |  `- crc64&#xa;|  |     |- table&#xa;|  |     |- examples&#xa;|  |     `- sanity checks&#xa;|  |- glob_test&#xa;|  |  |- no special character&#xa;|  |  |- question mark&#xa;|  |  |- asterisk&#xa;|  |  |- escape&#xa;|  |  `- complex&#xa;|  |- diff&#xa;|  |  |- longest common subsequence&#xa;|  |  |- shortest_edit&#xa;|  |  `- track parsing&#xa;|  |- macros&#xa;|  |  |- test definitions&#xa;|  |  |- EXPAND&#xa;|  |  |- STRING&#xa;|  |  |- CAT&#xa;|  |  |- REMOVE_BRACKETS&#xa;|  |  |- TAKE_SINGLE, TAKE_1ST, TAKE_2ND&#xa;|  |  |- SINGLE_OR_1ST, SINGLE_OR_2nd&#xa;|  |  |- FIRST, COMMA_REST&#xa;|  |  |- FOR_EACH, FOR_EACH_N_REV_COMMA&#xa;|  |  |- HAS_COMMA, IS_EMPTY&#xa;|  |  `- COMMA_IF_NOT_EMPTY&#xa;|  `- sh&#xa;|- tricorder&#xa;|  `- medical&#xa;|     `- switch on after creation&#xa;|- tricorder3&#xa;|  `- medical&#xa;|     `- switch on after creation&#xa;|- búri&#xa;|  `- borr&#xa;`- examples&#xa;   |- style&#xa;   |- tricorder&#xa;   |  `- medical&#xa;   |     `- switch on after creation&#xa;   |- declare&#xa;   |- perform&#xa;   |- check true&#xa;   |- check false&#xa;   |- check equal&#xa;   |- check not equal&#xa;   |- check equal automatic type&#xa;   |- 100&#xa;   |- check approx&#xa;   |- check not approx&#xa;   |- define approx epsilon&#xa;   |- set approx epsilon&#xa;   |- show approx epsilon&#xa;   |- check approx tol&#xa;   |- check show&#xa;   |- check show other&#xa;   |- check explain&#xa;   |- check try catch&#xa;   |- check try catch exception&#xa;   |- show value&#xa;   |- show value unquoted&#xa;   |- in scope&#xa;   |- with declare&#xa;   |- with declare several&#xa;   |- tout&#xa;   |- print break&#xa;   |- 200&#xa;   |- tfos&#xa;   |- tfos to text&#xa;   |- unexpected exception&#xa;   |- provided&#xa;   |- with data&#xa;   |- with data structured binding&#xa;   |- with multiline data&#xa;   |- data for with data loop&#xa;   |- generate data tuple&#xa;   |- cartesian product&#xa;   |- mock_turtle&#xa;   |  |- Victorian recipe&#xa;   |  |- recipe&#xa;   |  |- mock turtle recipe 100&#xa;   |  |- mock turtle recipe 200&#xa;   |  |- mock turtle recipe 300&#xa;   |  |- mock turtle recipe 400&#xa;   |  |- mock turtle recipe 500&#xa;   |  `- mock turtle recipe 600&#xa;   |- namable&#xa;   |  |- exception 2nd set_name_is_good()&#xa;   |  `- exception 2nd create()&#xa;   |- ledgers&#xa;   |- call_ledger_report_to&#xa;   `- esperanto_test&#xa;      `- numbers&#xa;">testudo::unquoted(trs.str())</expression1>
        </show_value>
        <stats name="testudo.main.show test tree" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.main" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="testudo_doc.ttd:52" name="testudo.use_instructions" title="use instructions">
      <text location="testudo_doc.ttd:54" brief_location="54">index:&#xa;  1. holding functionality&#xa;  2. exceptions&#xa;  3. list of forgotten doubles</text>
      <separator location="testudo_doc.ttd:58" brief_location="58"/>
      <declare location="testudo_doc.ttd:59" brief_location="59">Hold hf</declare>
      <check_true location="testudo_doc.ttd:60" brief_location="60" success="true" prefix="">
        <expression1>not hf.is_holding()</expression1>
      </check_true>
      <perform location="testudo_doc.ttd:61" brief_location="61">hf.hold(3.14)</perform>
      <check_true location="testudo_doc.ttd:62" brief_location="62" success="true" prefix="">
        <expression1>hf.is_holding()</expression1>
      </check_true>
      <check_approx location="testudo_doc.ttd:63" brief_location="63" success="true" prefix="" max_error="eps">
        <expression1 value="3.14">hf.pop()</expression1>
        <expression2 value="3.14">3.14</expression2>
      </check_approx>
      <check_true location="testudo_doc.ttd:64" brief_location="64" success="true" prefix="">
        <expression1>not hf.is_holding()</expression1>
      </check_true>
      <separator location="testudo_doc.ttd:65" brief_location="65"/>
      <text location="testudo_doc.ttd:66" brief_location="66">hf is empty now</text>
      <step_id location="testudo_doc.ttd:67" brief_location="67" id="popping_empty"/>
      <try location="testudo_doc.ttd:68" brief_location="68">hf.pop()</try>
      <catch location="" brief_location="" exception_type="" success="true">not holding any double</catch>
      <perform location="testudo_doc.ttd:69" brief_location="69">hf.hold(2.72)</perform>
      <step_id location="testudo_doc.ttd:70" brief_location="70" id="adding_to_already_holding"/>
      <try location="testudo_doc.ttd:71" brief_location="71">hf.hold(7.)</try>
      <catch location="" brief_location="" exception_type="" success="true">already holding a double</catch>
      <separator location="testudo_doc.ttd:72" brief_location="72"/>
      <text location="testudo_doc.ttd:73" brief_location="73">the forgotten doubles list is still empty</text>
      <check_true location="testudo_doc.ttd:74" brief_location="74" success="false" prefix="">
        <expression1>Hold::is_forgotten_empty()</expression1>
      </check_true>
      <check_equal location="testudo_doc.ttd:75" brief_location="75" success="true" prefix="">
        <expression1 value="0">Hold::get_forgotten().size()</expression1>
        <expression2 value="0">0u</expression2>
      </check_equal>
        <scope location="testudo_doc.ttd:76" brief_location="76" name="scope 1">
        <declare location="testudo_doc.ttd:77" brief_location="77">Hold hf1(1.1)</declare>
        <declare location="testudo_doc.ttd:78" brief_location="78">Hold hf2(2.2)</declare>
          <scope location="testudo_doc.ttd:79" brief_location="79" name="">
          <declare location="testudo_doc.ttd:80" brief_location="80">Hold hf3(3.3)</declare>
          </scope>
        <check_approx location="testudo_doc.ttd:82" brief_location="82" success="true" prefix="" max_error=".5">
          <expression1 value="{3.3}">Hold::get_forgotten()</expression1>
          <expression2 value="{3}">{3.}</expression2>
        </check_approx>
        <show_value location="testudo_doc.ttd:83" brief_location="83">
          <expression1 value="2.2">hf2.pop()</expression1>
        </show_value>
        <text location="testudo_doc.ttd:84" brief_location="84">hf2 now empty; it won&apos;t add to the list</text>
        </scope>
      <check_true location="testudo_doc.ttd:86" brief_location="86" success="true" prefix="">
        <expression1>not Hold::is_forgotten_empty()</expression1>
      </check_true>
      <check_approx location="testudo_doc.ttd:87" brief_location="87" success="false" prefix="" max_error="eps">
        <expression1 value="{1.1, 3.3}">Hold::get_forgotten()</expression1>
        <expression2 value="{3.3, 1.1}">{3.3, 1.1}</expression2>
      </check_approx>
      <perform location="testudo_doc.ttd:89" brief_location="89">Hold::clear_forgotten()</perform>
      <check_equal location="testudo_doc.ttd:90" brief_location="90" success="true" prefix="">
        <expression1 value="0">Hold::get_forgotten().size()</expression1>
        <expression2 value="0">0u</expression2>
      </check_equal>
      <text location="testudo_doc.ttd:91" brief_location="91">the following will raise an error</text>
      <perform location="testudo_doc.ttd:92" brief_location="92">hf.hold(9.9)</perform>
      <uncaught_exception>already holding a double</uncaught_exception>
      <stats name="testudo.use_instructions" n_failed="2" n_total="12" n_errors="1" success="false"/>
      </test>
      <test location="" name="testudo.testarudo" title="testarudo tests">
        <test location="testarudo.ttd:20" name="testudo.testarudo.simple testarudo tests" title="simple testarudo tests">
        <check_true location="testarudo.ttd:21" brief_location="21" success="true" prefix="">
          <expression1>true</expression1>
        </check_true>
        <check_true location="testarudo.ttd:22" brief_location="22" success="false" prefix="">
          <expression1>false</expression1>
        </check_true>
        <check_true location="testarudo.ttd:23" brief_location="23" success="false" prefix="nay">
          <expression1>true</expression1>
        </check_true>
        <check_true location="testarudo.ttd:24" brief_location="24" success="true" prefix="nay">
          <expression1>false</expression1>
        </check_true>
        <check_true location="testarudo.ttd:25" brief_location="25" success="true" prefix="nay">
          <expression1>2+2==5</expression1>
        </check_true>
        <stats name="testudo.testarudo.simple testarudo tests" n_failed="2" n_total="5" n_errors="0" success="false"/>
        </test>
        <test location="" name="testudo.testarudo.complex" title="complex testarudo tests">
          <test location="testarudo.ttd:30" name="testudo.testarudo.complex.difficult test" title="difficult test">
          <check_equal location="testarudo.ttd:31" brief_location="31" success="false" prefix="">
            <expression1 value="7">7</expression1>
            <expression2 value="8">8</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:32" brief_location="32" success="true" prefix="nay">
            <expression1 value="7">7</expression1>
            <expression2 value="8">8</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:33" brief_location="33" success="true" prefix="">
            <expression1 value="&quot;un chat&quot;">&quot;un chat&quot;</expression1>
            <expression2 value="&quot;un chat&quot;">string(&quot;un chat&quot;)</expression2>
          </check_equal>
          <stats name="testudo.testarudo.complex.difficult test" n_failed="1" n_total="3" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:36" name="testudo.testarudo.complex.complicated test" title="complicated test">
          <check_equal location="testarudo.ttd:37" brief_location="37" success="false" prefix="">
            <expression1 value="&quot;it&apos;s&quot;">&quot;it&apos;s&quot;</expression1>
            <expression2 value="&quot;complicated&quot;">&quot;complicated&quot;</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:38" brief_location="38" success="false" prefix="">
            <expression1 value="54">6*9</expression1>
            <expression2 value="42">42</expression2>
          </check_equal>
          <stats name="testudo.testarudo.complex.complicated test" n_failed="2" n_total="2" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:41" name="testudo.testarudo.complex.test_with_error" title="test_with_error">
          <check_equal location="testarudo.ttd:42" brief_location="42" success="true" prefix="">
            <expression1 value="44">22+22</expression1>
            <expression2 value="44">44</expression2>
          </check_equal>
          <perform location="testarudo.ttd:43" brief_location="43">throw runtime_error(&quot;see if you can catch me!&quot;)</perform>
          <uncaught_exception>see if you can catch me!</uncaught_exception>
          <stats name="testudo.testarudo.complex.test_with_error" n_failed="0" n_total="1" n_errors="1" success="false"/>
          </test>
          <test location="testarudo.ttd:48" name="testudo.testarudo.complex.penultimate test" title="penultimate test">
          <check_equal location="testarudo.ttd:49" brief_location="49" success="false" prefix="">
            <expression1 value="&quot;there&apos;s nothing&quot;">&quot;there&apos;s nothing&quot;</expression1>
            <expression2 value="&quot;penultimate&quot;">&quot;penultimate&quot;</expression2>
          </check_equal>
          <stats name="testudo.testarudo.complex.penultimate test" n_failed="1" n_total="1" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:52" name="testudo.testarudo.complex.&quot;true()&quot;-with arguments syntax" title="&quot;true()&quot;-with arguments syntax">
          <declare location="testarudo.ttd:53" brief_location="53">int a=7</declare>
          <declare location="testarudo.ttd:54" brief_location="54">int b=8</declare>
          <check_true location="testarudo.ttd:55" brief_location="55" success="true" prefix="">
            <expression1>a&lt;b</expression1>
          </check_true>
          <check_true location="testarudo.ttd:56" brief_location="56" success="false" prefix="">
            <expression1>a&gt;b</expression1>
          </check_true>
          <check_true location="testarudo.ttd:57" brief_location="57" success="true" prefix="">
            <expression1>a&lt;b</expression1>
            <expressionv value="7, 8">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:58" brief_location="58" success="false" prefix="">
            <expression1>a&gt;b</expression1>
            <expressionv value="7, 8">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:59" brief_location="59" success="false" prefix="nay">
            <expression1>a&lt;b</expression1>
          </check_true>
          <check_true location="testarudo.ttd:60" brief_location="60" success="true" prefix="nay">
            <expression1>a&gt;b</expression1>
          </check_true>
          <check_true location="testarudo.ttd:61" brief_location="61" success="false" prefix="nay">
            <expression1>a&lt;b</expression1>
            <expressionv value="7, 8">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:62" brief_location="62" success="true" prefix="nay">
            <expression1>a&gt;b</expression1>
            <expressionv value="7, 8">a, b</expressionv>
          </check_true>
          <check_equal location="testarudo.ttd:63" brief_location="63" success="true" prefix="">
            <expression1 value="7">a</expression1>
            <expression2 value="7">a</expression2>
          </check_equal>
          <check_true location="testarudo.ttd:64" brief_location="64" success="true" prefix="">
            <expression1>are_equal(a, a)</expression1>
            <expressionv value="7">a</expressionv>
          </check_true>
          <check_equal location="testarudo.ttd:65" brief_location="65" success="false" prefix="">
            <expression1 value="7">a</expression1>
            <expression2 value="8">b</expression2>
          </check_equal>
          <check_true location="testarudo.ttd:66" brief_location="66" success="false" prefix="">
            <expression1>are_equal(a, b)</expression1>
            <expressionv value="7, 8">a, b</expressionv>
          </check_true>
          <declare location="testarudo.ttd:67" brief_location="67">float x=3.14f</declare>
          <declare location="testarudo.ttd:68" brief_location="68">float y=3.1416f</declare>
          <check_approx location="testarudo.ttd:69" brief_location="69" success="false" prefix="" max_error="eps">
            <expression1 value="3.14">x</expression1>
            <expression2 value="3.1416">y</expression2>
          </check_approx>
          <check_true location="testarudo.ttd:70" brief_location="70" success="false" prefix="">
            <expression1>are_approx(x, y)</expression1>
            <expressionv value="3.14, 3.1416">x, y</expressionv>
          </check_true>
          <check_approx location="testarudo.ttd:71" brief_location="71" success="true" prefix="" max_error=".1">
            <expression1 value="3.14">x</expression1>
            <expression2 value="3.1416">y</expression2>
          </check_approx>
          <check_true location="testarudo.ttd:72" brief_location="72" success="true" prefix="">
            <expression1>are_approx(x, y, .1)</expression1>
            <expressionv value="3.14, 3.1416">x, y</expressionv>
          </check_true>
          <perform location="testarudo.ttd:73" brief_location="73">approx_epsilon=.1</perform>
          <check_approx location="testarudo.ttd:74" brief_location="74" success="true" prefix="" max_error="eps">
            <expression1 value="3.14">x</expression1>
            <expression2 value="3.1416">y</expression2>
          </check_approx>
          <check_true location="testarudo.ttd:75" brief_location="75" success="true" prefix="">
            <expression1>are_approx(x, y)</expression1>
            <expressionv value="3.14, 3.1416">x, y</expressionv>
          </check_true>
          <stats name="testudo.testarudo.complex.&quot;true()&quot;-with arguments syntax" n_failed="8" n_total="18" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:125" name="testudo.testarudo.complex.&quot;true_for&quot; checking for validity" title="&quot;true_for&quot; checking for validity">
          <declare location="testarudo.ttd:126" brief_location="126">WrappedInt a=7</declare>
          <declare location="testarudo.ttd:127" brief_location="127">WrappedInt b=8</declare>
          <declare location="testarudo.ttd:128" brief_location="128">WrappedInt c</declare>
          <perform location="testarudo.ttd:129" brief_location="129">c.value=8</perform>
          <check_true location="testarudo.ttd:130" brief_location="130" success="true" prefix="">
            <expression1>c==c</expression1>
          </check_true>
          <check_true location="testarudo.ttd:131" brief_location="131" success="false" prefix="">
            <expression1>c not_eq c</expression1>
          </check_true>
          <check_equal location="testarudo.ttd:132" brief_location="132" success="false" prefix="">
            <expression1 value="WI(false,8)">c</expression1>
            <expression2 value="WI(false,8)">c</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:133" brief_location="133" success="false" prefix="nay">
            <expression1 value="WI(false,8)">c</expression1>
            <expression2 value="WI(false,8)">c</expression2>
          </check_equal>
          <check_true location="testarudo.ttd:134" brief_location="134" success="false" prefix="">
            <expression1>c==c</expression1>
            <expressionv value="WI(false,8)">c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:135" brief_location="135" success="false" prefix="nay">
            <expression1>c==c</expression1>
            <expressionv value="WI(false,8)">c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:136" brief_location="136" success="false" prefix="">
            <expression1>c not_eq c</expression1>
            <expressionv value="WI(false,8)">c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:137" brief_location="137" success="false" prefix="nay">
            <expression1>c not_eq c</expression1>
            <expressionv value="WI(false,8)">c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:138" brief_location="138" success="false" prefix="">
            <expression1>c==b</expression1>
          </check_true>
          <check_true location="testarudo.ttd:139" brief_location="139" success="true" prefix="">
            <expression1>c not_eq b</expression1>
          </check_true>
          <check_equal location="testarudo.ttd:140" brief_location="140" success="false" prefix="">
            <expression1 value="WI(false,8)">c</expression1>
            <expression2 value="WI(true,8)">b</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:141" brief_location="141" success="false" prefix="nay">
            <expression1 value="WI(false,8)">c</expression1>
            <expression2 value="WI(true,8)">b</expression2>
          </check_equal>
          <check_true location="testarudo.ttd:142" brief_location="142" success="false" prefix="">
            <expression1>c==b</expression1>
            <expressionv value="WI(false,8), WI(true,8)">c, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:143" brief_location="143" success="false" prefix="nay">
            <expression1>c==b</expression1>
            <expressionv value="WI(false,8), WI(true,8)">c, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:144" brief_location="144" success="false" prefix="">
            <expression1>c not_eq b</expression1>
            <expressionv value="WI(false,8), WI(true,8)">c, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:145" brief_location="145" success="false" prefix="nay">
            <expression1>c not_eq b</expression1>
            <expressionv value="WI(false,8), WI(true,8)">c, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:146" brief_location="146" success="true" prefix="">
            <expression1>a.value&lt;b.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:147" brief_location="147" success="false" prefix="">
            <expression1>a.value&gt;b.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:148" brief_location="148" success="true" prefix="">
            <expression1>a.value&lt;b.value</expression1>
            <expressionv value="WI(true,7), WI(true,8)">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:149" brief_location="149" success="false" prefix="">
            <expression1>a.value&gt;b.value</expression1>
            <expressionv value="WI(true,7), WI(true,8)">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:150" brief_location="150" success="true" prefix="">
            <expression1>a.value&lt;c.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:151" brief_location="151" success="false" prefix="">
            <expression1>a.value&gt;c.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:152" brief_location="152" success="false" prefix="">
            <expression1>a.value&lt;c.value</expression1>
            <expressionv value="WI(true,7), WI(false,8)">a, c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:153" brief_location="153" success="false" prefix="">
            <expression1>a.value&gt;c.value</expression1>
            <expressionv value="WI(true,7), WI(false,8)">a, c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:154" brief_location="154" success="false" prefix="nay">
            <expression1>a.value&lt;b.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:155" brief_location="155" success="true" prefix="nay">
            <expression1>a.value&gt;b.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:156" brief_location="156" success="false" prefix="nay">
            <expression1>a.value&lt;b.value</expression1>
            <expressionv value="WI(true,7), WI(true,8)">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:157" brief_location="157" success="true" prefix="nay">
            <expression1>a.value&gt;b.value</expression1>
            <expressionv value="WI(true,7), WI(true,8)">a, b</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:158" brief_location="158" success="false" prefix="nay">
            <expression1>a.value&lt;c.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:159" brief_location="159" success="true" prefix="nay">
            <expression1>a.value&gt;c.value</expression1>
          </check_true>
          <check_true location="testarudo.ttd:160" brief_location="160" success="false" prefix="nay">
            <expression1>a.value&lt;c.value</expression1>
            <expressionv value="WI(true,7), WI(false,8)">a, c</expressionv>
          </check_true>
          <check_true location="testarudo.ttd:161" brief_location="161" success="false" prefix="nay">
            <expression1>a.value&gt;c.value</expression1>
            <expressionv value="WI(true,7), WI(false,8)">a, c</expressionv>
          </check_true>
          <separator location="testarudo.ttd:162" brief_location="162"/>
          <declare location="testarudo.ttd:163" brief_location="163">LeakingWrappedInt x=0</declare>
          <declare location="testarudo.ttd:164" brief_location="164">LeakingWrappedInt y</declare>
          <check_equal location="testarudo.ttd:165" brief_location="165" success="false" prefix="">
            <expression1 value="LWI(true,0)">x</expression1>
            <expression2 value="LWI(false,0)">y</expression2>
          </check_equal>
          <text location="testarudo.ttd:166" brief_location="166">no validity check:</text>
          <check_true location="testarudo.ttd:167" brief_location="167" success="true" prefix="">
            <expression1>x==y</expression1>
          </check_true>
          <text location="testarudo.ttd:168" brief_location="168">check for &quot;x&quot; validity:</text>
          <check_true location="testarudo.ttd:169" brief_location="169" success="true" prefix="">
            <expression1>x==y</expression1>
            <expressionv value="LWI(true,0)">x</expressionv>
          </check_true>
          <text location="testarudo.ttd:170" brief_location="170">check for &quot;y&quot; validity:</text>
          <check_true location="testarudo.ttd:171" brief_location="171" success="false" prefix="">
            <expression1>x==y</expression1>
            <expressionv value="LWI(false,0)">y</expressionv>
          </check_true>
          <text location="testarudo.ttd:172" brief_location="172">check for &quot;x&quot; and &quot;y&quot; validity:</text>
          <check_true location="testarudo.ttd:173" brief_location="173" success="false" prefix="">
            <expression1>x==y</expression1>
            <expressionv value="LWI(true,0), LWI(false,0)">x, y</expressionv>
          </check_true>
          <check_equal location="testarudo.ttd:174" brief_location="174" success="false" prefix="">
            <expression1 value="LWI(false,0)">y</expression1>
            <expression2 value="LWI(true,0)">x</expression2>
          </check_equal>
          <text location="testarudo.ttd:175" brief_location="175">no validity check:</text>
          <check_true location="testarudo.ttd:176" brief_location="176" success="true" prefix="">
            <expression1>y==x</expression1>
          </check_true>
          <text location="testarudo.ttd:177" brief_location="177">check for &quot;y&quot; validity:</text>
          <check_true location="testarudo.ttd:178" brief_location="178" success="false" prefix="">
            <expression1>y==x</expression1>
            <expressionv value="LWI(false,0)">y</expressionv>
          </check_true>
          <text location="testarudo.ttd:179" brief_location="179">check for &quot;x&quot; validity:</text>
          <check_true location="testarudo.ttd:180" brief_location="180" success="true" prefix="">
            <expression1>y==x</expression1>
            <expressionv value="LWI(true,0)">x</expressionv>
          </check_true>
          <text location="testarudo.ttd:181" brief_location="181">check for &quot;x&quot; and &quot;y&quot; validity:</text>
          <check_true location="testarudo.ttd:182" brief_location="182" success="false" prefix="">
            <expression1>y==x</expression1>
            <expressionv value="LWI(false,0), LWI(true,0)">y, x</expressionv>
          </check_true>
          <stats name="testudo.testarudo.complex.&quot;true_for&quot; checking for validity" n_failed="30" n_total="42" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:185" name="testudo.testarudo.complex.show relevant expressions and check their validity" title="show relevant expressions and check their validity">
          <declare location="testarudo.ttd:186" brief_location="186">WrappedInt a=7</declare>
          <declare location="testarudo.ttd:187" brief_location="187">WrappedInt b=8</declare>
          <declare location="testarudo.ttd:188" brief_location="188">WrappedInt c</declare>
          <perform location="testarudo.ttd:189" brief_location="189">c.value=15</perform>
          <declare location="testarudo.ttd:190" brief_location="190">LeakingWrappedInt x=0</declare>
          <declare location="testarudo.ttd:191" brief_location="191">LeakingWrappedInt y</declare>
          <check_equal location="testarudo.ttd:192" brief_location="192" success="false" prefix="">
            <expression1 value="WI(true,15)">a+b</expression1>
            <expression2 value="WI(false,15)">c</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:193" brief_location="193" success="false" prefix="">
            <expression1 value="WI(true,15)">a+b</expression1>
            <expression2 value="WI(false,15)">c</expression2>
            <expressionv value="WI(true,7), WI(true,8)">a, b</expressionv>
          </check_equal>
          <check_equal location="testarudo.ttd:194" brief_location="194" success="true" prefix="">
            <expression1 value="LWI(true,0)">x+x</expression1>
            <expression2 value="LWI(true,0)">x</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:195" brief_location="195" success="true" prefix="">
            <expression1 value="LWI(true,0)">x+x</expression1>
            <expression2 value="LWI(true,0)">x</expression2>
            <expressionv value="LWI(true,0)">x</expressionv>
          </check_equal>
          <check_equal location="testarudo.ttd:196" brief_location="196" success="false" prefix="">
            <expression1 value="LWI(true,0)">x+x</expression1>
            <expression2 value="LWI(false,0)">y</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:197" brief_location="197" success="false" prefix="">
            <expression1 value="LWI(true,0)">x+x</expression1>
            <expression2 value="LWI(false,0)">y</expression2>
            <expressionv value="LWI(true,0)">x</expressionv>
          </check_equal>
          <check_equal location="testarudo.ttd:198" brief_location="198" success="false" prefix="">
            <expression1 value="LWI(false,0)">y+y</expression1>
            <expression2 value="LWI(false,0)">y</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:199" brief_location="199" success="false" prefix="">
            <expression1 value="LWI(false,0)">y+y</expression1>
            <expression2 value="LWI(false,0)">y</expression2>
            <expressionv value="LWI(false,0)">y</expressionv>
          </check_equal>
          <check_equal location="testarudo.ttd:200" brief_location="200" success="true" prefix="">
            <expression1 value="0">0</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:201" brief_location="201" success="false" prefix="">
            <expression1 value="0">0</expression1>
            <expression2 value="0">0</expression2>
            <expressionv value="LWI(false,0)">y</expressionv>
          </check_equal>
          <declare location="testarudo.ttd:202" brief_location="202">double z=2.</declare>
          <check_approx location="testarudo.ttd:203" brief_location="203" success="false" prefix="" max_error="eps">
            <expression1 value="4">2*z</expression1>
            <expression2 value="4.1">4.1</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:204" brief_location="204" success="false" prefix="" max_error="eps">
            <expression1 value="4">2*z</expression1>
            <expression2 value="4.1">4.1</expression2>
            <expressionv value="2">z</expressionv>
          </check_approx>
          <check_approx location="testarudo.ttd:205" brief_location="205" success="true" prefix="" max_error=".5">
            <expression1 value="4">2*z</expression1>
            <expression2 value="4.1">4.1</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:206" brief_location="206" success="true" prefix="" max_error=".5">
            <expression1 value="4">2*z</expression1>
            <expression2 value="4.1">4.1</expression2>
            <expressionv value="2">z</expressionv>
          </check_approx>
          <stats name="testudo.testarudo.complex.show relevant expressions and check their validity" n_failed="9" n_total="14" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:209" name="testudo.testarudo.complex.explain fails" title="explain fails">
          <declare location="testarudo.ttd:210" brief_location="210">int a=1</declare>
          <declare location="testarudo.ttd:211" brief_location="211">int b=2</declare>
          <check_equal location="testarudo.ttd:212" brief_location="212" success="true" prefix="">
            <expression1 value="1">a</expression1>
            <expression2 value="1">a</expression2>
            <explanation>this should not be printed: 1is 1</explanation>
          </check_equal>
          <check_equal location="testarudo.ttd:213" brief_location="213" success="false" prefix="">
            <expression1 value="1">a</expression1>
            <expression2 value="2">b</expression2>
            <explanation>in a better world, 1 would be 2</explanation>
          </check_equal>
          <check_equal location="testarudo.ttd:214" brief_location="214" success="false" prefix="">
            <expression1 value="3">3*a</expression1>
            <expression2 value="2">b</expression2>
            <expressionv value="1">a</expressionv>
            <explanation>hmm, why isn&apos;t thrice 1 equal to 2?</explanation>
          </check_equal>
          <check_equal location="testarudo.ttd:216" brief_location="216" success="true" prefix="">
            <expression1 value="1">a</expression1>
            <expression2 value="1">a</expression2>
            <explanation>always true</explanation>
          </check_equal>
            <indent location="" brief_location="">
            <check_equal location="testarudo.ttd:217" brief_location="217" success="true" prefix="">
              <expression1 value="2">b</expression1>
              <expression2 value="2">b</expression2>
            </check_equal>
            </indent>
          <check_equal location="testarudo.ttd:218" brief_location="218" success="error" prefix="">
            <expression1 value="1">a</expression1>
            <expression2 value="2">b</expression2>
            <explanation>wouldn&apos;t it be good?</explanation>
          </check_equal>
            <indent location="" brief_location="">
            </indent>
          <stats name="testudo.testarudo.complex.explain fails" n_failed="2" n_total="5" n_errors="1" success="false"/>
          </test>
          <test location="testarudo.ttd:222" name="testudo.testarudo.complex.try_catch" title="try-catch checks">
          <try location="testarudo.ttd:223" brief_location="223">[]() { }()</try>
          <catch location="" brief_location="" exception_type="" success="false">&lt;no exception&gt;</catch>
          <try location="testarudo.ttd:224" brief_location="224">throw runtime_error(&quot;this&apos;ll be caught&quot;)</try>
          <catch location="" brief_location="" exception_type="" success="true">this&apos;ll be caught</catch>
          <try location="testarudo.ttd:225" brief_location="225">throw &quot;this&apos;ll be too&quot;</try>
          <catch location="" brief_location="" exception_type="char const *" success="true">this&apos;ll be too</catch>
          <try location="testarudo.ttd:226" brief_location="226">throw &quot;but this shouldn&apos;t&quot;</try>
          <catch location="" brief_location="" exception_type="" success="false">&lt;unexpected exception&gt;</catch>
          <uncaught_exception>but this shouldn&apos;t</uncaught_exception>
          <stats name="testudo.testarudo.complex.try_catch" n_failed="2" n_total="4" n_errors="1" success="false"/>
          </test>
          <test location="testarudo.ttd:230" name="testudo.testarudo.complex.test_with_an_absurdly_long_name_so_we_can_check_multiline_cartouches" title="a test with so many characters in the name and in the title that it&apos;ll have to be broken across several lines in the cartouche">
          <stats name="testudo.testarudo.complex.test_with_an_absurdly_long_name_so_we_can_check_multiline_cartouches" n_failed="0" n_total="0" n_errors="0" success="true"/>
          </test>
          <test location="testarudo.ttd:236" name="testudo.testarudo.complex.&quot;with&quot; checks" title="&quot;with&quot; checks">
          <declare location="testarudo.ttd:237" brief_location="237">list&lt;int&gt; numbers_1{2, 4, 8}</declare>
          <declare location="testarudo.ttd:238" brief_location="238">list&lt;int&gt; numbers_2{2, 5, 8}</declare>
            <with location="testarudo.ttd:239" brief_location="239" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_true location="testarudo.ttd:239" brief_location="239" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:240" brief_location="240" var="x" container_first="numbers_2" container_rest="" summary="x in numbers_2">
            <check_true location="testarudo.ttd:240" brief_location="240" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>(x%2)==0</expression1>
                <expressionv value="5">x</expressionv>
              </check_true>
              </with_results>
            <with_stats name="x in numbers_2" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:241" brief_location="241" var="x" container_first="list&lt;int&gt;{3, 4, 8}" container_rest="" summary="x in list&lt;int&gt;{...}">
            <check_true location="testarudo.ttd:241" brief_location="241" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>(x%2)==0</expression1>
                <expressionv value="3">x</expressionv>
              </check_true>
              </with_results>
            <with_stats name="x in list&lt;int&gt;{...}" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:242" brief_location="242" var="x" container_first="list&lt;int&gt;{2, 4, 7}" container_rest="" summary="x in list&lt;int&gt;{...}">
            <check_true location="testarudo.ttd:242" brief_location="242" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>(x%2)==0</expression1>
                <expressionv value="7">x</expressionv>
              </check_true>
              </with_results>
            <with_stats name="x in list&lt;int&gt;{...}" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:243" brief_location="243" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_equal location="testarudo.ttd:243" brief_location="243" success="with" prefix="">
              <expression1 value="">0</expression1>
              <expression2 value="">x%2</expression2>
              <expressionv value="">x</expressionv>
            </check_equal>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:244" brief_location="244" var="x" container_first="numbers_2" container_rest="" summary="x in numbers_2">
            <check_equal location="testarudo.ttd:244" brief_location="244" success="with" prefix="">
              <expression1 value="">0</expression1>
              <expression2 value="">x%2</expression2>
              <expressionv value="">x</expressionv>
            </check_equal>
              <with_results>
              <check_equal location="" brief_location="" success="false" prefix="">
                <expression1 value="0">0</expression1>
                <expression2 value="1">x%2</expression2>
                <expressionv value="5">x</expressionv>
              </check_equal>
              </with_results>
            <with_stats name="x in numbers_2" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
          <separator location="testarudo.ttd:246" brief_location="246"/>
            <with location="testarudo.ttd:248" brief_location="248" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <declare location="testarudo.ttd:249" brief_location="249">auto is_even=[](auto const &amp;a) { return ((a % 2) == 0); }</declare>
            <check_true location="testarudo.ttd:250" brief_location="250" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
            <text location="testarudo.ttd:251" brief_location="251">let&apos;s do something, just to see how it&apos;s shown</text>
            <declare location="testarudo.ttd:252" brief_location="252">auto y=x+1</declare>
            <show_value location="testarudo.ttd:253" brief_location="253">
              <expression1 value="">x, y</expression1>
            </show_value>
              <with_results>
              <show_value location="" brief_location="">
                <expression1 value="2, 3">x, y</expression1>
              </show_value>
              <show_value location="" brief_location="">
                <expression1 value="4, 5">x, y</expression1>
              </show_value>
              <show_value location="" brief_location="">
                <expression1 value="8, 9">x, y</expression1>
              </show_value>
              </with_results>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:255" brief_location="255" var="x" container_first="numbers_2" container_rest="" summary="x in numbers_2">
            <declare location="testarudo.ttd:256" brief_location="256">auto is_even=[](auto const &amp;a) { return ((a % 2) == 0); }</declare>
            <check_true location="testarudo.ttd:257" brief_location="257" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>is_even(x)</expression1>
                <expressionv value="5">x</expressionv>
                <explanation>isn&apos;t 5 even?</explanation>
              </check_true>
              </with_results>
            <text location="testarudo.ttd:258" brief_location="258">let&apos;s do something, just to see how it&apos;s shown</text>
            <declare location="testarudo.ttd:259" brief_location="259">auto y=x+1</declare>
            <show_value location="testarudo.ttd:260" brief_location="260">
              <expression1 value="">x, y</expression1>
            </show_value>
              <with_results>
              <show_value location="" brief_location="">
                <expression1 value="2, 3">x, y</expression1>
              </show_value>
              <show_value location="" brief_location="">
                <expression1 value="5, 6">x, y</expression1>
              </show_value>
              <show_value location="" brief_location="">
                <expression1 value="8, 9">x, y</expression1>
              </show_value>
              </with_results>
            <with_stats name="x in numbers_2" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
          <separator location="testarudo.ttd:263" brief_location="263"/>
            <with location="testarudo.ttd:265" brief_location="265" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
              <with location="testarudo.ttd:266" brief_location="266" var="y" container_first="numbers_2" container_rest="" summary="y in numbers_2">
              <check_equal location="testarudo.ttd:267" brief_location="267" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="4, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="8, 5">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in numbers_1" n_failed="3" n_total="9" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:268" brief_location="268" var="x" container_first="list&lt;int&gt;{2, 4, 9}" container_rest="" summary="x in list&lt;int&gt;{...}">
              <with location="testarudo.ttd:269" brief_location="269" var="y" container_first="numbers_2" container_rest="" summary="y in numbers_2">
              <check_equal location="testarudo.ttd:270" brief_location="270" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="4, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="9, 2">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="9, 8">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in list&lt;int&gt;{...}" n_failed="4" n_total="9" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:271" brief_location="271" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
              <with location="testarudo.ttd:272" brief_location="272" var="y" container_first="{2, 4, 10}" container_rest="" summary="y in {...}">
              <check_equal location="testarudo.ttd:273" brief_location="273" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
              </with>
            <with_stats name="x in numbers_1" n_failed="0" n_total="9" n_errors="0" success="true"/>
            </with>
          <separator location="testarudo.ttd:275" brief_location="275"/>
          <declare location="testarudo.ttd:277" brief_location="277">auto is_even=[](auto const &amp;a) { return ((a % 2) == 0); }</declare>
            <with location="testarudo.ttd:278" brief_location="278" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_true location="testarudo.ttd:278" brief_location="278" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:279" brief_location="279" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <declare location="testarudo.ttd:280" brief_location="280">int y=x+1</declare>
            <check_true location="testarudo.ttd:281" brief_location="281" success="with" prefix="nay">
              <expression1>is_even(y)</expression1>
              <expressionv value="">y</expressionv>
            </check_true>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:283" brief_location="283" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_true location="testarudo.ttd:284" brief_location="284" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with location="testarudo.ttd:285" brief_location="285" var="y" container_first="numbers_1" container_rest="" summary="y in numbers_1">
              <check_equal location="testarudo.ttd:286" brief_location="286" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
              </with>
            <with_stats name="x in numbers_1" n_failed="0" n_total="12" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:288" brief_location="288" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_true location="testarudo.ttd:289" brief_location="289" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with location="testarudo.ttd:290" brief_location="290" var="y" container_first="numbers_2" container_rest="" summary="y in numbers_2">
              <check_equal location="testarudo.ttd:291" brief_location="291" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="4, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="8, 5">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in numbers_1" n_failed="3" n_total="12" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:293" brief_location="293" var="x" container_first="numbers_2" container_rest="" summary="x in numbers_2">
            <check_true location="testarudo.ttd:294" brief_location="294" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>is_even(x)</expression1>
                <expressionv value="5">x</expressionv>
              </check_true>
              </with_results>
              <with location="testarudo.ttd:295" brief_location="295" var="y" container_first="numbers_1" container_rest="" summary="y in numbers_1">
              <check_equal location="testarudo.ttd:296" brief_location="296" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="5, 2">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="5, 4">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="5, 8">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in numbers_2" n_failed="4" n_total="12" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:298" brief_location="298" var="x" container_first="numbers_2" container_rest="" summary="x in numbers_2">
            <check_true location="testarudo.ttd:299" brief_location="299" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>is_even(x)</expression1>
                <expressionv value="5">x</expressionv>
              </check_true>
              </with_results>
              <with location="testarudo.ttd:300" brief_location="300" var="y" container_first="numbers_2" container_rest="" summary="y in numbers_2">
              <check_equal location="testarudo.ttd:301" brief_location="301" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="5, 2">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="1">x%2</expression1>
                  <expression2 value="0">y%2</expression2>
                  <expressionv value="5, 8">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="8, 5">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in numbers_2" n_failed="5" n_total="12" n_errors="0" success="false"/>
            </with>
          <separator location="testarudo.ttd:304" brief_location="304"/>
            <with location="testarudo.ttd:306" brief_location="306" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
              <with location="testarudo.ttd:307" brief_location="307" var="y" container_first="numbers_1" container_rest="" summary="y in numbers_1">
              <check_equal location="testarudo.ttd:308" brief_location="308" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
              </with>
            <check_true location="testarudo.ttd:309" brief_location="309" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with location="testarudo.ttd:310" brief_location="310" var="y" container_first="numbers_2" container_rest="" summary="y in numbers_2">
              <check_equal location="testarudo.ttd:311" brief_location="311" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="4, 5">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="8, 5">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <check_true location="testarudo.ttd:312" brief_location="312" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with location="testarudo.ttd:313" brief_location="313" var="y" container_first="numbers_1" container_rest="" summary="y in numbers_1">
              <check_equal location="testarudo.ttd:314" brief_location="314" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
              </with>
            <check_true location="testarudo.ttd:315" brief_location="315" success="with" prefix="">
              <expression1>is_even(x)</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with location="testarudo.ttd:316" brief_location="316" var="y" container_first="list&lt;int&gt;{2, 4, 9}" container_rest="" summary="y in list&lt;int&gt;{...}">
              <check_equal location="testarudo.ttd:317" brief_location="317" success="with" prefix="">
                <expression1 value="">x%2</expression1>
                <expression2 value="">y%2</expression2>
                <expressionv value="">x, y</expressionv>
              </check_equal>
                <with_results>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="2, 9">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="4, 9">x, y</expressionv>
                </check_equal>
                <check_equal location="" brief_location="" success="false" prefix="">
                  <expression1 value="0">x%2</expression1>
                  <expression2 value="1">y%2</expression2>
                  <expressionv value="8, 9">x, y</expressionv>
                </check_equal>
                </with_results>
              </with>
            <with_stats name="x in numbers_1" n_failed="6" n_total="45" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:319" brief_location="319" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
            <check_true location="testarudo.ttd:319" brief_location="319" success="with" prefix="">
              <expression1>is_even(0)</expression1>
              <expressionv value="">0</expressionv>
            </check_true>
            <with_stats name="x in numbers_1" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:321" brief_location="321" var="x" container_first="{1, 2, 3}" container_rest="" summary="x in {...}">
            <check_equal location="testarudo.ttd:322" brief_location="322" success="with" prefix="">
              <expression1 value="">x</expression1>
              <expression2 value="">x</expression2>
              <expressionv value="">x</expressionv>
            </check_equal>
            <with_stats name="x in {...}" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
            <with location="testarudo.ttd:323" brief_location="323" var="x" container_first="{1, 2, 3}" container_rest="" summary="x in {...}">
            <check_true location="testarudo.ttd:324" brief_location="324" success="with" prefix="">
              <expression1>x&lt;x</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&lt;x</expression1>
                <expressionv value="1">x</expressionv>
              </check_true>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&lt;x</expression1>
                <expressionv value="2">x</expressionv>
              </check_true>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&lt;x</expression1>
                <expressionv value="3">x</expressionv>
              </check_true>
              </with_results>
            <check_true location="testarudo.ttd:325" brief_location="325" success="with" prefix="">
              <expression1>x==x</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
            <check_true location="testarudo.ttd:326" brief_location="326" success="with" prefix="">
              <expression1>x&gt;x</expression1>
              <expressionv value="">x</expressionv>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&gt;x</expression1>
                <expressionv value="1">x</expressionv>
              </check_true>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&gt;x</expression1>
                <expressionv value="2">x</expressionv>
              </check_true>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>x&gt;x</expression1>
                <expressionv value="3">x</expressionv>
              </check_true>
              </with_results>
            <with_stats name="x in {...}" n_failed="6" n_total="9" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:329" brief_location="329" var="(x)" container_first="list&lt;tuple&lt;int&gt;&gt;{{3}, {4}, {8}}" container_rest="" summary="(x) in list&lt;tuple&lt;int&gt;&gt;{...}">
            <check_true location="testarudo.ttd:330" brief_location="330" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
            </check_true>
              <with_results>
              <check_true location="" brief_location="" success="false" prefix="">
                <expression1>(x%2)==0</expression1>
              </check_true>
              </with_results>
            <with_stats name="(x) in list&lt;tuple&lt;int&gt;&gt;{...}" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
          <declare location="testarudo.ttd:331" brief_location="331">list&lt;tuple&lt;int, int, int&gt;&gt; list_of_sums{{1, 3, 4}, {3, 7, 11}, {10, 15, 25}}</declare>
            <with location="testarudo.ttd:333" brief_location="333" var="(a, b, sum)" container_first="list_of_sums" container_rest="" summary="(a, b, sum) in list_of_sums">
            <check_equal location="testarudo.ttd:334" brief_location="334" success="with" prefix="">
              <expression1 value="">sum</expression1>
              <expression2 value="">a+b</expression2>
            </check_equal>
              <with_results>
              <check_equal location="" brief_location="" success="false" prefix="">
                <expression1 value="11">sum</expression1>
                <expression2 value="10">a+b</expression2>
              </check_equal>
              </with_results>
            <with_stats name="(a, b, sum) in list_of_sums" n_failed="1" n_total="3" n_errors="0" success="false"/>
            </with>
            <with location="testarudo.ttd:335" brief_location="335" var="(x)" container_first="list&lt;tuple&lt;int&gt;&gt;{{2}, {4}, {8}}" container_rest="" summary="(x) in list&lt;tuple&lt;int&gt;&gt;{...}">
            <check_true location="testarudo.ttd:336" brief_location="336" success="with" prefix="">
              <expression1>(x%2)==0</expression1>
            </check_true>
            <with_stats name="(x) in list&lt;tuple&lt;int&gt;&gt;{...}" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
          <declare location="testarudo.ttd:337" brief_location="337">list&lt;tuple&lt;int, int, int&gt;&gt; list_of_sums_2{{1, 3, 4}, {3, 7, 10}, {10, 15, 25}}</declare>
            <with location="testarudo.ttd:339" brief_location="339" var="(a, b, sum)" container_first="list_of_sums_2" container_rest="" summary="(a, b, sum) in list_of_sums_2">
            <check_equal location="testarudo.ttd:340" brief_location="340" success="with" prefix="">
              <expression1 value="">sum</expression1>
              <expression2 value="">a+b</expression2>
            </check_equal>
            <with_stats name="(a, b, sum) in list_of_sums_2" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
          <stats name="testudo.testarudo.complex.&quot;with&quot; checks" n_failed="38" n_total="177" n_errors="0" success="false"/>
          </test>
        <stats name="testudo.testarudo.complex" n_failed="93" n_total="267" n_errors="3" success="false"/>
        </test>
        <test location="" name="testudo.testarudo.disorder" title="disordered tests">
          <test location="testarudo.ttd:350" name="testudo.testarudo.disorder.du" title="du, but comes first">
          <check_true location="testarudo.ttd:352" brief_location="352" success="false" prefix="">
            <expression1>string(&quot;unu&quot;)&lt;string(&quot;du&quot;)</expression1>
          </check_true>
          <stats name="testudo.testarudo.disorder.du" n_failed="1" n_total="1" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:345" name="testudo.testarudo.disorder.unu" title="unu, but comes last">
          <check_true location="testarudo.ttd:347" brief_location="347" success="true" prefix="">
            <expression1>string(&quot;unu&quot;)&gt;string(&quot;du&quot;)</expression1>
          </check_true>
          <stats name="testudo.testarudo.disorder.unu" n_failed="0" n_total="1" n_errors="0" success="true"/>
          </test>
          <test location="testarudo.ttd:359" name="testudo.testarudo.disorder.absdiff" title="absdiff()">
          <perform location="testarudo.ttd:360" brief_location="360">approx_epsilon=1e-10</perform>
          <check_approx location="testarudo.ttd:361" brief_location="361" success="true" prefix="" max_error="eps">
            <expression1 value="2">testudo::absdiff(5., 7.)</expression1>
            <expression2 value="2">2.</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:362" brief_location="362" success="true" prefix="" max_error="eps">
            <expression1 value="2">testudo::absdiff(7., 5.)</expression1>
            <expression2 value="2">2.</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:363" brief_location="363" success="true" prefix="" max_error="eps">
            <expression1 value="4">2.+2.</expression1>
            <expression2 value="4">4.</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:364" brief_location="364" success="true" prefix="nay" max_error="eps">
            <expression1 value="4">2.+2.</expression1>
            <expression2 value="5">5.</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:365" brief_location="365" success="true" prefix="" max_error=".5">
            <expression1 value="4">2.+2.</expression1>
            <expression2 value="4.2">4.2</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:366" brief_location="366" success="false" prefix="" max_error=".1">
            <expression1 value="4">2.+2.</expression1>
            <expression2 value="4.2">4.2</expression2>
          </check_approx>
          <stats name="testudo.testarudo.disorder.absdiff" n_failed="1" n_total="6" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:374" name="testudo.testarudo.disorder.testarudo_ext" title="Testarudo support for STL objects">
          <perform location="testarudo.ttd:376" brief_location="376">approx_epsilon=1e-6</perform>
          <declare location="testarudo.ttd:377" brief_location="377">tuple&lt;float, int, double&gt; ta={3.14, 8, 7.5}</declare>
          <declare location="testarudo.ttd:378" brief_location="378">tuple&lt;double, float, int&gt; tb={4.14, 7., 6}</declare>
          <check_approx location="testarudo.ttd:379" brief_location="379" success="false" prefix="" max_error="eps">
            <expression1 value="{3.14, 8, 7.5}">ta</expression1>
            <expression2 value="{4.14, 7, 6}">tb</expression2>
          </check_approx>
          <show_value location="testarudo.ttd:380" brief_location="380">
            <expression1 value="3.5">testudo::absdiff(ta, tb)</expression1>
          </show_value>
          <declare location="testarudo.ttd:381" brief_location="381">tuple&lt;float, int, double&gt; tc={3.14, 8, 7.5}</declare>
          <check_approx location="testarudo.ttd:382" brief_location="382" success="true" prefix="" max_error="eps">
            <expression1 value="{3.14, 8, 7.5}">ta</expression1>
            <expression2 value="{3.14, 8, 7.5}">tc</expression2>
          </check_approx>
          <separator location="testarudo.ttd:383" brief_location="383"/>
          <declare location="testarudo.ttd:384" brief_location="384">list&lt;float&gt; la={3.14, 8, 7.5}</declare>
          <declare location="testarudo.ttd:385" brief_location="385">list&lt;float&gt; lb={4.14, 7., 6}</declare>
          <check_approx location="testarudo.ttd:386" brief_location="386" success="false" prefix="" max_error="eps">
            <expression1 value="{3.14, 8, 7.5}">la</expression1>
            <expression2 value="{4.14, 7, 6}">lb</expression2>
          </check_approx>
          <show_value location="testarudo.ttd:387" brief_location="387">
            <expression1 value="3.5">testudo::absdiff(la, lb)</expression1>
          </show_value>
          <declare location="testarudo.ttd:388" brief_location="388">list&lt;float&gt; lc={3.14, 8, 7.5}</declare>
          <check_approx location="testarudo.ttd:389" brief_location="389" success="true" prefix="" max_error="eps">
            <expression1 value="{3.14, 8, 7.5}">la</expression1>
            <expression2 value="{3.14, 8, 7.5}">lc</expression2>
          </check_approx>
            <declare_scope location="testarudo.ttd:390" brief_location="390" declare="auto x=string(&quot;hey&quot;)">
            <check_equal location="testarudo.ttd:391" brief_location="391" success="true" prefix="">
              <expression1 value="&quot;hey&quot;">x</expression1>
              <expression2 value="&quot;hey&quot;">&quot;hey&quot;</expression2>
            </check_equal>
            <check_equal location="testarudo.ttd:392" brief_location="392" success="true" prefix="nay">
              <expression1 value="&quot;hey&quot;">x</expression1>
              <expression2 value="&quot;hi&quot;">&quot;hi&quot;</expression2>
            </check_equal>
            </declare_scope>
            <declare_scope location="testarudo.ttd:394" brief_location="394" declare="auto x=-12">
            <check_equal location="testarudo.ttd:395" brief_location="395" success="false" prefix="">
              <expression1 value="-12">x</expression1>
              <expression2 value="77">77</expression2>
            </check_equal>
            <check_equal location="testarudo.ttd:396" brief_location="396" success="true" prefix="nay">
              <expression1 value="-12">x</expression1>
              <expression2 value="3">3</expression2>
            </check_equal>
            </declare_scope>
            <declare_scope location="testarudo.ttd:398" brief_location="398" declare="auto [action, occurrences]=tuple{&quot;sin&quot;, 77*7}">
            <check_equal location="testarudo.ttd:399" brief_location="399" success="true" prefix="">
              <expression1 value="&quot;sin&quot;">action</expression1>
              <expression2 value="&quot;sin&quot;">&quot;sin&quot;</expression2>
            </check_equal>
            <check_equal location="testarudo.ttd:400" brief_location="400" success="true" prefix="">
              <expression1 value="539">occurrences</expression1>
              <expression2 value="539">539</expression2>
            </check_equal>
            </declare_scope>
          <stats name="testudo.testarudo.disorder.testarudo_ext" n_failed="3" n_total="10" n_errors="0" success="false"/>
          </test>
          <test location="testarudo.ttd:369" name="testudo.testarudo.disorder.no_representation" title="class with no representation">
          <check_equal location="testarudo.ttd:371" brief_location="371" success="false" prefix="">
            <expression1 value="&lt;...&gt;">ClassWithNoRepresentation()</expression1>
            <expression2 value="&lt;...&gt;">ClassWithNoRepresentation()</expression2>
          </check_equal>
          <stats name="testudo.testarudo.disorder.no_representation" n_failed="1" n_total="1" n_errors="0" success="false"/>
          </test>
        <stats name="testudo.testarudo.disorder" n_failed="6" n_total="19" n_errors="0" success="false"/>
        </test>
        <test location="testarudo.ttd:549" name="testudo.testarudo.external function" title="external function">
        <perform location="testarudo.ttd:550" brief_location="550">testarudo_util::test_commutativity(test_management, 2, 3)</perform>
        <show_value location="testarudo_util.ttd:9" brief_location="testarudo_util.ttd:9">
          <expression1 value="2">a</expression1>
        </show_value>
        <show_value location="testarudo_util.ttd:10" brief_location="testarudo_util.ttd:10">
          <expression1 value="3">b</expression1>
        </show_value>
        <check_equal location="testarudo_util.ttd:11" brief_location="testarudo_util.ttd:11" success="true" prefix="">
          <expression1 value="5">a+b</expression1>
          <expression2 value="5">b+a</expression2>
        </check_equal>
        <check_equal location="testarudo_util.ttd:12" brief_location="testarudo_util.ttd:12" success="true" prefix="">
          <expression1 value="6">a*b</expression1>
          <expression2 value="6">b*a</expression2>
        </check_equal>
        <perform location="testarudo.ttd:551" brief_location="551">testarudo_util::test_commutativity(test_management, -10, 7)</perform>
        <show_value location="testarudo_util.ttd:9" brief_location="testarudo_util.ttd:9">
          <expression1 value="-10">a</expression1>
        </show_value>
        <show_value location="testarudo_util.ttd:10" brief_location="testarudo_util.ttd:10">
          <expression1 value="7">b</expression1>
        </show_value>
        <check_equal location="testarudo_util.ttd:11" brief_location="testarudo_util.ttd:11" success="true" prefix="">
          <expression1 value="-3">a+b</expression1>
          <expression2 value="-3">b+a</expression2>
        </check_equal>
        <check_equal location="testarudo_util.ttd:12" brief_location="testarudo_util.ttd:12" success="true" prefix="">
          <expression1 value="-70">a*b</expression1>
          <expression2 value="-70">b*a</expression2>
        </check_equal>
        <stats name="testudo.testarudo.external function" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="testarudo.ttd:554" name="testudo.testarudo.absdiff with mismatched sizes" title="absdiff with mismatched sizes">
        <check_approx location="testarudo.ttd:555" brief_location="555" success="true" prefix="" max_error="eps">
          <expression1 value="{1, 2, 3}">list{1., 2., 3.}</expression1>
          <expression2 value="{1, 2, 3}">list{1., 2., 3.}</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:556" brief_location="556" success="false" prefix="" max_error="eps">
          <expression1 value="{1, 2, 3}">list{1., 2., 3.}</expression1>
          <expression2 value="{1, 2, 3, 0}">list{1., 2., 3., 0.}</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:557" brief_location="557" success="false" prefix="nay" max_error="eps">
          <expression1 value="{1, 2, 3}">list{1., 2., 3.}</expression1>
          <expression2 value="{1, 2, 3}">list{1., 2., 3.}</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:558" brief_location="558" success="true" prefix="nay" max_error="eps">
          <expression1 value="{1, 2, 3}">list{1., 2., 3.}</expression1>
          <expression2 value="{1, 2, 3, 0}">list{1., 2., 3., 0.}</expression2>
        </check_approx>
        <stats name="testudo.testarudo.absdiff with mismatched sizes" n_failed="2" n_total="4" n_errors="0" success="false"/>
        </test>
        <test location="testarudo.ttd:561" name="testudo.testarudo.provided" title="provided">
        <declare location="testarudo.ttd:562" brief_location="562">double a=4.</declare>
        <declare location="testarudo.ttd:563" brief_location="563">double b=4.0001</declare>
        <declare location="testarudo.ttd:564" brief_location="564">double c=4.01</declare>
        <perform location="testarudo.ttd:565" brief_location="565">approx_epsilon=.001</perform>
        <check_approx location="testarudo.ttd:566" brief_location="566" success="true" prefix="" max_error="eps">
          <expression1 value="4">a</expression1>
          <expression2 value="4.0001">b</expression2>
        </check_approx>
          <indent location="" brief_location="">
          <check_approx location="testarudo.ttd:567" brief_location="567" success="true" prefix="" max_error="eps">
            <expression1 value="4">a</expression1>
            <expression2 value="4">a</expression2>
          </check_approx>
          <check_approx location="testarudo.ttd:568" brief_location="568" success="false" prefix="nay" max_error="eps">
            <expression1 value="4">a</expression1>
            <expression2 value="4">a</expression2>
          </check_approx>
          </indent>
        <check_approx location="testarudo.ttd:570" brief_location="570" success="error" prefix="nay" max_error="eps">
          <expression1 value="4">a</expression1>
          <expression2 value="4.0001">b</expression2>
        </check_approx>
          <indent location="" brief_location="">
          </indent>
        <check_approx location="testarudo.ttd:574" brief_location="574" success="true" prefix="" max_error=".1">
          <expression1 value="4">a</expression1>
          <expression2 value="4.01">c</expression2>
        </check_approx>
          <indent location="" brief_location="">
          <check_approx location="testarudo.ttd:575" brief_location="575" success="true" prefix="" max_error=".1">
            <expression1 value="4">a</expression1>
            <expression2 value="4.0001">b</expression2>
          </check_approx>
          </indent>
        <check_equal location="testarudo.ttd:576" brief_location="576" success="error" prefix="">
          <expression1 value="3">1+2</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
          <indent location="" brief_location="">
          </indent>
        <check_equal location="testarudo.ttd:578" brief_location="578" success="true" prefix="">
          <expression1 value="3">1+2</expression1>
          <expression2 value="3">3</expression2>
        </check_equal>
          <indent location="" brief_location="">
          <check_approx location="testarudo.ttd:579" brief_location="579" success="true" prefix="" max_error="eps">
            <expression1 value="4">a</expression1>
            <expression2 value="4">a</expression2>
          </check_approx>
          </indent>
        <check_equal location="testarudo.ttd:580" brief_location="580" success="true" prefix="">
          <expression1 value="3">1+2</expression1>
          <expression2 value="3">3</expression2>
        </check_equal>
          <indent location="" brief_location="">
          <check_equal location="testarudo.ttd:581" brief_location="581" success="true" prefix="">
            <expression1 value="4">2+2</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
            <indent location="" brief_location="">
            <check_equal location="testarudo.ttd:582" brief_location="582" success="false" prefix="">
              <expression1 value="5">2+3</expression1>
              <expression2 value="6">6</expression2>
            </check_equal>
            <check_equal location="testarudo.ttd:583" brief_location="583" success="true" prefix="">
              <expression1 value="7">2+5</expression1>
              <expression2 value="7">7</expression2>
            </check_equal>
              <indent location="" brief_location="">
              <check_equal location="testarudo.ttd:584" brief_location="584" success="true" prefix="">
                <expression1 value="8">2+6</expression1>
                <expression2 value="8">8</expression2>
              </check_equal>
              </indent>
            <check_equal location="testarudo.ttd:585" brief_location="585" success="error" prefix="">
              <expression1 value="9">2+7</expression1>
              <expression2 value="10">10</expression2>
            </check_equal>
              <indent location="" brief_location="">
              </indent>
            </indent>
          </indent>
        <stats name="testudo.testarudo.provided" n_failed="2" n_total="12" n_errors="3" success="false"/>
        </test>
        <test location="testarudo.ttd:590" name="testudo.testarudo.tfos" title="tfos">
        <show_value location="testarudo.ttd:591" brief_location="591">
          <expression1 value="26">26</expression1>
        </show_value>
        <check_equal location="testarudo.ttd:592" brief_location="592" success="false" prefix="">
          <expression1 value="26">26</expression1>
          <expression2 value="60">29+31</expression2>
        </check_equal>
        <text location="testarudo.ttd:593" brief_location="593">in decimal, it&apos;s 26</text>
        <perform location="testarudo.ttd:594" brief_location="594">tfos &lt;&lt; hex &lt;&lt; setfill(&apos;||~tilde~||~&apos;) &lt;&lt; setw(6)</perform>
        <show_value location="testarudo.ttd:595" brief_location="595">
          <expression1 value="||~tilde~||~||~tilde~||~||~tilde~||~||~tilde~||~1a">26</expression1>
        </show_value>
        <text location="testarudo.ttd:596" brief_location="596">in hexadecimal, it&apos;s 1a</text>
        <check_equal location="testarudo.ttd:597" brief_location="597" success="false" prefix="">
          <expression1 value="1a">26</expression1>
          <expression2 value="3c">29+31</expression2>
        </check_equal>
        <perform location="testarudo.ttd:598" brief_location="598">tfos &lt;&lt; setw(6)</perform>
        <check_equal location="testarudo.ttd:599" brief_location="599" success="false" prefix="">
          <expression1 value="||~tilde~||~||~tilde~||~||~tilde~||~||~tilde~||~1a">26</expression1>
          <expression2 value="||~tilde~||~||~tilde~||~||~tilde~||~||~tilde~||~3c">29+31</expression2>
        </check_equal>
        <show_value location="testarudo.ttd:600" brief_location="600">
          <expression1 value="1a">26</expression1>
        </show_value>
        <check_equal location="testarudo.ttd:601" brief_location="601" success="true" prefix="">
          <expression1 value="&quot;28&quot;">testudo::to_text(28)</expression1>
          <expression2 value="&quot;28&quot;">&quot;28&quot;</expression2>
        </check_equal>
        <check_equal location="testarudo.ttd:602" brief_location="602" success="true" prefix="">
          <expression1 value="&quot;1c&quot;">testudo::to_text(tfos, 28)</expression1>
          <expression2 value="&quot;1c&quot;">&quot;1c&quot;</expression2>
        </check_equal>
        <stats name="testudo.testarudo.tfos" n_failed="3" n_total="5" n_errors="0" success="false"/>
        </test>
        <test location="testarudo.ttd:605" name="testudo.testarudo.show_value() in with_data()" title="show_value() in with_data()">
        <declare location="testarudo.ttd:606" brief_location="606">list&lt;int&gt; numbers_1{2, 5, 6, 7, 8, 9, 12, 24}</declare>
          <with location="testarudo.ttd:607" brief_location="607" var="x" container_first="numbers_1" container_rest="" summary="x in numbers_1">
          <show_value location="testarudo.ttd:608" brief_location="608">
            <expression1 value="">x, x/2</expression1>
          </show_value>
            <with_results>
            <show_value location="" brief_location="">
              <expression1 value="2, 1">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="5, 2">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="6, 3">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 3">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="8, 4">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 4">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="12, 6">x, x/2</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="24, 12">x, x/2</expression1>
            </show_value>
            </with_results>
          <check_equal location="testarudo.ttd:609" brief_location="609" success="with" prefix="">
            <expression1 value="">x/2+x/2</expression1>
            <expression2 value="">x</expression2>
          </check_equal>
            <with_results>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="4">x/2+x/2</expression1>
              <expression2 value="5">x</expression2>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="6">x/2+x/2</expression1>
              <expression2 value="7">x</expression2>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="8">x/2+x/2</expression1>
              <expression2 value="9">x</expression2>
            </check_equal>
            </with_results>
          <show_value location="testarudo.ttd:610" brief_location="610">
            <expression1 value="">x, x+x</expression1>
          </show_value>
            <with_results>
            <show_value location="" brief_location="">
              <expression1 value="2, 4">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="5, 10">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="6, 12">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 14">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="8, 16">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 18">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="12, 24">x, x+x</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="24, 48">x, x+x</expression1>
            </show_value>
            </with_results>
          <check_equal location="testarudo.ttd:611" brief_location="611" success="with" prefix="">
            <expression1 value="">x/3+x/3+x/3</expression1>
            <expression2 value="">x</expression2>
          </check_equal>
            <with_results>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="0">x/3+x/3+x/3</expression1>
              <expression2 value="2">x</expression2>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="3">x/3+x/3+x/3</expression1>
              <expression2 value="5">x</expression2>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="6">x/3+x/3+x/3</expression1>
              <expression2 value="7">x</expression2>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="6">x/3+x/3+x/3</expression1>
              <expression2 value="8">x</expression2>
            </check_equal>
            </with_results>
          <show_value location="testarudo.ttd:612" brief_location="612">
            <expression1 value="">x, x/3</expression1>
          </show_value>
            <with_results>
            <show_value location="" brief_location="">
              <expression1 value="2, 0">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="5, 1">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="6, 2">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 2">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="8, 2">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 3">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="12, 4">x, x/3</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="24, 8">x, x/3</expression1>
            </show_value>
            </with_results>
          <with_stats name="x in numbers_1" n_failed="7" n_total="16" n_errors="0" success="false"/>
          </with>
        <stats name="testudo.testarudo.show_value() in with_data()" n_failed="7" n_total="16" n_errors="0" success="false"/>
        </test>
        <test location="testarudo.ttd:616" name="testudo.testarudo.random data generators" title="random data generators">
        <declare location="testarudo.ttd:617" brief_location="617">using namespace testudo</declare>
        <declare location="testarudo.ttd:618" brief_location="618">minstd_rand rg</declare>
        <declare location="testarudo.ttd:619" brief_location="619">uniform_int_distribution&lt;&gt; uid_0_9(0, 9)</declare>
        <declare location="testarudo.ttd:620" brief_location="620">auto random_0_9=[&amp;rg, &amp;uid_0_9]() { return uid_0_9(rg); }</declare>
        <declare location="testarudo.ttd:621" brief_location="621">auto seed=125</declare>
        <perform location="testarudo.ttd:622" brief_location="622">rg.seed(seed)</perform>
        <show_value location="testarudo.ttd:623" brief_location="623">
          <expression1 value="{0, 6, 1, 4}">generate_data(4, random_0_9)</expression1>
        </show_value>
        <show_value location="testarudo.ttd:624" brief_location="624">
          <expression1 value="{9, 7, 3, 7}">generate_data(4, random_0_9)</expression1>
        </show_value>
        <perform location="testarudo.ttd:625" brief_location="625">rg.seed(seed)</perform>
        <show_value location="testarudo.ttd:626" brief_location="626">
          <expression1 value="{{}, {}, {}, {}}">generate_data_tuple(4)</expression1>
        </show_value>
        <perform location="testarudo.ttd:627" brief_location="627">rg.seed(seed)</perform>
        <show_value location="testarudo.ttd:628" brief_location="628">
          <expression1 value="{{0}, {6}, {1}, {4}}">generate_data_tuple(4, random_0_9)</expression1>
        </show_value>
        <perform location="testarudo.ttd:629" brief_location="629">rg.seed(seed)</perform>
        <show_value location="testarudo.ttd:630" brief_location="630">
          <expression1 value="{{6, 0}, {4, 1}, {7, 9}, {7, 3}}">generate_data_tuple(4, random_0_9, random_0_9)</expression1>
        </show_value>
        <perform location="testarudo.ttd:631" brief_location="631">rg.seed(seed)</perform>
        <declare location="testarudo.ttd:632" brief_location="632">list a{0, 1, 2, 3}</declare>
        <declare location="testarudo.ttd:633" brief_location="633">list b{4, 5, 6}</declare>
        <declare location="testarudo.ttd:634" brief_location="634">list c{7, 8}</declare>
        <show_value location="testarudo.ttd:635" brief_location="635">
          <expression1 value="{{0}, {1}, {2}, {3}}">cartesian_product(a)</expression1>
        </show_value>
        <show_value location="testarudo.ttd:636" brief_location="636">
          <expression1 value="{{0, 4}, {0, 5}, {0, 6}, {1, 4}, {1, 5}, {1, 6}, {2, 4}, {2, 5}, {2, 6}, {3, 4}, {3, 5}, {3, 6}}">cartesian_product(a, b)</expression1>
        </show_value>
        <show_value location="testarudo.ttd:637" brief_location="637">
          <expression1 value="{{0, 4, 7}, {0, 4, 8}, {0, 5, 7}, {0, 5, 8}, {0, 6, 7}, {0, 6, 8}, {1, 4, 7}, {1, 4, 8}, {1, 5, 7}, {1, 5, 8}, {1, 6, 7}, {1, 6, 8}, {2, 4, 7}, {2, 4, 8}, {2, 5, 7}, {2, 5, 8}, {2, 6, 7}, {2, 6, 8}, {3, 4, 7}, {3, 4, 8}, {3, 5, 7}, {3, 5, 8}, {3, 6, 7}, {3, 6, 8}}">cartesian_product(a, b, c)</expression1>
        </show_value>
        <perform location="testarudo.ttd:638" brief_location="638">rg.seed(seed)</perform>
          <with location="testarudo.ttd:639" brief_location="639" var="(x, y)" container_first="generate_data_tuple(4, random_0_9, random_0_9)" container_rest="" summary="(x, y) in generate_data_tuple(4, random_0_9, random_0_9)">
          <show_value location="testarudo.ttd:640" brief_location="640">
            <expression1 value="">x, y, x+y</expression1>
          </show_value>
            <with_results>
            <show_value location="" brief_location="">
              <expression1 value="6, 0, 6">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="4, 1, 5">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 9, 16">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 3, 10">x, y, x+y</expression1>
            </show_value>
            </with_results>
          <with_stats name="(x, y) in generate_data_tuple(4, random_0_9, random_0_9)" n_failed="0" n_total="0" n_errors="0" success="true"/>
          </with>
        <perform location="testarudo.ttd:641" brief_location="641">rg.seed(seed)</perform>
          <with location="testarudo.ttd:642" brief_location="642" var="(x, y)" container_first="cartesian_product(generate_data(4, random_0_9), generate_data(3, random_0_9))" container_rest="" summary="(x, y) in cartesian_product(generate_data(4, random_0_9), generate_data(3, random_0_9))">
          <show_value location="testarudo.ttd:644" brief_location="644">
            <expression1 value="">x, y, x+y</expression1>
          </show_value>
            <with_results>
            <show_value location="" brief_location="">
              <expression1 value="4, 0, 4">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="4, 6, 10">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="4, 1, 5">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 0, 9">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 6, 15">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="9, 1, 10">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 0, 7">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 6, 13">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="7, 1, 8">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="3, 0, 3">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="3, 6, 9">x, y, x+y</expression1>
            </show_value>
            <show_value location="" brief_location="">
              <expression1 value="3, 1, 4">x, y, x+y</expression1>
            </show_value>
            </with_results>
          <with_stats name="(x, y) in cartesian_product(generate_data(4, random_0_9), generate_data(3, random_0_9))" n_failed="0" n_total="0" n_errors="0" success="true"/>
          </with>
        <stats name="testudo.testarudo.random data generators" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
        <test location="testarudo.ttd:647" name="testudo.testarudo.track this" title="track this">
        <check_equal location="testarudo.ttd:648" brief_location="648" success="true" prefix="">
          <expression1 value="2">2</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
        <check_equal location="testarudo.ttd:649" brief_location="649" success="false" prefix="">
          <expression1 value="2">2</expression1>
          <expression2 value="3">3</expression2>
        </check_equal>
        <perform location="testarudo.ttd:650" brief_location="650">throw &quot;hey there&quot;</perform>
        <uncaught_exception>hey there</uncaught_exception>
        <stats name="testudo.testarudo.track this" n_failed="1" n_total="2" n_errors="1" success="false"/>
        </test>
        <test location="testarudo.ttd:677" name="testudo.testarudo.lambda inside test" title="lambda inside test">
        <declare location="testarudo.ttd:678" brief_location="678">auto check_plus_commutativity= [this](auto x, auto y) { check(x+y)_equal(y+x); }</declare>
        <perform location="testarudo.ttd:682" brief_location="682">check_plus_commutativity(1, 2)</perform>
        <check_equal location="testarudo.ttd:680" brief_location="680" success="true" prefix="">
          <expression1 value="3">x+y</expression1>
          <expression2 value="3">y+x</expression2>
        </check_equal>
        <perform location="testarudo.ttd:683" brief_location="683">check_plus_commutativity(&apos;a&apos;, 3)</perform>
        <check_equal location="testarudo.ttd:680" brief_location="680" success="true" prefix="">
          <expression1 value="100">x+y</expression1>
          <expression2 value="100">y+x</expression2>
        </check_equal>
        <perform location="testarudo.ttd:684" brief_location="684">check_plus_commutativity(&apos;a&apos;, &apos;3&apos;)</perform>
        <check_equal location="testarudo.ttd:680" brief_location="680" success="true" prefix="">
          <expression1 value="148">x+y</expression1>
          <expression2 value="148">y+x</expression2>
        </check_equal>
        <perform location="testarudo.ttd:685" brief_location="685">check_plus_commutativity(CommutInt(1), CommutInt(2))</perform>
        <check_equal location="testarudo.ttd:680" brief_location="680" success="true" prefix="">
          <expression1 value="3">x+y</expression1>
          <expression2 value="3">y+x</expression2>
        </check_equal>
        <perform location="testarudo.ttd:686" brief_location="686">check_plus_commutativity(NonCommutInt(1), NonCommutInt(2))</perform>
        <check_equal location="testarudo.ttd:680" brief_location="680" success="false" prefix="">
          <expression1 value="5">x+y</expression1>
          <expression2 value="4">y+x</expression2>
        </check_equal>
        <stats name="testudo.testarudo.lambda inside test" n_failed="1" n_total="5" n_errors="0" success="false"/>
        </test>
      <stats name="testudo.testarudo" n_failed="117" n_total="339" n_errors="7" success="false"/>
      </test>
      <test location="" name="testudo.esperanto_test" title="Esperanto test">
        <test location="eatesto.ttd:11" name="testudo.esperanto_test.numbers" title="numbers">
        <declare location="eatesto.ttd:12" brief_location="12">auto const dictionary=vortaro</declare>
        <check_equal location="eatesto.ttd:13" brief_location="13" success="true" prefix="">
          <expression1 value="1">dictionary.at(&quot;unu&quot;)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <stats name="testudo.esperanto_test.numbers" n_failed="0" n_total="1" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.esperanto_test" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="" name="testudo.fixture" title="fixture tests">
        <test location="testarudo.ttd:421" name="testudo.fixture.+ commutativity" title="+ commutativity">
        <text location="" brief_location="">visible fixture NumbersFixture</text>
        <declare location="testarudo.ttd:408" brief_location="408">(fixture) double x</declare>
        <perform location="testarudo.ttd:407" brief_location="407">(fixture) init x(1.)</perform>
        <declare location="testarudo.ttd:409" brief_location="409">(fixture) double y=-2.5, z</declare>
        <perform location="testarudo.ttd:407" brief_location="407">(fixture) init z(3.14)</perform>
        <text location="" brief_location="">fixture constructor done</text>
        <perform location="testarudo.ttd:423" brief_location="423">check_initial_values()</perform>
        <check_approx location="testarudo.ttd:411" brief_location="411" success="true" prefix="" max_error="eps">
          <expression1 value="1">x</expression1>
          <expression2 value="1">1.</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:412" brief_location="412" success="true" prefix="" max_error="eps">
          <expression1 value="-2.5">y</expression1>
          <expression2 value="-2.5">-2.5</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:413" brief_location="413" success="true" prefix="" max_error="eps">
          <expression1 value="3.14">z</expression1>
          <expression2 value="3.14">3.14</expression2>
        </check_approx>
        <check_approx location="testarudo.ttd:424" brief_location="424" success="true" prefix="" max_error="eps">
          <expression1 value="-1.5">x+y</expression1>
          <expression2 value="-1.5">y+x</expression2>
        </check_approx>
        <text location="" brief_location="">fixture destructor</text>
        <stats name="testudo.fixture.+ commutativity" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="testarudo.ttd:427" name="testudo.fixture.* commutativity" title="* commutativity">
        <text location="" brief_location="">with fixture NumbersFixture</text>
        <perform location="testarudo.ttd:429" brief_location="429">check_initial_values()</perform>
        <check_approx location="testarudo.ttd:430" brief_location="430" success="true" prefix="" max_error="eps">
          <expression1 value="-2.5">x*y</expression1>
          <expression2 value="-2.5">y*x</expression2>
        </check_approx>
        <stats name="testudo.fixture.* commutativity" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="testarudo.ttd:433" name="testudo.fixture.associativity" title="associativity">
        <text location="" brief_location="">with fixture NumbersFixture</text>
        <check_approx location="testarudo.ttd:435" brief_location="435" success="true" prefix="" max_error="eps">
          <expression1 value="0.64">x*(y+z)</expression1>
          <expression2 value="0.64">x*y+x*z</expression2>
        </check_approx>
        <perform location="testarudo.ttd:436" brief_location="436">throw_something_unexpected()</perform>
        <uncaught_exception>hey, here&apos;s something unexpected</uncaught_exception>
        <stats name="testudo.fixture.associativity" n_failed="0" n_total="1" n_errors="1" success="false"/>
        </test>
        <test location="testarudo.ttd:448" name="testudo.fixture.fixtures with arguments, specified size" title="fixtures with arguments, specified size">
        <text location="" brief_location="">with fixture DefaultSevenVectorFixture(3)</text>
        <check_equal location="testarudo.ttd:451" brief_location="451" success="true" prefix="">
          <expression1 value="3">data.size()</expression1>
          <expression2 value="3">3</expression2>
        </check_equal>
          <with location="testarudo.ttd:452" brief_location="452" var="x" container_first="data" container_rest="" summary="x in data">
          <check_equal location="testarudo.ttd:453" brief_location="453" success="with" prefix="">
            <expression1 value="">x</expression1>
            <expression2 value="">7</expression2>
          </check_equal>
          <with_stats name="x in data" n_failed="0" n_total="3" n_errors="0" success="true"/>
          </with>
        <stats name="testudo.fixture.fixtures with arguments, specified size" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="testarudo.ttd:456" name="testudo.fixture.fixtures with arguments, specified size and value" title="fixtures with arguments, specified size and value">
        <text location="testarudo.ttd:452" brief_location="452">visible fixture DefaultSevenVectorFixture(5, 11)</text>
        <declare location="testarudo.ttd:445" brief_location="445">(fixture) vector&lt;int&gt; data</declare>
        <perform location="testarudo.ttd:444" brief_location="444">(fixture) init data(size, default_value)</perform>
        <text location="" brief_location="">fixture constructor done</text>
        <check_equal location="testarudo.ttd:459" brief_location="459" success="true" prefix="">
          <expression1 value="5">data.size()</expression1>
          <expression2 value="5">5</expression2>
        </check_equal>
          <with location="testarudo.ttd:460" brief_location="460" var="x" container_first="data" container_rest="" summary="x in data">
          <check_equal location="testarudo.ttd:461" brief_location="461" success="with" prefix="">
            <expression1 value="">x</expression1>
            <expression2 value="">11</expression2>
          </check_equal>
          <with_stats name="x in data" n_failed="0" n_total="5" n_errors="0" success="true"/>
          </with>
        <text location="testarudo.ttd:460" brief_location="460">fixture destructor</text>
        <stats name="testudo.fixture.fixtures with arguments, specified size and value" n_failed="0" n_total="6" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.fixture" n_failed="0" n_total="19" n_errors="1" success="false"/>
      </test>
      <test location="testarudo.ttd:469" name="testudo.scope" title="scope begin and end">
      <declare location="testarudo.ttd:470" brief_location="470">int flag=10</declare>
        <scope location="testarudo.ttd:471" brief_location="471" name="at_destruction_flag_20">
        <declare location="testarudo.ttd:472" brief_location="472">AtDestruction at_destruction_flag_20([&amp;flag]() { flag=20; })</declare>
          <scope location="testarudo.ttd:473" brief_location="473" name="">
          <declare location="testarudo.ttd:474" brief_location="474">AtDestruction at_destruction_flag_30([&amp;flag]() { flag=30; })</declare>
          <check_equal location="testarudo.ttd:475" brief_location="475" success="true" prefix="">
            <expression1 value="10">flag</expression1>
            <expression2 value="10">10</expression2>
          </check_equal>
          <text location="testarudo.ttd:476" brief_location="476">now, a long text to check line breaking within scopes (the following two tests have the same purpose)</text>
          <check_equal location="testarudo.ttd:478" brief_location="478" success="true" prefix="">
            <expression1 value="&quot;1 2 3 4 5 6 7 8 9&quot;">string(&quot;1 2 3 4 5 6 7 8 9&quot;)</expression1>
            <expression2 value="&quot;1 2 3 4 5 6 7 8 9&quot;">&quot;1 2 3 4 5 6 7 8 9&quot;</expression2>
          </check_equal>
          <check_equal location="testarudo.ttd:479" brief_location="479" success="false" prefix="">
            <expression1 value="&quot;1 2 3 4 5 6 7 8 9&quot;">string(&quot;1 2 3 4 5 6 7 8 9&quot;)</expression1>
            <expression2 value="&quot;1 2 3 4 5 6 7 8 8&quot;">&quot;1 2 3 4 5 6 7 8 8&quot;</expression2>
          </check_equal>
          </scope>
        <check_equal location="testarudo.ttd:481" brief_location="481" success="true" prefix="">
          <expression1 value="30">flag</expression1>
          <expression2 value="30">30</expression2>
        </check_equal>
        </scope>
      <check_equal location="testarudo.ttd:483" brief_location="483" success="true" prefix="">
        <expression1 value="20">flag</expression1>
        <expression2 value="20">20</expression2>
      </check_equal>
      <stats name="testudo.scope" n_failed="1" n_total="5" n_errors="0" success="false"/>
      </test>
      <test location="testarudo.ttd:486" name="testudo.Testudo syntax" title="Testudo syntax">
      <text location="testarudo.ttd:487" brief_location="487">tags in &quot;||||~tilde~||~&quot;...&quot;||~tilde~||~||&quot; are used internally</text>
      <text location="testarudo.ttd:488" brief_location="488">but they should still appear here</text>
      <declare location="testarudo.ttd:489" brief_location="489">string code=&quot;||~tilde~||~pre||~tilde~||~ ||||~tilde~||~bold||~tilde~||~|| ||~tilde~||~post||~tilde~||~&quot;</declare>
      <show_value location="testarudo.ttd:490" brief_location="490">
        <expression1 value="&quot;||~tilde~||~pre||~tilde~||~ ||||~tilde~||~bold||~tilde~||~|| ||~tilde~||~post||~tilde~||~&quot;">code</expression1>
      </show_value>
      <check_equal location="testarudo.ttd:491" brief_location="491" success="true" prefix="">
        <expression1 value="&quot;||~tilde~||~pre||~tilde~||~ ||||~tilde~||~bold||~tilde~||~|| ||~tilde~||~post||~tilde~||~&quot;">code</expression1>
        <expression2 value="&quot;||~tilde~||~pre||~tilde~||~ ||||~tilde~||~bold||~tilde~||~|| ||~tilde~||~post||~tilde~||~&quot;">&quot;||~tilde~||~pre||~tilde~||~ ||||~tilde~||~bold||~tilde~||~|| ||~tilde~||~post||~tilde~||~&quot;</expression2>
      </check_equal>
      <stats name="testudo.Testudo syntax" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="testarudo.ttd:494" name="testudo.multiline" title="multiline">
      <text location="testarudo.ttd:495" brief_location="495">all words in one line</text>
      <text location="testarudo.ttd:496" brief_location="496">one&#xa;word&#xa;per&#xa;line</text>
      <declare location="testarudo.ttd:497" brief_location="497">string ol_text=&quot;all words in one line&quot;</declare>
      <declare location="testarudo.ttd:498" brief_location="498">string ml_text=&quot;one\nword\nper\nline&quot;</declare>
      <show_value location="testarudo.ttd:499" brief_location="499">
        <expression1 value="&quot;all words in one line&quot;">ol_text</expression1>
      </show_value>
      <show_value location="testarudo.ttd:500" brief_location="500">
        <expression1 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">ml_text</expression1>
      </show_value>
      <check_equal location="testarudo.ttd:501" brief_location="501" success="true" prefix="">
        <expression1 value="&quot;all words in one line&quot;">ol_text</expression1>
        <expression2 value="&quot;all words in one line&quot;">&quot;all words in one line&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:502" brief_location="502" success="false" prefix="">
        <expression1 value="&quot;all words in one line&quot;">ol_text</expression1>
        <expression2 value="&quot;this isn&apos;t right&quot;">&quot;this isn&apos;t right&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:503" brief_location="503" success="false" prefix="">
        <expression1 value="&quot;all words in one line&quot;">ol_text</expression1>
        <expression2 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">&quot;one\nword\nper\nline&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:504" brief_location="504" success="false" prefix="">
        <expression1 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">ml_text</expression1>
        <expression2 value="&quot;all words in one line&quot;">&quot;all words in one line&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:505" brief_location="505" success="false" prefix="">
        <expression1 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">ml_text</expression1>
        <expression2 value="&quot;this isn&apos;t right&quot;">&quot;this isn&apos;t right&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:506" brief_location="506" success="false" prefix="">
        <expression1 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">ml_text</expression1>
        <expression2 value="&quot;this&#xa;isn&apos;t&#xa;right&quot;">&quot;this\nisn&apos;t\nright&quot;</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:507" brief_location="507" success="true" prefix="">
        <expression1 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">ml_text</expression1>
        <expression2 value="&quot;one&#xa;word&#xa;per&#xa;line&quot;">&quot;one\nword\nper\nline&quot;</expression2>
      </check_equal>
      <stats name="testudo.multiline" n_failed="5" n_total="7" n_errors="0" success="false"/>
      </test>
      <test location="testarudo.ttd:510" name="testudo.UTF8 length" title="UTF8 length">
      <declare location="testarudo.ttd:511" brief_location="511">using testudo___implementation::utf8_length</declare>
      <check_equal location="testarudo.ttd:512" brief_location="512" success="true" prefix="">
        <expression1 value="10">utf8_length(&quot;hey there!&quot;)</expression1>
        <expression2 value="10">10</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:513" brief_location="513" success="true" prefix="">
        <expression1 value="17">utf8_length(&quot;¿cómo está usted?&quot;)</expression1>
        <expression2 value="17">17</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:514" brief_location="514" success="true" prefix="">
        <expression1 value="4">utf8_length(&quot;頑張って&quot;)</expression1>
        <expression2 value="4">4</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:515" brief_location="515" success="true" prefix="">
        <expression1 value="2">utf8_length(&quot;▄▀&quot;)</expression1>
        <expression2 value="2">2</expression2>
      </check_equal>
      <check_equal location="testarudo.ttd:516" brief_location="516" success="true" prefix="">
        <expression1 value="3">utf8_length(&quot;🙈🙉🙊&quot;)</expression1>
        <expression2 value="3">3</expression2>
      </check_equal>
      <show_value location="testarudo.ttd:517" brief_location="517">
        <expression1 value="¡Ay mísero de mí, y ay, infelice! Apurar, cielos, pretendo, ya que me tratáis así, qué delito cometí contra vosotros naciendo; aunque si nací, ya entiendo qué delito he cometido. Bastante causa ha tenido vuestra justicia y rigor; pues el delito mayor del hombre es haber nacido.">&quot;¡Ay mísero de mí, y ay, infelice! &quot; &quot;Apurar, cielos, pretendo, &quot; &quot;ya que me tratáis así, &quot; &quot;qué delito cometí &quot; &quot;contra vosotros naciendo; &quot; &quot;aunque si nací, ya entiendo &quot; &quot;qué delito he cometido. &quot; &quot;Bastante causa ha tenido &quot; &quot;vuestra justicia y rigor; &quot; &quot;pues el delito mayor &quot; &quot;del hombre es haber nacido.&quot;</expression1>
      </show_value>
      <show_value location="testarudo.ttd:528" brief_location="528">
        <expression1 value="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄-▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄--▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄">&quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;-▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;--▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot; &quot;▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄&quot;</expression1>
      </show_value>
      <stats name="testudo.UTF8 length" n_failed="0" n_total="5" n_errors="0" success="true"/>
      </test>
      <test location="" name="testudo.mock_turtle" title="mock turtle tests">
        <test location="mock_turtle_soup.ttd:87" name="testudo.mock_turtle.Queen of Hearts&apos; recipe" title="Queen of Hearts&apos; recipe">
        <declare location="mock_turtle_soup.ttd:88" brief_location="88">auto soup_mock=make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="mock_turtle_soup.ttd:89" brief_location="89" success="true" prefix="">
          <expression1 value="{2, 1}">soup_mock-&gt;reverse({1, 2})</expression1>
          <expression2 value="{2, 1}">pair(2, 1)</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:90" brief_location="90">soup_mock-&gt;schedule_ret(temp, 20, 40, 60, 80, 100)</perform>
        <declare location="mock_turtle_soup.ttd:91" brief_location="91">bool good=queen_of_hearts_mock_turtle_soup(soup_mock)</declare>
        <check_true location="mock_turtle_soup.ttd:92" brief_location="92" success="true" prefix="">
          <expression1>good</expression1>
        </check_true>
        <check_equal location="mock_turtle_soup.ttd:93" brief_location="93" success="true" prefix="">
          <expression1 value="{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}}">soup_mock-&gt;logged_args(add_ingr)</expression1>
          <expression2 value="{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}}">{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:99" brief_location="99" success="true" prefix="">
          <expression1 value="{{{4}, {&quot;calf brains&quot;, 4}}, {{7}, {&quot;pork liver&quot;, 3}}, {{8}, {&quot;water&quot;, 1}}, {{9}, {&quot;water&quot;, 1}}, {{10}, {&quot;water&quot;, 1}}}">soup_mock-&gt;logged_ret_args(add_ingr)</expression1>
          <expression2 value="{{{4}, {&quot;calf brains&quot;, 4}}, {{7}, {&quot;pork liver&quot;, 3}}, {{8}, {&quot;water&quot;, 1}}, {{9}, {&quot;water&quot;, 1}}, {{10}, {&quot;water&quot;, 1}}}">{{{4}, {&quot;calf brains&quot;, 4}}, {{7}, {&quot;pork liver&quot;, 3}}, {{8}, {&quot;water&quot;, 1}}, {{9}, {&quot;water&quot;, 1}}, {{10}, {&quot;water&quot;, 1}}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:105" brief_location="105" success="true" prefix="">
          <expression1 value="{{9}, {5}}">soup_mock-&gt;logged_args(set_heat)</expression1>
          <expression2 value="{{9}, {5}}">{{9}, {5}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:106" brief_location="106" success="true" prefix="">
          <expression1 value="14">soup_mock-&gt;log_size(wait)</expression1>
          <expression2 value="14">14</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:107" brief_location="107" success="true" prefix="">
          <expression1 value="{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 3}}">soup_mock-&gt;content</expression1>
          <expression2 value="{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 3}}">{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 3}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:109" brief_location="109" success="true" prefix="">
          <expression1 value="1">soup_mock-&gt;log_size(is_tasty)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:110" brief_location="110" success="true" prefix="">
          <expression1 value="{{true}}">soup_mock-&gt;logged_ret(is_tasty)</expression1>
          <expression2 value="{{true}}">{{true}}</expression2>
        </check_equal>
        <stats name="testudo.mock_turtle.Queen of Hearts&apos; recipe" n_failed="0" n_total="9" n_errors="0" success="true"/>
        </test>
        <test location="mock_turtle_soup.ttd:113" name="testudo.mock_turtle.Queen of Hearts&apos; recipe calls" title="Queen of Hearts&apos; recipe calls">
        <declare location="mock_turtle_soup.ttd:114" brief_location="114">auto soup_mock=make_shared&lt;SoupMock&gt;()</declare>
        <perform location="mock_turtle_soup.ttd:115" brief_location="115">soup_mock-&gt;set_ret_default(forty_two, 6*9)</perform>
        <check_equal location="mock_turtle_soup.ttd:116" brief_location="116" success="true" prefix="">
          <expression1 value="{2, 1}">soup_mock-&gt;reverse({1, 2})</expression1>
          <expression2 value="{2, 1}">pair(2, 1)</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:117" brief_location="117" success="true" prefix="">
          <expression1 value="54">soup_mock-&gt;forty_two()</expression1>
          <expression2 value="54">54</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:118" brief_location="118" success="true" prefix="">
          <expression1 value="0">soup_mock-&gt;counter</expression1>
          <expression2 value="0">0</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:119" brief_location="119">soup_mock-&gt;inc_counter()</perform>
        <check_equal location="mock_turtle_soup.ttd:120" brief_location="120" success="true" prefix="">
          <expression1 value="1">soup_mock-&gt;counter</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:121" brief_location="121">soup_mock-&gt;add_counter(3)</perform>
        <check_equal location="mock_turtle_soup.ttd:122" brief_location="122" success="true" prefix="">
          <expression1 value="4">soup_mock-&gt;counter</expression1>
          <expression2 value="4">4</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:123" brief_location="123">soup_mock-&gt;schedule_ret(temp, 20, 40, 60, 80, 100)</perform>
        <perform location="mock_turtle_soup.ttd:124" brief_location="124">queen_of_hearts_mock_turtle_soup(soup_mock)</perform>
        <show_value location="mock_turtle_soup.ttd:125" brief_location="125">
          <expression1 value="{reverse @ 0}&#xa;{forty_two @ 0}&#xa;{inc_counter @ 0}&#xa;{add_counter @ 0}&#xa;{add_ingr @ 0} -- {add_ingr @ 4}&#xa;{set_heat @ 0}&#xa;{temp @ 0}&#xa;{wait @ 0}&#xa;{temp @ 1}&#xa;{wait @ 1}&#xa;{temp @ 2}&#xa;{wait @ 2}&#xa;{temp @ 3}&#xa;{wait @ 3}&#xa;{temp @ 4}&#xa;{set_heat @ 1}&#xa;{wait @ 4} -- {wait @ 13}&#xa;{is_tasty @ 0}&#xa;">testudo::unquoted(print_calls(soup_mock-&gt;calls()))</expression1>
        </show_value>
          <declare_scope location="mock_turtle_soup.ttd:126" brief_location="126" declare="auto it=iterate(soup_mock)">
            <declare_scope location="mock_turtle_soup.ttd:127" brief_location="127" declare="auto call=it.pop_call(*soup_mock, reverse)">
            <check_equal location="mock_turtle_soup.ttd:128" brief_location="128" success="true" prefix="">
              <expression1 value="reverse:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2, 1}}, {{1, 2}}</expression2>
            </check_equal>
            <check_equal location="mock_turtle_soup.ttd:129" brief_location="129" success="false" prefix="">
              <expression1 value="reverse:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3, 1}}, {{1, 2}}</expression2>
            </check_equal>
            <check_equal location="mock_turtle_soup.ttd:130" brief_location="130" success="false" prefix="nay">
              <expression1 value="reverse:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2, 1}}, {{1, 2}}</expression2>
            </check_equal>
            <check_equal location="mock_turtle_soup.ttd:131" brief_location="131" success="true" prefix="nay">
              <expression1 value="reverse:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3, 1}}, {{1, 2}}</expression2>
            </check_equal>
            </declare_scope>
          <check_equal location="mock_turtle_soup.ttd:133" brief_location="133" success="true" prefix="">
            <expression1 value="forty_two:{54 ()}">it.pop_call(*soup_mock, forty_two)</expression1>
            <expression2 value="{54 ()}">{54}, {}</expression2>
          </check_equal>
            <declare_scope location="mock_turtle_soup.ttd:134" brief_location="134" declare="auto call=it.get_call(*soup_mock, inc_counter)">
            <check_equal location="mock_turtle_soup.ttd:135" brief_location="135" success="true" prefix="">
              <expression1 value="inc_counter:{void ()}">call</expression1>
              <expression2 value="{void ()}">{}, {}</expression2>
            </check_equal>
            </declare_scope>
          <perform location="mock_turtle_soup.ttd:136" brief_location="136">it.next()</perform>
          <check_equal location="mock_turtle_soup.ttd:137" brief_location="137" success="true" prefix="">
            <expression1 value="add_counter:{void (3)}">it.pop_call(*soup_mock, add_counter)</expression1>
            <expression2 value="{void (3)}">{}, {3}</expression2>
          </check_equal>
          <perform location="mock_turtle_soup.ttd:138" brief_location="138">while (it.method_name() not_eq &quot;set_heat&quot;) it.next()</perform>
            <declare_scope location="mock_turtle_soup.ttd:140" brief_location="140" declare="auto call=it.pop_call(*soup_mock, reverse)">
            <check_equal location="mock_turtle_soup.ttd:141" brief_location="141" success="false" prefix="">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2, 1}}, {{1, 2}}</expression2>
            </check_equal>
            <check_equal location="mock_turtle_soup.ttd:142" brief_location="142" success="false" prefix="nay">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2, 1}}, {{1, 2}}</expression2>
            </check_equal>
            </declare_scope>
            <declare_scope location="mock_turtle_soup.ttd:144" brief_location="144" declare="auto call=it.pop_call(*soup_mock, set_heat)">
            <check_equal location="mock_turtle_soup.ttd:145" brief_location="145" success="true" prefix="">
              <expression1 value="set_heat:{void (9)}">call</expression1>
              <expression2 value="{void (9)}">{}, {9}</expression2>
            </check_equal>
            <check_equal location="mock_turtle_soup.ttd:146" brief_location="146" success="false" prefix="">
              <expression1 value="set_heat:{void (9)}">call</expression1>
              <expression2 value="{void (0)}">{}, {0}</expression2>
            </check_equal>
            </declare_scope>
          <perform location="mock_turtle_soup.ttd:148" brief_location="148">while (it) show_value(it.method_name()), it.next()</perform>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;temp&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;temp&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;temp&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;temp&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;temp&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;set_heat&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;wait&quot;">it.method_name()</expression1>
          </show_value>
          <show_value location="mock_turtle_soup.ttd:149" brief_location="149">
            <expression1 value="&quot;is_tasty&quot;">it.method_name()</expression1>
          </show_value>
          <check_true location="mock_turtle_soup.ttd:150" brief_location="150" success="true" prefix="">
            <expression1>it.done()</expression1>
          </check_true>
          </declare_scope>
        <stats name="testudo.mock_turtle.Queen of Hearts&apos; recipe calls" n_failed="5" n_total="17" n_errors="0" success="false"/>
        </test>
        <test location="mock_turtle_soup.ttd:154" name="testudo.mock_turtle.approx" title="approx">
        <declare location="mock_turtle_soup.ttd:155" brief_location="155">auto soup_mock=make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="mock_turtle_soup.ttd:157" brief_location="157" success="true" prefix="">
          <expression1 value="{2, 1}">soup_mock-&gt;reverse_float({1., 2.})</expression1>
          <expression2 value="{2, 1}">pair(2., 1.)</expression2>
        </check_equal>
          <declare_scope location="mock_turtle_soup.ttd:158" brief_location="158" declare="auto it=iterate(soup_mock)">
          <text location="mock_turtle_soup.ttd:159" brief_location="159">wrong method:</text>
            <declare_scope location="mock_turtle_soup.ttd:160" brief_location="160" declare="auto call=it.pop_call(*soup_mock, reverse)">
            <check_approx location="mock_turtle_soup.ttd:161" brief_location="161" success="false" prefix="" max_error="eps">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:162" brief_location="162" success="false" prefix="" max_error="eps">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:163" brief_location="163" success="false" prefix="nay" max_error="eps">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:164" brief_location="164" success="false" prefix="nay" max_error="eps">
              <expression1 value="reverse:invalid">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            </declare_scope>
          <text location="mock_turtle_soup.ttd:166" brief_location="166">right method:</text>
            <declare_scope location="mock_turtle_soup.ttd:167" brief_location="167" declare="auto call=it.pop_call(*soup_mock, reverse_float)">
            <check_approx location="mock_turtle_soup.ttd:168" brief_location="168" success="true" prefix="" max_error="eps">
              <expression1 value="reverse_float:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:169" brief_location="169" success="false" prefix="" max_error="eps">
              <expression1 value="reverse_float:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:170" brief_location="170" success="false" prefix="nay" max_error="eps">
              <expression1 value="reverse_float:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{2, 1} ({1, 2})}">{{2., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            <check_approx location="mock_turtle_soup.ttd:171" brief_location="171" success="true" prefix="nay" max_error="eps">
              <expression1 value="reverse_float:{{2, 1} ({1, 2})}">call</expression1>
              <expression2 value="{{3, 1} ({1, 2})}">{{3., 1.}}, {{1., 2.}}</expression2>
            </check_approx>
            </declare_scope>
          </declare_scope>
        <stats name="testudo.mock_turtle.approx" n_failed="6" n_total="9" n_errors="0" success="false"/>
        </test>
        <test location="mock_turtle_soup.ttd:215" name="testudo.mock_turtle.calls with several mocks" title="calls with several mocks">
        <declare location="mock_turtle_soup.ttd:216" brief_location="216">testudo::CallLedger cl</declare>
        <declare location="mock_turtle_soup.ttd:217" brief_location="217">MockLevel lev1(12)</declare>
        <perform location="mock_turtle_soup.ttd:218" brief_location="218">call_ledger_report_to(lev1, &amp;cl)</perform>
        <declare location="mock_turtle_soup.ttd:219" brief_location="219">bool created=false</declare>
        <declare location="mock_turtle_soup.ttd:220" brief_location="220">MockLevel lev2(47, [&amp;created]() { created=true; })</declare>
        <check_true location="mock_turtle_soup.ttd:221" brief_location="221" success="true" prefix="">
          <expression1>created</expression1>
        </check_true>
        <perform location="mock_turtle_soup.ttd:222" brief_location="222">call_ledger_report_to(lev2, &amp;cl)</perform>
        <perform location="mock_turtle_soup.ttd:223" brief_location="223">equalize(lev1, lev2)</perform>
        <check_equal location="mock_turtle_soup.ttd:224" brief_location="224" success="true" prefix="">
          <expression1 value="52">lev1.readout()</expression1>
          <expression2 value="52">52</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:225" brief_location="225" success="true" prefix="">
          <expression1 value="52">lev2.readout()</expression1>
          <expression2 value="52">52</expression2>
        </check_equal>
        <show_value location="mock_turtle_soup.ttd:226" brief_location="226">
          <expression1 value="{lev1.readout @ 0}&#xa;{lev2.readout @ 0}&#xa;{lev1.readout @ 1}&#xa;{lev2.readout @ 1}&#xa;{lev1.large_up @ 0}&#xa;{lev1.readout @ 2}&#xa;{lev2.readout @ 2}&#xa;{lev1.large_up @ 1}&#xa;{lev1.readout @ 3}&#xa;{lev2.readout @ 3}&#xa;{lev1.large_up @ 2}&#xa;{lev1.readout @ 4}&#xa;{lev2.readout @ 4}&#xa;{lev1.large_up @ 3}&#xa;{lev1.readout @ 5}&#xa;{lev2.readout @ 5} -- {lev2.readout @ 6}&#xa;{lev1.readout @ 6}&#xa;{lev2.small_up @ 0}&#xa;{lev2.readout @ 7}&#xa;{lev1.readout @ 7}&#xa;{lev2.small_up @ 1}&#xa;{lev2.readout @ 8}&#xa;{lev1.readout @ 8}&#xa;{lev2.small_up @ 2}&#xa;{lev2.readout @ 9}&#xa;{lev1.readout @ 9}&#xa;{lev2.small_up @ 3}&#xa;{lev2.readout @ 10}&#xa;{lev1.readout @ 10}&#xa;{lev2.small_up @ 4}&#xa;{lev2.readout @ 11}&#xa;{lev1.readout @ 11} -- {lev1.readout @ 12}&#xa;{lev2.readout @ 12}&#xa;">testudo::unquoted(print_calls(cl.calls()))</expression1>
        </show_value>
        <declare location="mock_turtle_soup.ttd:227" brief_location="227">auto it=iterate(cl)</declare>
        <perform location="mock_turtle_soup.ttd:228" brief_location="228">while (it.method_name() not_eq &quot;large_up&quot;) it.next()</perform>
        <check_equal location="mock_turtle_soup.ttd:230" brief_location="230" success="true" prefix="">
          <expression1 value="&quot;lev1&quot;">it.mock_name()</expression1>
          <expression2 value="&quot;lev1&quot;">&quot;lev1&quot;</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:231" brief_location="231" success="true" prefix="">
          <expression1 value="&quot;large_up&quot;">it.method_name()</expression1>
          <expression2 value="&quot;large_up&quot;">&quot;large_up&quot;</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:232" brief_location="232" success="true" prefix="">
          <expression1 value="large_up:{void ()}">it.get_call(lev1, large_up)</expression1>
          <expression2 value="{void ()}">{}, {}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:233" brief_location="233" success="false" prefix="">
          <expression1 value="large_up:invalid">it.get_call(lev2, large_up)</expression1>
          <expression2 value="{void ()}">{}, {}</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:234" brief_location="234">it.next()</perform>
        <check_equal location="mock_turtle_soup.ttd:235" brief_location="235" success="true" prefix="">
          <expression1 value="&quot;lev1&quot;">it.mock_name()</expression1>
          <expression2 value="&quot;lev1&quot;">&quot;lev1&quot;</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:236" brief_location="236" success="true" prefix="">
          <expression1 value="&quot;readout&quot;">it.method_name()</expression1>
          <expression2 value="&quot;readout&quot;">&quot;readout&quot;</expression2>
        </check_equal>
        <stats name="testudo.mock_turtle.calls with several mocks" n_failed="1" n_total="9" n_errors="0" success="false"/>
        </test>
        <test location="mock_turtle_soup.ttd:239" name="testudo.mock_turtle.predicates" title="predicates">
        <declare location="mock_turtle_soup.ttd:240" brief_location="240">using namespace testudo</declare>
        <check_true location="mock_turtle_soup.ttd:241" brief_location="241" success="true" prefix="">
          <expression1>is_always(1, &quot;one&quot;)(list&lt;tuple&lt;int, string&gt;&gt;{{1, &quot;one&quot;}, {1, &quot;one&quot;}})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:244" brief_location="244" success="false" prefix="">
          <expression1>is_always(1, &quot;one&quot;)(list&lt;tuple&lt;int, string&gt;&gt;{{1, &quot;one&quot;}, {2, &quot;one&quot;}})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:247" brief_location="247" success="true" prefix="">
          <expression1>is_always(2)(list{2, 2, 2})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:248" brief_location="248" success="true" prefix="">
          <expression1>is_always(2)(list&lt;tuple&lt;int&gt;&gt;{{2}, {2}, {2}})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:249" brief_location="249" success="false" prefix="">
          <expression1>is_always(2)(list{2, 3, 2})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:250" brief_location="250" success="false" prefix="">
          <expression1>is_always(2)(list&lt;tuple&lt;int&gt;&gt;{{2}, {3}, {2}})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:251" brief_location="251" success="true" prefix="">
          <expression1>is_never(4)(list{1, 2, 3})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:252" brief_location="252" success="false" prefix="">
          <expression1>is_never(1)(list{1, 2, 3})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:253" brief_location="253" success="false" prefix="">
          <expression1>is_constant(list{1, 1, 4})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:254" brief_location="254" success="true" prefix="">
          <expression1>is_constant(list{1, 1, 1})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:255" brief_location="255" success="true" prefix="">
          <expression1>all_different(list{1, 2, 3})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:256" brief_location="256" success="false" prefix="">
          <expression1>all_different(list{1, 2, 1})</expression1>
        </check_true>
        <check_true location="mock_turtle_soup.ttd:257" brief_location="257" success="false" prefix="">
          <expression1>all_different(list{1, 2, 2})</expression1>
        </check_true>
        <stats name="testudo.mock_turtle.predicates" n_failed="7" n_total="13" n_errors="0" success="false"/>
        </test>
        <test location="mock_turtle_soup.ttd:290" name="testudo.mock_turtle.exceptions with mock" title="exceptions with mock">
        <declare location="mock_turtle_soup.ttd:291" brief_location="291">using namespace testudo</declare>
        <declare location="mock_turtle_soup.ttd:292" brief_location="292">MockNamable namable</declare>
        <perform location="mock_turtle_soup.ttd:293" brief_location="293">namable.schedule_ret(set_name_is_good, true, throw_exception(runtime_error(&quot;already named&quot;)))</perform>
        <perform location="mock_turtle_soup.ttd:295" brief_location="295">namable.schedule_ret(create, void_v, throw_exception(runtime_error(&quot;already created&quot;)))</perform>
        <perform location="mock_turtle_soup.ttd:270" brief_location="270">namable.create()</perform>
        <perform location="mock_turtle_soup.ttd:271" brief_location="271">namable.set_name_is_good(&quot;Prince&quot;)</perform>
        <try location="mock_turtle_soup.ttd:272" brief_location="272">namable.set_name_is_good(&quot;the Artist&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">already named</catch>
        <try location="mock_turtle_soup.ttd:273" brief_location="273">namable.create()</try>
        <catch location="" brief_location="" exception_type="" success="true">already created</catch>
        <check_equal location="mock_turtle_soup.ttd:274" brief_location="274" success="true" prefix="">
          <expression1 value="2">namable.log_size(set_name_is_good)</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:275" brief_location="275" success="true" prefix="">
          <expression1 value="{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}">namable.logged_args(set_name_is_good)</expression1>
          <expression2 value="{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}">{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:277" brief_location="277" success="true" prefix="">
          <expression1 value="{true}">namable.logged_ret(set_name_is_good)[0]</expression1>
          <expression2 value="{true}">{true}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:278" brief_location="278" success="true" prefix="">
          <expression1 value="2">namable.log_size(create)</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
        <stats name="testudo.mock_turtle.exceptions with mock" n_failed="0" n_total="6" n_errors="0" success="true"/>
        </test>
        <test location="mock_turtle_soup.ttd:318" name="testudo.mock_turtle.exceptions with wrap" title="exceptions with wrap">
        <declare location="mock_turtle_soup.ttd:319" brief_location="319">WrapNamable namable</declare>
        <perform location="mock_turtle_soup.ttd:270" brief_location="270">namable.create()</perform>
        <perform location="mock_turtle_soup.ttd:271" brief_location="271">namable.set_name_is_good(&quot;Prince&quot;)</perform>
        <try location="mock_turtle_soup.ttd:272" brief_location="272">namable.set_name_is_good(&quot;the Artist&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">already named</catch>
        <try location="mock_turtle_soup.ttd:273" brief_location="273">namable.create()</try>
        <catch location="" brief_location="" exception_type="" success="true">already created</catch>
        <check_equal location="mock_turtle_soup.ttd:274" brief_location="274" success="true" prefix="">
          <expression1 value="2">namable.log_size(set_name_is_good)</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:275" brief_location="275" success="true" prefix="">
          <expression1 value="{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}">namable.logged_args(set_name_is_good)</expression1>
          <expression2 value="{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}">{{&quot;Prince&quot;}, {&quot;the Artist&quot;}}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:277" brief_location="277" success="true" prefix="">
          <expression1 value="{true}">namable.logged_ret(set_name_is_good)[0]</expression1>
          <expression2 value="{true}">{true}</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:278" brief_location="278" success="true" prefix="">
          <expression1 value="2">namable.log_size(create)</expression1>
          <expression2 value="2">2</expression2>
        </check_equal>
        <stats name="testudo.mock_turtle.exceptions with wrap" n_failed="0" n_total="6" n_errors="0" success="true"/>
        </test>
        <test location="mock_turtle_soup.ttd:335" name="testudo.mock_turtle.functions for default mock method values" title="functions for default mock method values">
        <declare location="mock_turtle_soup.ttd:336" brief_location="336">LambdaMock lm(5)</declare>
        <check_equal location="mock_turtle_soup.ttd:337" brief_location="337" success="true" prefix="">
          <expression1 value="14">lm.sum_plus_n(2, 7)</expression1>
          <expression2 value="14">14</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:338" brief_location="338">lm.set_ret_default(sum_plus_n, []() { return 3; })</perform>
        <check_equal location="mock_turtle_soup.ttd:339" brief_location="339" success="true" prefix="">
          <expression1 value="3">lm.sum_plus_n(2, 7)</expression1>
          <expression2 value="3">3</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:340" brief_location="340">lm.set_ret_default(sum_plus_n, sum_plus_100)</perform>
        <check_equal location="mock_turtle_soup.ttd:341" brief_location="341" success="true" prefix="">
          <expression1 value="109">lm.sum_plus_n(2, 7)</expression1>
          <expression2 value="109">109</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:342" brief_location="342">lm.set_ret_default(sum_plus_n, always_333)</perform>
        <check_equal location="mock_turtle_soup.ttd:343" brief_location="343" success="true" prefix="">
          <expression1 value="333">lm.sum_plus_n(2, 7)</expression1>
          <expression2 value="333">333</expression2>
        </check_equal>
        <perform location="mock_turtle_soup.ttd:344" brief_location="344">lm.schedule_ret(sum_plus_n, sum_plus_100, sum_plus_100, always_333, sum_plus_100)</perform>
        <check_equal location="mock_turtle_soup.ttd:349" brief_location="349" success="true" prefix="">
          <expression1 value="124">lm.sum_plus_n(20, 4)</expression1>
          <expression2 value="124">124</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:350" brief_location="350" success="true" prefix="">
          <expression1 value="125">lm.sum_plus_n(20, 5)</expression1>
          <expression2 value="125">125</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:351" brief_location="351" success="true" prefix="">
          <expression1 value="333">lm.sum_plus_n(20, 6)</expression1>
          <expression2 value="333">333</expression2>
        </check_equal>
        <check_equal location="mock_turtle_soup.ttd:352" brief_location="352" success="true" prefix="">
          <expression1 value="127">lm.sum_plus_n(20, 7)</expression1>
          <expression2 value="127">127</expression2>
        </check_equal>
        <text location="mock_turtle_soup.ttd:353" brief_location="353">now, back to default value</text>
        <check_equal location="mock_turtle_soup.ttd:354" brief_location="354" success="true" prefix="">
          <expression1 value="333">lm.sum_plus_n(20, 8)</expression1>
          <expression2 value="333">333</expression2>
        </check_equal>
        <stats name="testudo.mock_turtle.functions for default mock method values" n_failed="0" n_total="9" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.mock_turtle" n_failed="19" n_total="78" n_errors="0" success="false"/>
      </test>
      <test location="" name="testudo.crc" title="CRC">
        <test location="" name="testudo.crc.crc32" title="CRC-32">
          <test location="crc.ttd:12" name="testudo.crc.crc32.table" title="table">
          <declare location="crc.ttd:13" brief_location="13">using namespace cyclic_redundancy_check</declare>
          <declare location="crc.ttd:14" brief_location="14">list&lt;tuple&lt;size_t, string&gt;&gt; table_examples {{0, &quot;00000000&quot;}, {1, &quot;77073096&quot;}, {2, &quot;ee0e612c&quot;}, {3, &quot;990951ba&quot;}, {128, &quot;edb88320&quot;}, {255, &quot;2d02ef8d&quot;}}</declare>
          <declare location="crc.ttd:21" brief_location="21">auto table=crc32_table()</declare>
            <with location="crc.ttd:22" brief_location="22" var="(i, v)" container_first="table_examples" container_rest="" summary="(i, v) in table_examples">
            <check_equal location="crc.ttd:23" brief_location="23" success="with" prefix="">
              <expression1 value="">to_hex(table.data[i])</expression1>
              <expression2 value="">v</expression2>
            </check_equal>
            <with_stats name="(i, v) in table_examples" n_failed="0" n_total="6" n_errors="0" success="true"/>
            </with>
          <stats name="testudo.crc.crc32.table" n_failed="0" n_total="6" n_errors="0" success="true"/>
          </test>
          <test location="crc.ttd:26" name="testudo.crc.crc32.examples" title="examples">
          <declare location="crc.ttd:27" brief_location="27">using namespace cyclic_redundancy_check</declare>
          <declare location="crc.ttd:29" brief_location="29">list&lt;tuple&lt;string, string&gt;&gt; crc32_examples {{&quot;&quot;, &quot;00000000&quot;}, {&quot;Bob&quot;, &quot;cd86f7a0&quot;}, {&quot;bob&quot;, &quot;f5cbb140&quot;}, {&quot;BOB&quot;, &quot;636cf3ca&quot;}, {&quot;123&quot;, &quot;884863d2&quot;}, {&quot;123456789&quot;, &quot;cbf43926&quot;}, {&quot;Supercalifragilisticexpialidocious&quot;, &quot;4b2eb685&quot;}}</declare>
            <with location="crc.ttd:37" brief_location="37" var="(s, c)" container_first="crc32_examples" container_rest="" summary="(s, c) in crc32_examples">
            <check_equal location="crc.ttd:38" brief_location="38" success="with" prefix="">
              <expression1 value="">to_hex(crc32(s))</expression1>
              <expression2 value="">c</expression2>
            </check_equal>
            <with_stats name="(s, c) in crc32_examples" n_failed="0" n_total="7" n_errors="0" success="true"/>
            </with>
          <stats name="testudo.crc.crc32.examples" n_failed="0" n_total="7" n_errors="0" success="true"/>
          </test>
        <stats name="testudo.crc.crc32" n_failed="0" n_total="13" n_errors="0" success="true"/>
        </test>
        <test location="" name="testudo.crc.crc64" title="CRC-64">
          <test location="crc.ttd:43" name="testudo.crc.crc64.table" title="table">
          <declare location="crc.ttd:44" brief_location="44">using namespace cyclic_redundancy_check</declare>
          <declare location="crc.ttd:45" brief_location="45">list&lt;tuple&lt;size_t, string&gt;&gt; table_examples {{0, &quot;0000000000000000&quot;}, {1, &quot;b32e4cbe03a75f6f&quot;}, {2, &quot;f4843657a840a05b&quot;}, {3, &quot;47aa7ae9abe7ff34&quot;}, {128, &quot;c96c5795d7870f42&quot;}, {255, &quot;e0ada17364673f59&quot;}}</declare>
          <declare location="crc.ttd:52" brief_location="52">auto table=crc64_table()</declare>
            <with location="crc.ttd:53" brief_location="53" var="(i, v)" container_first="table_examples" container_rest="" summary="(i, v) in table_examples">
            <check_equal location="crc.ttd:54" brief_location="54" success="with" prefix="">
              <expression1 value="">to_hex(table.data[i])</expression1>
              <expression2 value="">v</expression2>
            </check_equal>
            <with_stats name="(i, v) in table_examples" n_failed="0" n_total="6" n_errors="0" success="true"/>
            </with>
          <stats name="testudo.crc.crc64.table" n_failed="0" n_total="6" n_errors="0" success="true"/>
          </test>
          <test location="crc.ttd:57" name="testudo.crc.crc64.examples" title="examples">
          <declare location="crc.ttd:58" brief_location="58">using namespace cyclic_redundancy_check</declare>
          <declare location="crc.ttd:60" brief_location="60">list&lt;tuple&lt;string, string&gt;&gt; crc64_examples {{&quot;&quot;, &quot;0000000000000000&quot;}, {&quot;123456789&quot;, &quot;995dc9bbdf1939fa&quot;}, {&quot;Supercalifragilisticexpialidocious&quot;, &quot;6a78d9cb83813b6d&quot;}}</declare>
            <with location="crc.ttd:64" brief_location="64" var="(s, c)" container_first="crc64_examples" container_rest="" summary="(s, c) in crc64_examples">
            <check_equal location="crc.ttd:65" brief_location="65" success="with" prefix="">
              <expression1 value="">to_hex(crc64(s))</expression1>
              <expression2 value="">c</expression2>
            </check_equal>
            <with_stats name="(s, c) in crc64_examples" n_failed="0" n_total="3" n_errors="0" success="true"/>
            </with>
          <stats name="testudo.crc.crc64.examples" n_failed="0" n_total="3" n_errors="0" success="true"/>
          </test>
          <test location="crc.ttd:68" name="testudo.crc.crc64.sanity checks" title="sanity checks">
          <declare location="crc.ttd:69" brief_location="69">using namespace cyclic_redundancy_check</declare>
          <check_equal location="crc.ttd:70" brief_location="70" success="true" prefix="">
            <expression1 value="&quot;deadbeef01234567&quot;">to_hex(hex_to&lt;crc64_t&gt;(&quot;deadbeef01234567&quot;))</expression1>
            <expression2 value="&quot;deadbeef01234567&quot;">&quot;deadbeef01234567&quot;</expression2>
          </check_equal>
          <stats name="testudo.crc.crc64.sanity checks" n_failed="0" n_total="1" n_errors="0" success="true"/>
          </test>
        <stats name="testudo.crc.crc64" n_failed="0" n_total="10" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.crc" n_failed="0" n_total="23" n_errors="0" success="true"/>
      </test>
      <test location="" name="testudo.glob_test" title="glob patterns">
        <test location="glob.ttd:11" name="testudo.glob_test.no special character" title="no special character">
        <check_true location="glob.ttd:12" brief_location="12" success="true" prefix="">
          <expression1>matches(&quot;&quot;, &quot;&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:13" brief_location="13" success="true" prefix="nay">
          <expression1>matches(&quot;&quot;, &quot;a&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:14" brief_location="14" success="true" prefix="nay">
          <expression1>matches(&quot;a&quot;, &quot;&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:15" brief_location="15" success="true" prefix="">
          <expression1>matches(&quot;a&quot;, &quot;a&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:16" brief_location="16" success="true" prefix="">
          <expression1>matches(&quot;abcd&quot;, &quot;abcd&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:17" brief_location="17" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;abcd&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:18" brief_location="18" success="true" prefix="nay">
          <expression1>matches(&quot;abcd&quot;, &quot;abc&quot;)</expression1>
        </check_true>
        <stats name="testudo.glob_test.no special character" n_failed="0" n_total="7" n_errors="0" success="true"/>
        </test>
        <test location="glob.ttd:21" name="testudo.glob_test.question mark" title="question mark">
        <check_true location="glob.ttd:22" brief_location="22" success="true" prefix="nay">
          <expression1>matches(&quot;&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:23" brief_location="23" success="true" prefix="nay">
          <expression1>matches(&quot;?&quot;, &quot;&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:24" brief_location="24" success="true" prefix="">
          <expression1>matches(&quot;?&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:25" brief_location="25" success="true" prefix="">
          <expression1>matches(&quot;a&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:26" brief_location="26" success="true" prefix="">
          <expression1>matches(&quot;.&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:27" brief_location="27" success="true" prefix="nay">
          <expression1>matches(&quot;ab&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:28" brief_location="28" success="true" prefix="">
          <expression1>matches(&quot;ab&quot;, &quot;??&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:29" brief_location="29" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;??&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:30" brief_location="30" success="true" prefix="nay">
          <expression1>matches(&quot;ab&quot;, &quot;???&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:31" brief_location="31" success="true" prefix="">
          <expression1>matches(&quot;abc&quot;, &quot;???&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:32" brief_location="32" success="true" prefix="">
          <expression1>matches(&quot;abc&quot;, &quot;?b?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:33" brief_location="33" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;?e?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:34" brief_location="34" success="true" prefix="">
          <expression1>matches(&quot;abc&quot;, &quot;a?c&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:35" brief_location="35" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;a?e&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:36" brief_location="36" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;e?c&quot;)</expression1>
        </check_true>
        <stats name="testudo.glob_test.question mark" n_failed="0" n_total="15" n_errors="0" success="true"/>
        </test>
        <test location="glob.ttd:39" name="testudo.glob_test.asterisk" title="asterisk">
        <check_true location="glob.ttd:40" brief_location="40" success="true" prefix="">
          <expression1>matches(&quot;&quot;, &quot;*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:41" brief_location="41" success="true" prefix="nay">
          <expression1>matches(&quot;*&quot;, &quot;&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:42" brief_location="42" success="true" prefix="">
          <expression1>matches(&quot;*&quot;, &quot;?&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:43" brief_location="43" success="true" prefix="">
          <expression1>matches(&quot;?&quot;, &quot;*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:44" brief_location="44" success="true" prefix="">
          <expression1>matches(&quot;*&quot;, &quot;*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:45" brief_location="45" success="true" prefix="">
          <expression1>matches(&quot;a&quot;, &quot;*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:46" brief_location="46" success="true" prefix="">
          <expression1>matches(&quot;ab&quot;, &quot;*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:47" brief_location="47" success="true" prefix="">
          <expression1>matches(&quot;ab&quot;, &quot;a*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:48" brief_location="48" success="true" prefix="nay">
          <expression1>matches(&quot;ab&quot;, &quot;e*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:49" brief_location="49" success="true" prefix="">
          <expression1>matches(&quot;ab&quot;, &quot;*b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:50" brief_location="50" success="true" prefix="nay">
          <expression1>matches(&quot;ab&quot;, &quot;*e&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:51" brief_location="51" success="true" prefix="">
          <expression1>matches(&quot;ab&quot;, &quot;a*b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:52" brief_location="52" success="true" prefix="">
          <expression1>matches(&quot;abcd&quot;, &quot;ab**cd&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:53" brief_location="53" success="true" prefix="">
          <expression1>matches(&quot;abcd&quot;, &quot;*ab**cd*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:54" brief_location="54" success="true" prefix="">
          <expression1>matches(&quot;abcd&quot;, &quot;*ab*c*d*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:55" brief_location="55" success="true" prefix="">
          <expression1>matches(&quot;abcd&quot;, &quot;*a*b*cd*&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:56" brief_location="56" success="true" prefix="">
          <expression1>matches(&quot;abecd&quot;, &quot;ab*cd&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:57" brief_location="57" success="true" prefix="">
          <expression1>matches(&quot;abeeecd&quot;, &quot;ab*cd&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:58" brief_location="58" success="true" prefix="nay">
          <expression1>matches(&quot;abc&quot;, &quot;ab*bc&quot;)</expression1>
        </check_true>
        <stats name="testudo.glob_test.asterisk" n_failed="0" n_total="19" n_errors="0" success="true"/>
        </test>
        <test location="glob.ttd:61" name="testudo.glob_test.escape" title="escape">
        <try location="glob.ttd:62" brief_location="62">matches(&quot;&quot;, &quot;\\n&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 2</catch>
        <try location="glob.ttd:63" brief_location="63">matches(&quot;&quot;, &quot;\\.&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 2</catch>
        <try location="glob.ttd:64" brief_location="64">matches(&quot;abcd&quot;, &quot;\\n&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 2</catch>
        <try location="glob.ttd:65" brief_location="65">matches(&quot;abcd&quot;, &quot;\\.&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 2</catch>
        <try location="glob.ttd:66" brief_location="66">matches(&quot;&quot;, &quot;\\&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 1</catch>
        <try location="glob.ttd:67" brief_location="67">matches(&quot;abcd&quot;, &quot;\\&quot;)</try>
        <catch location="" brief_location="" exception_type="" success="true">wrong wildcard at char 1</catch>
        <check_true location="glob.ttd:68" brief_location="68" success="true" prefix="">
          <expression1>matches(&quot;a\\b&quot;, &quot;a\\\\b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:69" brief_location="69" success="true" prefix="">
          <expression1>matches(&quot;a*b&quot;, &quot;a\\*b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:70" brief_location="70" success="true" prefix="nay">
          <expression1>matches(&quot;ab&quot;, &quot;a\\*b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:71" brief_location="71" success="true" prefix="">
          <expression1>matches(&quot;a?b&quot;, &quot;a\\?b&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:72" brief_location="72" success="true" prefix="nay">
          <expression1>matches(&quot;aeb&quot;, &quot;a\\?b&quot;)</expression1>
        </check_true>
        <stats name="testudo.glob_test.escape" n_failed="0" n_total="11" n_errors="0" success="true"/>
        </test>
        <test location="glob.ttd:75" name="testudo.glob_test.complex" title="complex">
        <check_true location="glob.ttd:76" brief_location="76" success="true" prefix="">
          <expression1>matches(&quot;bae\\an\\on&quot;, &quot;ba*a*\\\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:77" brief_location="77" success="true" prefix="nay">
          <expression1>matches(&quot;bae\\n\\on&quot;, &quot;ba*a*\\\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:78" brief_location="78" success="true" prefix="nay">
          <expression1>matches(&quot;bae\\an\\one&quot;, &quot;ba*a*\\\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:79" brief_location="79" success="true" prefix="nay">
          <expression1>matches(&quot;bae\\an\\n&quot;, &quot;ba*a*\\\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:80" brief_location="80" success="true" prefix="nay">
          <expression1>matches(&quot;bae\\anon&quot;, &quot;ba*a*\\\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:81" brief_location="81" success="true" prefix="nay">
          <expression1>matches(&quot;bae\\an\\on&quot;, &quot;ba*a*\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:82" brief_location="82" success="true" prefix="">
          <expression1>matches(&quot;bae\\an\\?n&quot;, &quot;ba*a*\\?n&quot;)</expression1>
        </check_true>
        <check_true location="glob.ttd:83" brief_location="83" success="true" prefix="">
          <expression1>matches(&quot;bae\\aeee?n&quot;, &quot;ba*a*\\?n&quot;)</expression1>
        </check_true>
        <stats name="testudo.glob_test.complex" n_failed="0" n_total="8" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.glob_test" n_failed="0" n_total="60" n_errors="0" success="true"/>
      </test>
      <test location="" name="testudo.diff" title="diff">
        <test location="diff.ttd:10" name="testudo.diff.longest common subsequence" title="longest common subsequence">
        <declare location="diff.ttd:11" brief_location="11">using namespace testudo___implementation::diff_implementation</declare>
          <with location="diff.ttd:12" brief_location="12" var="(a, b, d)" container_first="list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{" container_rest="{&quot;&quot;, &quot;&quot;, &quot;a&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;b&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;c&quot;},&#xa;{&quot;&quot;, &quot;2&quot;, &quot;c&quot;},&#xa;{&quot;1&quot;, &quot;&quot;, &quot;c&quot;},&#xa;{&quot;1&quot;, &quot;2&quot;, &quot;c&quot;},&#xa;{&quot;0&quot;, &quot;1&quot;, &quot;ba&quot;},&#xa;{&quot;881&quot;, &quot;882&quot;, &quot;ccc&quot;},&#xa;{&quot;881&quot;, &quot;882&quot;, &quot;c&quot;},&#xa;{&quot;88&quot;, &quot;88&quot;, &quot;cca&quot;},&#xa;{&quot;88&quot;, &quot;88&quot;, &quot;ccb&quot;},&#xa;{&quot;88&quot;, &quot;88&quot;, &quot;ccc&quot;} }" summary="(a, b, d) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}">
          <check_true location="diff.ttd:26" brief_location="26" success="with" prefix="nay">
            <expression1>check_common_subsequence(a, b, d)</expression1>
          </check_true>
          <with_stats name="(a, b, d) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}" n_failed="0" n_total="12" n_errors="0" success="true"/>
          </with>
          <with location="diff.ttd:27" brief_location="27" var="(a, b, d)" container_first="list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{" container_rest="{&quot;&quot;, &quot;&quot;, &quot;&quot;},&#xa;{&quot;0&quot;, &quot;0&quot;, &quot;c&quot;},&#xa;{&quot;0&quot;, &quot;&quot;, &quot;a&quot;},&#xa;{&quot;&quot;, &quot;0&quot;, &quot;b&quot;},&#xa;{&quot;0&quot;, &quot;1&quot;, &quot;ab&quot;},&#xa;{&quot;01234&quot;, &quot;0134&quot;, &quot;ccacc&quot;},&#xa;{&quot;0134&quot;, &quot;01234&quot;, &quot;ccbcc&quot;},&#xa;{&quot;01234&quot;, &quot;01934&quot;, &quot;ccabcc&quot;},&#xa;{&quot;01234567&quot;, &quot;10243576&quot;, &quot;acbcacbcacb&quot;},&#xa;{&quot;0129345967&quot;, &quot;1029435976&quot;, &quot;acbccacbccacb&quot;},&#xa;{&quot;00000123&quot;, &quot;00123&quot;, &quot;ccaaaccc&quot;},&#xa;{&quot;1234500067&quot;, &quot;9800032&quot;, &quot;aaaaabbcccaabb&quot;},&#xa;{&quot;234500067111189&quot;, &quot;21110001117&quot;, &quot;caaabbbcccaacccaaab&quot;} }" summary="(a, b, d) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}">
          <check_true location="diff.ttd:42" brief_location="42" success="with" prefix="">
            <expression1>check_common_subsequence(a, b, d)</expression1>
          </check_true>
          <declare location="diff.ttd:43" brief_location="43">auto diff_computed=longest_common_subsequence_debug(a, b)</declare>
          <check_equal location="diff.ttd:44" brief_location="44" success="with" prefix="">
            <expression1 value="">diff_computed</expression1>
            <expression2 value="">d</expression2>
          </check_equal>
          <with_stats name="(a, b, d) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}" n_failed="0" n_total="26" n_errors="0" success="true"/>
          </with>
        <declare location="diff.ttd:46" brief_location="46">testudo___implementation::random::random_generator&lt;size_t&gt; rgs</declare>
        <perform location="diff.ttd:47" brief_location="47">rgs.engine.seed(15)</perform>
        <declare location="diff.ttd:48" brief_location="48">string chars_prob=&quot;AAABCDEEEFGHIIIJKLMNOOOPQRSTUUUVWXYZ      &quot;</declare>
          <with location="diff.ttd:49" brief_location="49" var="(length, times, a_chars, b_new_chars, diff_chars)" container_first="list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{" container_rest="{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;aaaabbc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abbcccc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abbbbc&quot;},&#xa;{15, 50, chars_prob, chars_prob, &quot;abcccccc&quot;},&#xa;{50, 20, chars_prob, chars_prob, &quot;abcccccccc&quot;},&#xa;{100, 10, chars_prob, chars_prob, &quot;abcccccccc&quot;},&#xa;{1000, 5, chars_prob, chars_prob, &quot;abcccccccc&quot;} }" summary="(length, times, a_chars, b_new_chars, diff_chars) in list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{...}">
          <declare location="diff.ttd:60" brief_location="60">auto diff_data= testudo::generate_data( times, [&amp;rgs, length, a_chars]() { return random_string(rgs, length, a_chars); })</declare>
            <with location="diff.ttd:65" brief_location="65" var="a" container_first="diff_data" container_rest="" summary="a in diff_data">
            <declare location="diff.ttd:66" brief_location="66">auto diff=random_diff(rgs, a, diff_chars)</declare>
            <declare location="diff.ttd:67" brief_location="67">auto b=random_patch(rgs, a, diff, b_new_chars)</declare>
            <declare location="diff.ttd:68" brief_location="68">auto diff_computed=longest_common_subsequence(a, b)</declare>
            <check_true location="diff.ttd:69" brief_location="69" success="with" prefix="">
              <expression1>check_common_subsequence(a, b, diff_computed)</expression1>
            </check_true>
            <check_true location="diff.ttd:70" brief_location="70" success="with" prefix="">
              <expression1>diff_computed.length()&lt;=diff.length()</expression1>
            </check_true>
            </with>
          <with_stats name="(length, times, a_chars, b_new_chars, diff_chars) in list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{...}" n_failed="0" n_total="970" n_errors="0" success="true"/>
          </with>
        <stats name="testudo.diff.longest common subsequence" n_failed="0" n_total="1008" n_errors="0" success="true"/>
        </test>
        <test location="diff.ttd:75" name="testudo.diff.shortest_edit" title="shortest_edit">
        <declare location="diff.ttd:76" brief_location="76">using namespace testudo___implementation::diff_implementation</declare>
          <with location="diff.ttd:77" brief_location="77" var="(s, t, e)" container_first="list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{" container_rest="{&quot;&quot;, &quot;&quot;, &quot;e&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;w0.&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;m&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;w&quot;},&#xa;{&quot;0&quot;, &quot;0&quot;, &quot;m1.&quot;},&#xa;{&quot;&quot;, &quot;&quot;, &quot;c&quot;},&#xa;{&quot;&quot;, &quot;2&quot;, &quot;m2:0.&quot;},&#xa;{&quot;1&quot;, &quot;&quot;, &quot;w1.&quot;},&#xa;{&quot;1&quot;, &quot;2&quot;, &quot;m1:0.&quot;},&#xa;{&quot;0&quot;, &quot;1&quot;, &quot;w2.&quot;},&#xa;{&quot;881&quot;, &quot;882&quot;, &quot;m3:0.&quot;},&#xa;{&quot;881&quot;, &quot;882&quot;, &quot;m2:0.&quot;},&#xa;{&quot;881&quot;, &quot;882&quot;, &quot;m2:0.w:1.m1:0.&quot;},&#xa;{&quot;88&quot;, &quot;88&quot;, &quot;m2:0.w1.&quot;},&#xa;{&quot;88&quot;, &quot;88&quot;, &quot;m2:0.m1:0&quot;},&#xa;{&quot;8&quot;, &quot;88&quot;, &quot;m1:0.m1:0.&quot;} }" summary="(s, t, e) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}">
          <check_true location="diff.ttd:95" brief_location="95" success="with" prefix="nay">
            <expression1>check_edit(s, t, e)</expression1>
          </check_true>
          <with_stats name="(s, t, e) in list&lt;tuple&lt;string, string, lcs_t&gt;&gt;{...}" n_failed="0" n_total="16" n_errors="0" success="true"/>
          </with>
          <with location="diff.ttd:96" brief_location="96" var="(s, t, e)" container_first="list&lt;tuple&lt;string, string, edit_t&gt;&gt;{" container_rest="{&quot;&quot;, &quot;&quot;, &quot;&quot;},&#xa;{&quot;0&quot;, &quot;0&quot;, &quot;m1:0.&quot;},&#xa;{&quot;0&quot;, &quot;&quot;, &quot;&quot;},&#xa;{&quot;&quot;, &quot;0&quot;, &quot;w1.&quot;},&#xa;{&quot;01234&quot;, &quot;0134&quot;, &quot;m2:0.m2:3.&quot;},&#xa;{&quot;0134&quot;, &quot;01234&quot;, &quot;m2:0.w1.m2:2.&quot;},&#xa;{&quot;00000123&quot;, &quot;00123&quot;, &quot;m5:3.&quot;},&#xa;{&quot;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&quot;, &quot;QUICK BROWN THE DOG JUMPS UNDER THE LAZY FOX&quot;, &quot;m12:4.m4:0.m3:40.m7:19.w3.m12:28.m3:16.&quot;} }" summary="(s, t, e) in list&lt;tuple&lt;string, string, edit_t&gt;&gt;{...}">
          <check_true location="diff.ttd:112" brief_location="112" success="with" prefix="">
            <expression1>check_edit(s, t, e)</expression1>
          </check_true>
          <declare location="diff.ttd:113" brief_location="113">auto edit_computed=shortest_edit_debug(s, t)</declare>
          <check_equal location="diff.ttd:114" brief_location="114" success="with" prefix="">
            <expression1 value="">edit_computed</expression1>
            <expression2 value="">e</expression2>
          </check_equal>
          <with_stats name="(s, t, e) in list&lt;tuple&lt;string, string, edit_t&gt;&gt;{...}" n_failed="0" n_total="16" n_errors="0" success="true"/>
          </with>
        <declare location="diff.ttd:116" brief_location="116">testudo___implementation::random::random_generator&lt;size_t&gt; rgs</declare>
        <perform location="diff.ttd:117" brief_location="117">rgs.engine.seed(15)</perform>
        <declare location="diff.ttd:118" brief_location="118">string chars_prob=&quot;AAABCDEEEFGHIIIJKLMNOOOPQRSTUUUVWXYZ      &quot;</declare>
          <with location="diff.ttd:119" brief_location="119" var="(length, times, s_chars, t_new_chars, diff_chars)" container_first="list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{" container_rest="{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;aaaabbc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abbcccc&quot;},&#xa;{5, 100, &quot;000112&quot;, &quot;011222&quot;, &quot;abbbbc&quot;},&#xa;{15, 50, chars_prob, chars_prob, &quot;abcccccc&quot;},&#xa;{50, 10, chars_prob, chars_prob, &quot;abcccccccc&quot;},&#xa;{300, 2, chars_prob, chars_prob, &quot;abcccccccc&quot;} }" summary="(length, times, s_chars, t_new_chars, diff_chars) in list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{...}">
          <declare location="diff.ttd:129" brief_location="129">auto diff_data= testudo::generate_data( times, [&amp;rgs, length, s_chars]() { return random_string(rgs, length, s_chars); })</declare>
            <with location="diff.ttd:134" brief_location="134" var="s" container_first="diff_data" container_rest="" summary="s in diff_data">
            <declare location="diff.ttd:135" brief_location="135">auto diff=random_diff(rgs, s, diff_chars)</declare>
            <declare location="diff.ttd:136" brief_location="136">auto t=random_patch(rgs, s, diff, t_new_chars)</declare>
            <declare location="diff.ttd:137" brief_location="137">auto edit=shortest_edit_debug(s, t)</declare>
            <check_true location="diff.ttd:138" brief_location="138" success="with" prefix="">
              <expression1>check_edit(s, t, edit)</expression1>
            </check_true>
            </with>
          <with_stats name="(length, times, s_chars, t_new_chars, diff_chars) in list&lt;tuple&lt;size_t, size_t, string, string, string&gt;&gt;{...}" n_failed="0" n_total="462" n_errors="0" success="true"/>
          </with>
        <declare location="diff.ttd:154" brief_location="154">string source=&quot;0123456&quot;</declare>
        <declare location="diff.ttd:155" brief_location="155">string target=&quot;4531278&quot;</declare>
        <declare location="diff.ttd:156" brief_location="156">auto edit=shortest_edit(source, target, 2)</declare>
        <show_value location="diff.ttd:157" brief_location="157">
          <expression1 value="&quot;m2:4.w1.m2:1.w2.&quot;">edit</expression1>
        </show_value>
        <declare location="diff.ttd:158" brief_location="158">auto et=edit_to_table(edit, source.size(), target.size())</declare>
        <check_equal location="diff.ttd:159" brief_location="159" success="true" prefix="">
          <expression1 value="{0, 3, 6}">et.source_disappeared</expression1>
          <expression2 value="{0, 3, 6}">{0, 3, 6}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:160" brief_location="160" success="true" prefix="">
          <expression1 value="{2, 5, 6}">et.target_new</expression1>
          <expression2 value="{2, 5, 6}">{2, 5, 6}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:161" brief_location="161" success="true" prefix="">
          <expression1 value="{{1, 3}, {2, 4}, {4, 0}, {5, 1}}">et.source_matches</expression1>
          <expression2 value="{{1, 3}, {2, 4}, {4, 0}, {5, 1}}">{{1, 3}, {2, 4}, {4, 0}, {5, 1}}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:162" brief_location="162" success="true" prefix="">
          <expression1 value="{{0, 4}, {1, 5}, {3, 1}, {4, 2}}">et.target_matches</expression1>
          <expression2 value="{{0, 4}, {1, 5}, {3, 1}, {4, 2}}">{{0, 4}, {1, 5}, {3, 1}, {4, 2}}</expression2>
        </check_equal>
        <stats name="testudo.diff.shortest_edit" n_failed="0" n_total="498" n_errors="0" success="true"/>
        </test>
        <test location="diff.ttd:187" name="testudo.diff.track parsing" title="track parsing">
        <declare location="diff.ttd:188" brief_location="188">using namespace testudo___implementation::diff_implementation</declare>
        <declare location="diff.ttd:189" brief_location="189">string tts=tts1()</declare>
        <show_value location="diff.ttd:190" brief_location="190">
          <expression1 value="&quot;t-title [0123456789abcdef]&#xa;[phi.ttd:22] i-declare [e89ca44261d5c240]&#xa;[phi.ttd:23] c-check_equal [585280a21523ffff] r-0-1-0&#xa;[phi.ttd:23] c-check_equal [585280a21523d973] r-1-0-0&#xa;[phi.ttd:25] c-with_summary [a45be715e8bd0bb1] r-12-3-45&#xa;&quot;">tts</expression1>
        </show_value>
        <declare location="diff.ttd:191" brief_location="191">istringstream isstts(tts)</declare>
        <declare location="diff.ttd:192" brief_location="192">auto tt=parse_track(isstts)</declare>
        <check_equal location="diff.ttd:193" brief_location="193" success="true" prefix="">
          <expression1 value="5">tt.size()</expression1>
          <expression2 value="5">5</expression2>
        </check_equal>
        <declare location="diff.ttd:194" brief_location="194">ostringstream oss</declare>
        <perform location="diff.ttd:195" brief_location="195">oss &lt;&lt; tt</perform>
        <check_equal location="diff.ttd:196" brief_location="196" success="true" prefix="">
          <expression1 value="&quot;t-title [0123456789abcdef]&#xa;[phi.ttd:22] i-declare [e89ca44261d5c240]&#xa;[phi.ttd:23] c-check_equal [585280a21523ffff] r-0-1-0&#xa;[phi.ttd:23] c-check_equal [585280a21523d973] r-1-0-0&#xa;[phi.ttd:25] c-with_summary [a45be715e8bd0bb1] r-12-3-45&#xa;&quot;">oss.str()</expression1>
          <expression2 value="&quot;t-title [0123456789abcdef]&#xa;[phi.ttd:22] i-declare [e89ca44261d5c240]&#xa;[phi.ttd:23] c-check_equal [585280a21523ffff] r-0-1-0&#xa;[phi.ttd:23] c-check_equal [585280a21523d973] r-1-0-0&#xa;[phi.ttd:25] c-with_summary [a45be715e8bd0bb1] r-12-3-45&#xa;&quot;">tts</expression2>
        </check_equal>
        <declare location="diff.ttd:197" brief_location="197">auto seq= [](size_t n) { vector&lt;size_t&gt; result; for (size_t i=0; i&lt;n; ++i) result.push_back(i); return result; }</declare>
          <with location="diff.ttd:203" brief_location="203" var="i" container_first="seq(tt.size())" container_rest="" summary="i in seq(tt.size())">
            <with location="diff.ttd:204" brief_location="204" var="j" container_first="seq(tt.size())" container_rest="" summary="j in seq(tt.size())">
            <check_true location="diff.ttd:205" brief_location="205" success="with" prefix="">
              <expression1>(i==j) ? ((not (i&lt;j)) and (not (j&lt;i))) : ((i&lt;j) not_eq (j&lt;i))</expression1>
            </check_true>
            <check_true location="diff.ttd:209" brief_location="209" success="with" prefix="">
              <expression1>(i==j) ? ((not (tt[i]&lt;tt[j])) and (not (tt[j]&lt;tt[i]))) : ((tt[i]&lt;tt[j]) not_eq (tt[j]&lt;tt[i]))</expression1>
            </check_true>
            </with>
          <with_stats name="i in seq(tt.size())" n_failed="0" n_total="50" n_errors="0" success="true"/>
          </with>
        <declare location="diff.ttd:214" brief_location="214">string ttsd=tts1_different_addresses()</declare>
        <show_value location="diff.ttd:215" brief_location="215">
          <expression1 value="&quot;t-title [0123456789abcdef]&#xa;[psi.ttd:23] i-declare [e89ca44261d5c240]&#xa;[psi.ttd:24] c-check_equal [585280a215230000] r-1-0-0&#xa;[psi.ttd:24] c-check_equal [585280a215232222] r-0-1-0&#xa;[psi.ttd:24] c-check_equal [585280a21523d973] r-0-1-0&#xa;[psi.ttd:28] c-with_summary [a45be715e8bd0bb1] r-1-23-45&#xa;[psi.ttd:24] c-check_equal [585280a215231111] r-1-0-0&#xa;&quot;">ttsd</expression1>
        </show_value>
        <declare location="diff.ttd:216" brief_location="216">istringstream issttsd(ttsd)</declare>
        <declare location="diff.ttd:217" brief_location="217">auto ttd=parse_track(issttsd)</declare>
        <declare location="diff.ttd:218" brief_location="218">auto tt_edit=shortest_edit(tt, ttd, 2)</declare>
        <check_equal location="diff.ttd:219" brief_location="219" success="true" prefix="">
          <expression1 value="&quot;m2:0.w2.m2:3.w1.&quot;">tt_edit</expression1>
          <expression2 value="&quot;m2:0.w2.m2:3.w1.&quot;">&quot;m2:0.w2.m2:3.w1.&quot;</expression2>
        </check_equal>
        <declare location="diff.ttd:220" brief_location="220">auto tt_table=edit_to_table(tt_edit, tt.size(), ttd.size())</declare>
        <check_equal location="diff.ttd:221" brief_location="221" success="true" prefix="">
          <expression1 value="1">tt_table.source_disappeared.size()</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <check_equal location="diff.ttd:222" brief_location="222" success="true" prefix="">
          <expression1 value="{2}">tt_table.source_disappeared</expression1>
          <expression2 value="{2}">{2}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:223" brief_location="223" success="true" prefix="">
          <expression1 value="{2, 3, 6}">tt_table.target_new</expression1>
          <expression2 value="{2, 3, 6}">{2, 3, 6}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:224" brief_location="224" success="true" prefix="">
          <expression1 value="{{0, 0}, {1, 1}, {3, 4}, {4, 5}}">tt_table.source_matches</expression1>
          <expression2 value="{{0, 0}, {1, 1}, {3, 4}, {4, 5}}">{{0, 0}, {1, 1}, {3, 4}, {4, 5}}</expression2>
        </check_equal>
        <check_equal location="diff.ttd:225" brief_location="225" success="true" prefix="">
          <expression1 value="{{0, 0}, {1, 1}, {4, 3}, {5, 4}}">tt_table.target_matches</expression1>
          <expression2 value="{{0, 0}, {1, 1}, {4, 3}, {5, 4}}">{{0, 0}, {1, 1}, {4, 3}, {5, 4}}</expression2>
        </check_equal>
        <declare location="diff.ttd:226" brief_location="226">auto ts=track_table_to_summary(tt, ttd, tt_table)</declare>
        <show_value location="diff.ttd:227" brief_location="227">
          <expression1 value="[good] deleted wrong (1: 1/1 f)&#xa;  [phi.ttd:23] c-check_equal (1/1 f)&#xa;[good] new good (2: 0/2 f)&#xa;  [psi.ttd:24] c-check_equal (0/1 f)&#xa;  [psi.ttd:24] c-check_equal (0/1 f)&#xa;[-BAD-] new wrong (1: 1/1 f)&#xa;  [psi.ttd:24] c-check_equal (1/1 f)&#xa;[-BAD-] good to wrong (1: 0/1 f -&gt; 1/1 f)&#xa;  [phi.ttd:23 -&gt; 24] c-check_equal (0/1 f -&gt; 1/1 f)&#xa;[-BAD-] with_data changed (1: 3/15 f, 45 e -&gt; 23/24 f, 45 e)&#xa;  [-BAD-] [phi.ttd:25 -&gt; 28] c-with_summary (3/15 f, 45 e -&gt; 23/24 f, 4\&#xa;      5 e)&#xa;">ts</expression1>
        </show_value>
        <stats name="testudo.diff.track parsing" n_failed="0" n_total="58" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.diff" n_failed="0" n_total="1564" n_errors="0" success="true"/>
      </test>
      <test location="" name="testudo.macros" title="macros">
        <test location="macros.ttd:10" name="testudo.macros.test definitions" title="test definitions">
        <declare location="macros.ttd:17" brief_location="17">&quot;#define TEST_XY xy&quot;</declare>
        <declare location="macros.ttd:18" brief_location="18">&quot;#define TEST_ZW() zw&quot;</declare>
        <declare location="macros.ttd:19" brief_location="19">&quot;#define TEST_BRACKETIZE(...) (__VA_ARGS__)&quot;</declare>
        <declare location="macros.ttd:20" brief_location="20">&quot;// \&quot;testudo___STRING()\&quot; with an additional expansion:&quot;</declare>
        <declare location="macros.ttd:21" brief_location="21">&quot;#define STRING(...) testudo___STRING(__VA_ARGS__)&quot;</declare>
        <stats name="testudo.macros.test definitions" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:24" name="testudo.macros.EXPAND" title="EXPAND">
        <check_equal location="macros.ttd:25" brief_location="25" success="true" prefix="">
          <expression1 value="&quot;zw&quot;">STRING(TEST_ZW TEST_BRACKETIZE())</expression1>
          <expression2 value="&quot;zw&quot;">&quot;zw&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:26" brief_location="26" success="true" prefix="">
          <expression1 value="&quot;TEST_ZW ()&quot;">testudo___STRING(TEST_ZW TEST_BRACKETIZE())</expression1>
          <expression2 value="&quot;TEST_ZW ()&quot;">&quot;TEST_ZW ()&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:27" brief_location="27" success="true" prefix="">
          <expression1 value="&quot;zw&quot;">testudo___STRING(testudo___EXPAND(TEST_ZW TEST_BRACKETIZE()))</expression1>
          <expression2 value="&quot;zw&quot;">&quot;zw&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.EXPAND" n_failed="0" n_total="3" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:31" name="testudo.macros.STRING" title="STRING">
        <check_equal location="macros.ttd:32" brief_location="32" success="true" prefix="">
          <expression1 value="&quot;ab&quot;">testudo___STRING(ab)</expression1>
          <expression2 value="&quot;ab&quot;">&quot;ab&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:33" brief_location="33" success="true" prefix="">
          <expression1 value="&quot;ab&quot;">testudo___STRING_EXPANDED(ab)</expression1>
          <expression2 value="&quot;ab&quot;">&quot;ab&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:34" brief_location="34" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">testudo___STRING(TEST_XY)</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:35" brief_location="35" success="true" prefix="">
          <expression1 value="&quot;TEST_XY&quot;">testudo___STRING_EXPANDED(TEST_XY)</expression1>
          <expression2 value="&quot;TEST_XY&quot;">&quot;TEST_XY&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.STRING" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:38" name="testudo.macros.CAT" title="CAT">
        <check_equal location="macros.ttd:39" brief_location="39" success="true" prefix="">
          <expression1 value="&quot;abcd&quot;">STRING(testudo___CAT(ab, cd))</expression1>
          <expression2 value="&quot;abcd&quot;">&quot;abcd&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:40" brief_location="40" success="true" prefix="">
          <expression1 value="&quot;abcd&quot;">STRING(testudo___CAT_EXPANDED(ab, cd))</expression1>
          <expression2 value="&quot;abcd&quot;">&quot;abcd&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:41" brief_location="41" success="true" prefix="">
          <expression1 value="&quot;xyzw&quot;">STRING(testudo___CAT(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;xyzw&quot;">&quot;xyzw&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:42" brief_location="42" success="true" prefix="">
          <expression1 value="&quot;TEST_XYTEST_ZW()&quot;">STRING(testudo___CAT_EXPANDED(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;TEST_XYTEST_ZW()&quot;">&quot;TEST_XYTEST_ZW()&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:44" brief_location="44" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___CAT(TEST_, XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:45" brief_location="45" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___CAT_EXPANDED(TEST_, XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.CAT" n_failed="0" n_total="6" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:48" name="testudo.macros.REMOVE_BRACKETS" title="REMOVE_BRACKETS">
        <check_equal location="macros.ttd:49" brief_location="49" success="true" prefix="">
          <expression1 value="&quot;(ab, cd)&quot;">STRING(TEST_BRACKETIZE(ab, cd))</expression1>
          <expression2 value="&quot;(ab, cd)&quot;">&quot;(ab, cd)&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:50" brief_location="50" success="true" prefix="">
          <expression1 value="&quot;ab, cd&quot;">STRING( testudo___REMOVE_BRACKETS TEST_BRACKETIZE(ab, cd))</expression1>
          <expression2 value="&quot;ab, cd&quot;">&quot;ab, cd&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:53" brief_location="53" success="true" prefix="">
          <expression1 value="&quot;testudo___REMOVE_BRACKETS (ab, cd)&quot;">testudo___STRING( testudo___REMOVE_BRACKETS TEST_BRACKETIZE(ab, cd))</expression1>
          <expression2 value="&quot;testudo___REMOVE_BRACKETS (ab, cd)&quot;">&quot;testudo___REMOVE_BRACKETS (ab, cd)&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:56" brief_location="56" success="true" prefix="">
          <expression1 value="&quot;ab, cd&quot;">testudo___STRING( testudo___EXPAND( testudo___REMOVE_BRACKETS TEST_BRACKETIZE(ab, cd)))</expression1>
          <expression2 value="&quot;ab, cd&quot;">&quot;ab, cd&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.REMOVE_BRACKETS" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:62" name="testudo.macros.TAKE_SINGLE, TAKE_1ST, TAKE_2ND" title="TAKE_SINGLE, TAKE_1ST, TAKE_2ND">
        <check_equal location="macros.ttd:63" brief_location="63" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___TAKE_SINGLE(TEST_XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:64" brief_location="64" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___TAKE_1ST(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:65" brief_location="65" success="true" prefix="">
          <expression1 value="&quot;zw&quot;">STRING(testudo___TAKE_2ND(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;zw&quot;">&quot;zw&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.TAKE_SINGLE, TAKE_1ST, TAKE_2ND" n_failed="0" n_total="3" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:68" name="testudo.macros.SINGLE_OR_1ST, SINGLE_OR_2nd" title="SINGLE_OR_1ST, SINGLE_OR_2nd">
        <check_equal location="macros.ttd:69" brief_location="69" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___SINGLE_OR_1ST(TEST_XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:70" brief_location="70" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___SINGLE_OR_1ST((TEST_XY, TEST_ZW())))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:71" brief_location="71" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___SINGLE_OR_2ND(TEST_XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:72" brief_location="72" success="true" prefix="">
          <expression1 value="&quot;zw&quot;">STRING(testudo___SINGLE_OR_2ND((TEST_XY, TEST_ZW())))</expression1>
          <expression2 value="&quot;zw&quot;">&quot;zw&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.SINGLE_OR_1ST, SINGLE_OR_2nd" n_failed="0" n_total="4" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:75" name="testudo.macros.FIRST, COMMA_REST" title="FIRST, COMMA_REST">
        <check_equal location="macros.ttd:76" brief_location="76" success="true" prefix="">
          <expression1 value="&quot;&quot;">STRING(testudo___FIRST())</expression1>
          <expression2 value="&quot;&quot;">&quot;&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:77" brief_location="77" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___FIRST(TEST_XY))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:78" brief_location="78" success="true" prefix="">
          <expression1 value="&quot;xy&quot;">STRING(testudo___FIRST(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;xy&quot;">&quot;xy&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:79" brief_location="79" success="true" prefix="">
          <expression1 value="&quot;&quot;">STRING(testudo___COMMA_REST())</expression1>
          <expression2 value="&quot;&quot;">&quot;&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:80" brief_location="80" success="true" prefix="">
          <expression1 value="&quot;&quot;">STRING(testudo___COMMA_REST(TEST_XY))</expression1>
          <expression2 value="&quot;&quot;">&quot;&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:81" brief_location="81" success="true" prefix="">
          <expression1 value="&quot;, zw&quot;">STRING(testudo___COMMA_REST(TEST_XY, TEST_ZW()))</expression1>
          <expression2 value="&quot;, zw&quot;">&quot;, zw&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:82" brief_location="82" success="true" prefix="">
          <expression1 value="&quot;, zw, -12&quot;">STRING(testudo___COMMA_REST(TEST_XY, TEST_ZW(), -12))</expression1>
          <expression2 value="&quot;, zw, -12&quot;">&quot;, zw, -12&quot;</expression2>
        </check_equal>
        <text location="macros.ttd:84" brief_location="84">careful with arguments with non-parenthesised commas</text>
        <check_equal location="macros.ttd:85" brief_location="85" success="true" prefix="">
          <expression1 value="&quot;[a&quot;">STRING(testudo___FIRST([a, b], c))</expression1>
          <expression2 value="&quot;[a&quot;">&quot;[a&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:86" brief_location="86" success="true" prefix="">
          <expression1 value="&quot;C&lt;A&quot;">STRING(testudo___FIRST(C&lt;A, B&gt;))</expression1>
          <expression2 value="&quot;C&lt;A&quot;">&quot;C&lt;A&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:87" brief_location="87" success="true" prefix="">
          <expression1 value="&quot;(C&lt;A, B&gt;)&quot;">STRING(testudo___FIRST((C&lt;A, B&gt;)))</expression1>
          <expression2 value="&quot;(C&lt;A, B&gt;)&quot;">&quot;(C&lt;A, B&gt;)&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:88" brief_location="88" success="true" prefix="">
          <expression1 value="&quot;C&lt;A, B&gt;&quot;">STRING(testudo___REMOVE_BRACKETS testudo___FIRST((C&lt;A, B&gt;)))</expression1>
          <expression2 value="&quot;C&lt;A, B&gt;&quot;">&quot;C&lt;A, B&gt;&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.FIRST, COMMA_REST" n_failed="0" n_total="11" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:92" name="testudo.macros.FOR_EACH, FOR_EACH_N_REV_COMMA" title="FOR_EACH, FOR_EACH_N_REV_COMMA">
        <declare location="macros.ttd:95" brief_location="95">&quot;#define TESTUDO_MACRO_TEST_ANGLES(a) &lt;a&gt;&quot;</declare>
        <check_equal location="macros.ttd:96" brief_location="96" success="true" prefix="">
          <expression1 value="&quot;&lt;z&gt;&lt;y&gt;&lt;x&gt;&quot;">STRING(testudo___FOR_EACH(TESTUDO_MACRO_TEST_ANGLES, z, y, x))</expression1>
          <expression2 value="&quot;&lt;z&gt;&lt;y&gt;&lt;x&gt;&quot;">&quot;&lt;z&gt;&lt;y&gt;&lt;x&gt;&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:98" brief_location="98" success="true" prefix="">
          <expression1 value="&quot;&lt;3z&gt;, &lt;2y&gt;, &lt;1x&gt;&quot;">STRING( testudo___FOR_EACH_N_REV_COMMA(TESTUDO_MACRO_TEST_ANGLES_N, z, y, x))</expression1>
          <expression2 value="&quot;&lt;3z&gt;, &lt;2y&gt;, &lt;1x&gt;&quot;">&quot;&lt;3z&gt;, &lt;2y&gt;, &lt;1x&gt;&quot;</expression2>
        </check_equal>
        <declare location="macros.ttd:102" brief_location="102">&quot;#undef TESTUDO_MACRO_TEST_ANGLES&quot;</declare>
        <stats name="testudo.macros.FOR_EACH, FOR_EACH_N_REV_COMMA" n_failed="0" n_total="2" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:106" name="testudo.macros.HAS_COMMA, IS_EMPTY" title="HAS_COMMA, IS_EMPTY">
        <check_equal location="macros.ttd:107" brief_location="107" success="true" prefix="">
          <expression1 value="0">testudo___HAS_COMMA()</expression1>
          <expression2 value="0">0</expression2>
        </check_equal>
        <check_equal location="macros.ttd:108" brief_location="108" success="true" prefix="">
          <expression1 value="0">testudo___HAS_COMMA(ab)</expression1>
          <expression2 value="0">0</expression2>
        </check_equal>
        <check_equal location="macros.ttd:109" brief_location="109" success="true" prefix="">
          <expression1 value="1">testudo___HAS_COMMA(ab, cd)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <check_equal location="macros.ttd:110" brief_location="110" success="true" prefix="">
          <expression1 value="1">testudo___HAS_COMMA(ab, cd, ef)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <check_equal location="macros.ttd:111" brief_location="111" success="true" prefix="">
          <expression1 value="1">testudo___IS_EMPTY()</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <check_equal location="macros.ttd:112" brief_location="112" success="true" prefix="">
          <expression1 value="0">testudo___IS_EMPTY(a)</expression1>
          <expression2 value="0">0</expression2>
        </check_equal>
        <check_equal location="macros.ttd:113" brief_location="113" success="true" prefix="">
          <expression1 value="0">testudo___IS_EMPTY(a, 2)</expression1>
          <expression2 value="0">0</expression2>
        </check_equal>
        <stats name="testudo.macros.HAS_COMMA, IS_EMPTY" n_failed="0" n_total="7" n_errors="0" success="true"/>
        </test>
        <test location="macros.ttd:116" name="testudo.macros.COMMA_IF_NOT_EMPTY" title="COMMA_IF_NOT_EMPTY">
        <check_equal location="macros.ttd:117" brief_location="117" success="true" prefix="">
          <expression1 value="&quot;&quot;">STRING(testudo___COMMA_IF_NOT_EMPTY())</expression1>
          <expression2 value="&quot;&quot;">&quot;&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:118" brief_location="118" success="true" prefix="">
          <expression1 value="&quot;,&quot;">STRING(testudo___COMMA_IF_NOT_EMPTY(a))</expression1>
          <expression2 value="&quot;,&quot;">&quot;,&quot;</expression2>
        </check_equal>
        <check_equal location="macros.ttd:119" brief_location="119" success="true" prefix="">
          <expression1 value="&quot;,&quot;">STRING(testudo___COMMA_IF_NOT_EMPTY(a, b))</expression1>
          <expression2 value="&quot;,&quot;">&quot;,&quot;</expression2>
        </check_equal>
        <stats name="testudo.macros.COMMA_IF_NOT_EMPTY" n_failed="0" n_total="3" n_errors="0" success="true"/>
        </test>
      <stats name="testudo.macros" n_failed="0" n_total="47" n_errors="0" success="true"/>
      </test>
      <test location="testarudo.ttd:14" name="testudo.sh" title="sh">
      <check_true location="testarudo.ttd:15" brief_location="15" success="true" prefix="">
        <expression1>true</expression1>
      </check_true>
      <stats name="testudo.sh" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
    <stats name="testudo" n_failed="144" n_total="2162" n_errors="9" success="false"/>
    </test>
    <test location="" name="tricorder" title="tricorder">
      <test location="" name="tricorder.medical" title="medical capabilities">
        <test location="doc_examples.ttd:100" name="tricorder.medical.switch on after creation" title="switch on after creation">
        <declare location="doc_examples.ttd:102" brief_location="102">Tricorder t</declare>
        <check_true location="doc_examples.ttd:103" brief_location="103" success="false" prefix="nay">
          <expression1>t.medical.is_on()</expression1>
        </check_true>
        <perform location="doc_examples.ttd:104" brief_location="104">t.medical.push_on_button()</perform>
        <check_true location="doc_examples.ttd:105" brief_location="105" success="true" prefix="">
          <expression1>t.medical.is_on()</expression1>
        </check_true>
        <stats name="tricorder.medical.switch on after creation" n_failed="1" n_total="2" n_errors="0" success="false"/>
        </test>
      <stats name="tricorder.medical" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
    <stats name="tricorder" n_failed="1" n_total="2" n_errors="0" success="false"/>
    </test>
    <test location="" name="tricorder3" title="tricorder3">
      <test location="" name="tricorder3.medical" title="medical capabilities">
        <test location="doc_examples.ttd:481" name="tricorder3.medical.switch on after creation" title="switch on after creation">
        <declare location="doc_examples.ttd:483" brief_location="483">Tricorder t</declare>
        <step_id location="doc_examples.ttd:484" brief_location="484" id="init_off"/>
        <check_true location="doc_examples.ttd:485" brief_location="485" success="false" prefix="nay">
          <expression1>t.medical.is_on()</expression1>
        </check_true>
        <stats name="tricorder3.medical.switch on after creation" n_failed="1" n_total="1" n_errors="0" success="false"/>
        </test>
      <stats name="tricorder3.medical" n_failed="1" n_total="1" n_errors="0" success="false"/>
      </test>
    <stats name="tricorder3" n_failed="1" n_total="1" n_errors="0" success="false"/>
    </test>
    <test location="" name="búri" title="Búri, father of gods">
      <test location="" name="búri.borr" title="Borr, son of Búri, father of Odin">
      <stats name="búri.borr" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
    <stats name="búri" n_failed="0" n_total="0" n_errors="0" success="true"/>
    </test>
    <test location="" name="examples" title="examples">
      <test location="doc_examples.ttd:57" name="examples.style" title="style">
      <declare location="doc_examples.ttd:60" brief_location="60">int a = 7</declare>
      <check_equal location="doc_examples.ttd:61" brief_location="61" success="true" prefix="">
        <expression1 value="9">a + 2</expression1>
        <expression2 value="9">9</expression2>
      </check_equal>
      <stats name="examples.style" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="" name="examples.tricorder" title="tricorder">
        <test location="" name="examples.tricorder.medical" title="medical capabilities">
          <test location="doc_examples.ttd:75" name="examples.tricorder.medical.switch on after creation" title="switch on after creation">
          <stats name="examples.tricorder.medical.switch on after creation" n_failed="0" n_total="0" n_errors="0" success="true"/>
          </test>
        <stats name="examples.tricorder.medical" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
      <stats name="examples.tricorder" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:190" name="examples.declare" title="declare">
      <declare location="doc_examples.ttd:193" brief_location="193">using namespace std</declare>
      <declare location="doc_examples.ttd:194" brief_location="194">pair&lt;int, double&gt; p = { 2, 3.5 }</declare>
      <stats name="examples.declare" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:198" name="examples.perform" title="perform">
      <perform location="doc_examples.ttd:202" brief_location="202">p.first += 10</perform>
      <stats name="examples.perform" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:206" name="examples.check true" title="check true">
      <check_true location="doc_examples.ttd:213" brief_location="213" success="true" prefix="">
        <expression1>dispersion_rate &lt; (1. / accuracy)</expression1>
      </check_true>
      <check_true location="doc_examples.ttd:214" brief_location="214" success="false" prefix="">
        <expression1>fine_dispersion_rate &lt; (1. / fine_accuracy)</expression1>
      </check_true>
      <stats name="examples.check true" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:218" name="examples.check false" title="check false">
      <check_true location="doc_examples.ttd:222" brief_location="222" success="true" prefix="nay">
        <expression1>d.left_door.is_open()</expression1>
      </check_true>
      <check_true location="doc_examples.ttd:223" brief_location="223" success="true" prefix="nay">
        <expression1>d.right_door.is_open()</expression1>
      </check_true>
      <check_true location="doc_examples.ttd:224" brief_location="224" success="false" prefix="nay">
        <expression1>d.fan.is_running()</expression1>
      </check_true>
      <stats name="examples.check false" n_failed="1" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:228" name="examples.check equal" title="check equal">
      <check_equal location="doc_examples.ttd:234" brief_location="234" success="true" prefix="">
        <expression1 value="36">captain_age</expression1>
        <expression2 value="36">26 + 10</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:235" brief_location="235" success="false" prefix="">
        <expression1 value="14">n_ships</expression1>
        <expression2 value="16">26 - 10</expression2>
      </check_equal>
      <stats name="examples.check equal" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:239" name="examples.check not equal" title="check not equal">
      <check_equal location="doc_examples.ttd:245" brief_location="245" success="false" prefix="nay">
        <expression1 value="1">numerator</expression1>
        <expression2 value="1">1</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:246" brief_location="246" success="true" prefix="nay">
        <expression1 value="0">denominator</expression1>
        <expression2 value="1">1</expression2>
      </check_equal>
      <stats name="examples.check not equal" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:250" name="examples.check equal automatic type" title="check equal automatic type">
      <check_equal location="doc_examples.ttd:255" brief_location="255" success="true" prefix="">
        <expression1 value="{{&quot;apple&quot;, 2}, {&quot;banana&quot;, 3}}">inventory</expression1>
        <expression2 value="{{&quot;apple&quot;, 2}, {&quot;banana&quot;, 3}}">map&lt;string, int&gt;{ { &quot;apple&quot;, 2 }, { &quot;banana&quot;, 3 } }</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:257" brief_location="257" success="true" prefix="">
        <expression1 value="{{&quot;apple&quot;, 2}, {&quot;banana&quot;, 3}}">inventory</expression1>
        <expression2 value="{{&quot;apple&quot;, 2}, {&quot;banana&quot;, 3}}">{ { &quot;apple&quot;, 2 }, { &quot;banana&quot;, 3 } }</expression2>
      </check_equal>
      <stats name="examples.check equal automatic type" n_failed="0" n_total="2" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:261" name="examples.100" title="100">
      <declare location="doc_examples.ttd:263" brief_location="263">int a = 1</declare>
      <declare location="doc_examples.ttd:264" brief_location="264">int b = 2</declare>
      <declare location="doc_examples.ttd:265" brief_location="265">int c = 5</declare>
      <check_true location="doc_examples.ttd:268" brief_location="268" success="false" prefix="">
        <expression1>are_equal(a + b, c)</expression1>
        <expressionv value="1, 2, 3, 5">a, b, a + b, c</expressionv>
      </check_true>
      <declare location="doc_examples.ttd:271" brief_location="271">double x = 1.</declare>
      <declare location="doc_examples.ttd:272" brief_location="272">double y = 2.01</declare>
      <check_true location="doc_examples.ttd:276" brief_location="276" success="false" prefix="">
        <expression1>are_approx(2 * x, y)</expression1>
        <expressionv value="1, 2, 2.01">x, 2 * x, y</expressionv>
      </check_true>
      <check_true location="doc_examples.ttd:278" brief_location="278" success="true" prefix="">
        <expression1>are_approx(2 * x, y, .1)</expression1>
        <expressionv value="1, 2, 2.01">x, 2 * x, y</expressionv>
      </check_true>
      <stats name="examples.100" n_failed="2" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:282" name="examples.check approx" title="check approx">
      <check_approx location="doc_examples.ttd:289" brief_location="289" success="true" prefix="" max_error="eps">
        <expression1 value="3.14159">computed_pi</expression1>
        <expression2 value="3.14159">2. * asin(1.)</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:290" brief_location="290" success="false" prefix="" max_error="eps">
        <expression1 value="2.71834">computed_e</expression1>
        <expression2 value="2.71828">exp(1.)</expression2>
      </check_approx>
      <stats name="examples.check approx" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:294" name="examples.check not approx" title="check not approx">
      <check_approx location="doc_examples.ttd:301" brief_location="301" success="true" prefix="nay" max_error="eps">
        <expression1 value="-1.00179">singularity</expression1>
        <expression2 value="-1">-1.</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:302" brief_location="302" success="false" prefix="nay" max_error="eps">
        <expression1 value="2">pole</expression1>
        <expression2 value="2">2.</expression2>
      </check_approx>
      <stats name="examples.check not approx" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:306" name="examples.define approx epsilon" title="define approx epsilon">
      <declare location="doc_examples.ttd:309" brief_location="309">double approx_epsilon=1e-3</declare>
      <stats name="examples.define approx epsilon" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:314" name="examples.set approx epsilon" title="set approx epsilon">
      <perform location="doc_examples.ttd:317" brief_location="317">approx_epsilon=1e-3</perform>
      <stats name="examples.set approx epsilon" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:321" name="examples.show approx epsilon" title="show approx epsilon">
      <show_value location="doc_examples.ttd:324" brief_location="324">
        <expression1 value="1e-06">approx_epsilon</expression1>
      </show_value>
      <stats name="examples.show approx epsilon" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:328" name="examples.check approx tol" title="check approx tol">
      <check_approx location="doc_examples.ttd:333" brief_location="333" success="false" prefix="" max_error="eps">
        <expression1 value="3.64">area</expression1>
        <expression2 value="3.5">3.5</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:334" brief_location="334" success="false" prefix="" max_error=".1">
        <expression1 value="3.64">area</expression1>
        <expression2 value="3.5">3.5</expression2>
      </check_approx>
      <check_approx location="doc_examples.ttd:335" brief_location="335" success="true" prefix="" max_error=".2">
        <expression1 value="3.64">area</expression1>
        <expression2 value="3.5">3.5</expression2>
      </check_approx>
      <stats name="examples.check approx tol" n_failed="2" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:339" name="examples.check show" title="check show">
      <check_true location="doc_examples.ttd:347" brief_location="347" success="true" prefix="">
        <expression1>p + q &lt; r</expression1>
        <expressionv value="1, 2, 5">p, q, r</expressionv>
      </check_true>
      <check_true location="doc_examples.ttd:348" brief_location="348" success="false" prefix="">
        <expression1>q + r &lt; s</expression1>
        <expressionv value="2, 5, 6">q, r, s</expressionv>
      </check_true>
      <stats name="examples.check show" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:352" name="examples.check show other" title="check show other">
      <check_equal location="doc_examples.ttd:363" brief_location="363" success="true" prefix="">
        <expression1 value="25">a * a + b * b</expression1>
        <expression2 value="25">c * c</expression2>
        <expressionv value="3, 4, 5">a, b, c</expressionv>
      </check_equal>
      <check_equal location="doc_examples.ttd:364" brief_location="364" success="false" prefix="">
        <expression1 value="7">a + b</expression1>
        <expression2 value="5">c</expression2>
        <expressionv value="3, 4">a, b</expressionv>
      </check_equal>
      <check_approx location="doc_examples.ttd:365" brief_location="365" success="false" prefix="" max_error=".1">
        <expression1 value="15.1">v</expression1>
        <expression2 value="15.9524">dist / t</expression2>
        <expressionv value="100.5, 6.3">dist, t</expressionv>
      </check_approx>
      <stats name="examples.check show other" n_failed="2" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:369" name="examples.check explain" title="check explain">
      <check_true location="doc_examples.ttd:378" brief_location="378" success="true" prefix="">
        <expression1>failed_tasks.empty()</expression1>
        <explanation>0 tasks failed</explanation>
      </check_true>
      <check_true location="doc_examples.ttd:380" brief_location="380" success="false" prefix="">
        <expression1>postponed &gt; 0</expression1>
        <explanation>should be postponing non-essential tasks {&quot;not today&quot;, &quot;procras&quot;}</explanation>
      </check_true>
      <check_equal location="doc_examples.ttd:383" brief_location="383" success="false" prefix="">
        <expression1 value="5">postponed + done</expression1>
        <expression2 value="6">total</expression2>
        <expressionv value="0, 5">postponed, done</expressionv>
        <explanation>all tasks should be either done or postponed</explanation>
      </check_equal>
      <stats name="examples.check explain" n_failed="2" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:388" name="examples.check try catch" title="check try catch">
      <declare location="doc_examples.ttd:393" brief_location="393">my_list&lt;int&gt; numbers</declare>
      <try location="doc_examples.ttd:394" brief_location="394">numbers.first_element()</try>
      <catch location="" brief_location="" exception_type="" success="true">empty list</catch>
      <try location="doc_examples.ttd:395" brief_location="395">numbers.last_element()</try>
      <catch location="" brief_location="" exception_type="" success="false">&lt;no exception&gt;</catch>
      <stats name="examples.check try catch" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:399" name="examples.check try catch exception" title="check try catch exception">
      <declare location="doc_examples.ttd:402" brief_location="402">my_list&lt;int&gt; numbers</declare>
      <try location="doc_examples.ttd:403" brief_location="403">numbers.first_element()</try>
      <catch location="" brief_location="" exception_type="my_list_exception" success="true">empty list</catch>
      <try location="doc_examples.ttd:404" brief_location="404">numbers.first_element()</try>
      <catch location="" brief_location="" exception_type="my_map_exception" success="false">&lt;unexpected exception&gt;</catch>
      <uncaught_exception>empty list</uncaught_exception>
      <stats name="examples.check try catch exception" n_failed="1" n_total="2" n_errors="1" success="false"/>
      </test>
      <test location="doc_examples.ttd:411" name="examples.show value" title="show value">
      <show_value location="doc_examples.ttd:417" brief_location="417">
        <expression1 value="203.9">helicopter.remaining_fuel()</expression1>
      </show_value>
      <show_value location="doc_examples.ttd:418" brief_location="418">
        <expression1 value="23.1, -57.3, 789.4">longitude, latitude, altitude</expression1>
      </show_value>
      <stats name="examples.show value" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:422" name="examples.show value unquoted" title="show value unquoted">
      <show_value location="doc_examples.ttd:427" brief_location="427">
        <expression1 value="&quot;Yggdrasil&quot;">tree.name()</expression1>
      </show_value>
      <show_value location="doc_examples.ttd:428" brief_location="428">
        <expression1 value="Yggdrasil">testudo::unquoted(tree.name())</expression1>
      </show_value>
      <stats name="examples.show value unquoted" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:432" name="examples.in scope" title="in scope">
      <declare location="doc_examples.ttd:435" brief_location="435">LoggedDestruction ld1(&quot;1&quot;)</declare>
      <check_equal location="doc_examples.ttd:436" brief_location="436" success="true" prefix="">
        <expression1 value="0">LoggedDestruction::n_destructions()</expression1>
        <expression2 value="0">0</expression2>
      </check_equal>
        <scope location="doc_examples.ttd:437" brief_location="437" name="outer scope">
        <declare location="doc_examples.ttd:438" brief_location="438">LoggedDestruction ld2(&quot;2&quot;)</declare>
          <scope location="doc_examples.ttd:439" brief_location="439" name="">
          <declare location="doc_examples.ttd:440" brief_location="440">LoggedDestruction ld3(&quot;3&quot;)</declare>
          </scope>
        <check_equal location="doc_examples.ttd:442" brief_location="442" success="true" prefix="">
          <expression1 value="1">LoggedDestruction::n_destructions()</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        </scope>
      <check_equal location="doc_examples.ttd:444" brief_location="444" success="true" prefix="">
        <expression1 value="2">LoggedDestruction::n_destructions()</expression1>
        <expression2 value="2">2</expression2>
      </check_equal>
      <stats name="examples.in scope" n_failed="0" n_total="3" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:448" name="examples.with declare" title="with declare">
        <declare_scope location="doc_examples.ttd:453" brief_location="453" declare="auto answer = client.request(&quot;get license&quot;)">
        <check_true location="doc_examples.ttd:454" brief_location="454" success="true" prefix="">
          <expression1>answer.valid and answer.ok</expression1>
        </check_true>
        <check_equal location="doc_examples.ttd:455" brief_location="455" success="true" prefix="">
          <expression1 value="&quot;res://punk_license&quot;">answer.text</expression1>
          <expression2 value="&quot;res://punk_license&quot;">&quot;res://punk_license&quot;</expression2>
        </check_equal>
        </declare_scope>
        <declare_scope location="doc_examples.ttd:457" brief_location="457" declare="auto answer = client.request(&quot;reset&quot;)">
        <check_true location="doc_examples.ttd:458" brief_location="458" success="true" prefix="">
          <expression1>answer.valid and answer.ok</expression1>
        </check_true>
        </declare_scope>
      <stats name="examples.with declare" n_failed="0" n_total="3" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:462" name="examples.with declare several" title="with declare several">
        <declare_scope location="doc_examples.ttd:467" brief_location="467" declare="auto [what, n] = tuple{ &quot;sin&quot;, 77 * 7 }">
        <check_equal location="doc_examples.ttd:468" brief_location="468" success="true" prefix="">
          <expression1 value="&quot;sin&quot;">action</expression1>
          <expression2 value="&quot;sin&quot;">what</expression2>
        </check_equal>
        <check_true location="doc_examples.ttd:469" brief_location="469" success="false" prefix="">
          <expression1>times&lt;=n</expression1>
          <expressionv value="542, 539">times, n</expressionv>
        </check_true>
        </declare_scope>
      <stats name="examples.with declare several" n_failed="1" n_total="2" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:499" name="examples.tout" title="tout">
      <text location="doc_examples.ttd:503" brief_location="503">the speed hasn&apos;t been updated yet</text>
      <text location="doc_examples.ttd:504" brief_location="504">it&apos;s still 50km/h</text>
      <text location="doc_examples.ttd:505" brief_location="505">here&apos;s a multiline list:&#xa;  1. you can end a line with a \n...&#xa;  2. ... or with an endl&#xa;  3. but no need to finish the last line</text>
      <stats name="examples.tout" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:512" name="examples.print break" title="print break">
      <check_true location="doc_examples.ttd:518" brief_location="518" success="true" prefix="">
        <expression1>all_tasks_assigned</expression1>
      </check_true>
      <separator location="doc_examples.ttd:519" brief_location="519"/>
      <perform location="doc_examples.ttd:520" brief_location="520">n_tasks_done = 0</perform>
      <stats name="examples.print break" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:525" name="examples.200" title="200">
      <declare location="doc_examples.ttd:531" brief_location="531">LoggedInt n_cases</declare>
      <perform location="doc_examples.ttd:536" brief_location="536">(void) n_cases</perform>
      <declare location="doc_examples.ttd:538" brief_location="538">Terrible terrible_p</declare>
      <declare location="doc_examples.ttd:539" brief_location="539">ostringstream log</declare>
      <perform location="doc_examples.ttd:545" brief_location="545">terrible_p.report()</perform>
      <perform location="doc_examples.ttd:550" brief_location="550">(void) terrible_p</perform>
      <stats name="examples.200" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:553" name="examples.tfos" title="tfos">
      <show_value location="doc_examples.ttd:556" brief_location="556">
        <expression1 value="31">31</expression1>
      </show_value>
      <perform location="doc_examples.ttd:557" brief_location="557">tfos &lt;&lt; hex &lt;&lt; setw(8)</perform>
      <show_value location="doc_examples.ttd:558" brief_location="558">
        <expression1 value="      1f">31</expression1>
      </show_value>
      <stats name="examples.tfos" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:562" name="examples.tfos to text" title="tfos to text">
      <declare location="doc_examples.ttd:565" brief_location="565">int h = 26</declare>
      <perform location="doc_examples.ttd:566" brief_location="566">tfos &lt;&lt; hex</perform>
      <check_equal location="doc_examples.ttd:567" brief_location="567" success="true" prefix="">
        <expression1 value="&quot;1a&quot;">testudo::to_text(tfos, h)</expression1>
        <expression2 value="&quot;1a&quot;">&quot;1a&quot;</expression2>
      </check_equal>
      <stats name="examples.tfos to text" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:571" name="examples.unexpected exception" title="unexpected exception">
      <declare location="doc_examples.ttd:574" brief_location="574">my_list&lt;int&gt; numbers</declare>
      <uncaught_exception>empty list</uncaught_exception>
      <stats name="examples.unexpected exception" n_failed="0" n_total="0" n_errors="1" success="false"/>
      </test>
      <test location="doc_examples.ttd:583" name="examples.provided" title="provided">
      <check_true location="doc_examples.ttd:593" brief_location="593" success="true" prefix="">
        <expression1>res.acquired()</expression1>
      </check_true>
        <indent location="" brief_location="">
        <check_equal location="doc_examples.ttd:594" brief_location="594" success="true" prefix="">
          <expression1 value="10">res.size()</expression1>
          <expression2 value="10">10</expression2>
        </check_equal>
        </indent>
      <check_equal location="doc_examples.ttd:595" brief_location="595" success="true" prefix="">
        <expression1 value="2">totals_size</expression1>
        <expression2 value="2">2</expression2>
      </check_equal>
        <indent location="" brief_location="">
        <check_true location="doc_examples.ttd:596" brief_location="596" success="true" prefix="">
          <expression1>totals[0] &gt; 0</expression1>
          <expressionv value="2">totals[0]</expressionv>
        </check_true>
        <check_true location="doc_examples.ttd:597" brief_location="597" success="false" prefix="">
          <expression1>totals[1] &gt; totals[0]</expression1>
          <expressionv value="2, 1">totals[0], totals[1]</expressionv>
        </check_true>
        </indent>
      <check_true location="doc_examples.ttd:600" brief_location="600" success="error" prefix="">
        <expression1>all_jobs_done</expression1>
      </check_true>
        <indent location="" brief_location="">
        </indent>
      <stats name="examples.provided" n_failed="1" n_total="5" n_errors="1" success="false"/>
      </test>
      <test location="doc_examples.ttd:646" name="examples.with data" title="with data">
      <declare location="doc_examples.ttd:648" brief_location="648">auto is_even = [](auto const &amp;a) { return ((a % 2) == 0); }</declare>
      <declare location="doc_examples.ttd:650" brief_location="650">list&lt;int&gt; even_numbers{ 2, 4, 8 }</declare>
        <with location="doc_examples.ttd:651" brief_location="651" var="x" container_first="even_numbers" container_rest="" summary="x in even_numbers">
        <check_true location="doc_examples.ttd:652" brief_location="652" success="with" prefix="">
          <expression1>is_even(x)</expression1>
          <expressionv value="">x</expressionv>
        </check_true>
        <with_stats name="x in even_numbers" n_failed="0" n_total="3" n_errors="0" success="true"/>
        </with>
        <with location="doc_examples.ttd:653" brief_location="653" var="x" container_first="even_numbers" container_rest="" summary="x in even_numbers">
        <declare location="doc_examples.ttd:655" brief_location="655">int y = x + 1</declare>
        <check_true location="doc_examples.ttd:656" brief_location="656" success="with" prefix="nay">
          <expression1>is_even(y)</expression1>
          <expressionv value="">y</expressionv>
        </check_true>
        <with_stats name="x in even_numbers" n_failed="0" n_total="3" n_errors="0" success="true"/>
        </with>
        <with location="doc_examples.ttd:658" brief_location="658" var="x" container_first="even_numbers" container_rest="" summary="x in even_numbers">
          <with location="doc_examples.ttd:659" brief_location="659" var="y" container_first="{ 2, 4, 9 }" container_rest="" summary="y in {...}">
          <check_equal location="doc_examples.ttd:660" brief_location="660" success="with" prefix="">
            <expression1 value="">x % 2</expression1>
            <expression2 value="">y % 2</expression2>
            <expressionv value="">x, y</expressionv>
          </check_equal>
            <with_results>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="0">x % 2</expression1>
              <expression2 value="1">y % 2</expression2>
              <expressionv value="2, 9">x, y</expressionv>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="0">x % 2</expression1>
              <expression2 value="1">y % 2</expression2>
              <expressionv value="4, 9">x, y</expressionv>
            </check_equal>
            <check_equal location="" brief_location="" success="false" prefix="">
              <expression1 value="0">x % 2</expression1>
              <expression2 value="1">y % 2</expression2>
              <expressionv value="8, 9">x, y</expressionv>
            </check_equal>
            </with_results>
          </with>
        <with_stats name="x in even_numbers" n_failed="3" n_total="9" n_errors="0" success="false"/>
        </with>
      <stats name="examples.with data" n_failed="3" n_total="15" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:664" name="examples.with data structured binding" title="with data structured binding">
      <declare location="doc_examples.ttd:666" brief_location="666">list&lt;tuple&lt;int, int, int&gt;&gt; list_of_sums{ { 1, 3, 4 }, { 3, 7, 11 }, { 10, 15, 25 } }</declare>
        <with location="doc_examples.ttd:670" brief_location="670" var="(a, b, sum)" container_first="list_of_sums" container_rest="" summary="(a, b, sum) in list_of_sums">
        <check_equal location="doc_examples.ttd:671" brief_location="671" success="with" prefix="">
          <expression1 value="">sum</expression1>
          <expression2 value="">a + b</expression2>
          <expressionv value="">a, b, sum</expressionv>
        </check_equal>
          <with_results>
          <check_equal location="" brief_location="" success="false" prefix="">
            <expression1 value="11">sum</expression1>
            <expression2 value="10">a + b</expression2>
            <expressionv value="3, 7, 11">a, b, sum</expressionv>
          </check_equal>
          </with_results>
        <with_stats name="(a, b, sum) in list_of_sums" n_failed="1" n_total="3" n_errors="0" success="false"/>
        </with>
      <stats name="examples.with data structured binding" n_failed="1" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:675" name="examples.with multiline data" title="with multiline data">
        <with location="doc_examples.ttd:677" brief_location="677" var="(a, b, sum)" container_first="list&lt;tuple&lt;int, int, int&gt;&gt; {" container_rest="{ 1, 3, 4 },&#xa;{ 3, 7, 11 },&#xa;{ 10, 15, 25 } }" summary="(a, b, sum) in list&lt;tuple&lt;int, int, int&gt;&gt; {...}">
        <check_equal location="doc_examples.ttd:681" brief_location="681" success="with" prefix="">
          <expression1 value="">sum</expression1>
          <expression2 value="">a + b</expression2>
          <expressionv value="">a, b, sum</expressionv>
        </check_equal>
          <with_results>
          <check_equal location="" brief_location="" success="false" prefix="">
            <expression1 value="11">sum</expression1>
            <expression2 value="10">a + b</expression2>
            <expressionv value="3, 7, 11">a, b, sum</expressionv>
          </check_equal>
          </with_results>
        <with_stats name="(a, b, sum) in list&lt;tuple&lt;int, int, int&gt;&gt; {...}" n_failed="1" n_total="3" n_errors="0" success="false"/>
        </with>
      <stats name="examples.with multiline data" n_failed="1" n_total="3" n_errors="0" success="false"/>
      </test>
      <test location="doc_examples.ttd:708" name="examples.data for with data loop" title="data for with data loop">
      <declare location="doc_examples.ttd:710" brief_location="710">auto generate_20_20 = []() { return random_vector2i(20, 20); }</declare>
        <with location="doc_examples.ttd:713" brief_location="713" var="v" container_first="generate_data(100, generate_20_20)" container_rest="" summary="v in generate_data(100, generate_20_20)">
          <with location="doc_examples.ttd:714" brief_location="714" var="w" container_first="generate_data(100, generate_20_20)" container_rest="" summary="w in generate_data(100, generate_20_20)">
          <check_equal location="doc_examples.ttd:715" brief_location="715" success="with" prefix="">
            <expression1 value="">v + w</expression1>
            <expression2 value="">w + v</expression2>
          </check_equal>
          </with>
        <with_stats name="v in generate_data(100, generate_20_20)" n_failed="0" n_total="10000" n_errors="0" success="true"/>
        </with>
      <stats name="examples.data for with data loop" n_failed="0" n_total="10000" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:719" name="examples.generate data tuple" title="generate data tuple">
      <declare location="doc_examples.ttd:721" brief_location="721">auto generate_20_20 = []() { return random_vector2i(20, 20); }</declare>
        <with location="doc_examples.ttd:724" brief_location="724" var="(v, w)" container_first="generate_data_tuple(100, generate_20_20, generate_20_20)" container_rest="" summary="(v, w) in generate_data_tuple(100, generate_20_20, generate_20_20)">
        <check_equal location="doc_examples.ttd:728" brief_location="728" success="with" prefix="">
          <expression1 value="">v + w</expression1>
          <expression2 value="">w + v</expression2>
        </check_equal>
        <with_stats name="(v, w) in generate_data_tuple(100, generate_20_20, generate_20_20)" n_failed="0" n_total="100" n_errors="0" success="true"/>
        </with>
      <stats name="examples.generate data tuple" n_failed="0" n_total="100" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:732" name="examples.cartesian product" title="cartesian product">
      <declare location="doc_examples.ttd:734" brief_location="734">auto generate_20_20 = []() { return random_vector2i(20, 20); }</declare>
        <with location="doc_examples.ttd:737" brief_location="737" var="(v, w)" container_first="cartesian_product( generate_data(100, generate_20_20), generate_data(100, generate_20_20))" container_rest="" summary="(v, w) in cartesian_product( generate_data(100, generate_20_20), generate_data(100, generate_20_20))">
        <check_equal location="doc_examples.ttd:741" brief_location="741" success="with" prefix="">
          <expression1 value="">v + w</expression1>
          <expression2 value="">w + v</expression2>
        </check_equal>
        <with_stats name="(v, w) in cartesian_product( generate_data(100, generate_20_20), generate_data(100, generate_20_20))" n_failed="0" n_total="10000" n_errors="0" success="true"/>
        </with>
      <stats name="examples.cartesian product" n_failed="0" n_total="10000" n_errors="0" success="true"/>
      </test>
      <test location="" name="examples.mock_turtle" title="Mock Turtle">
        <test location="doc_examples.ttd:933" name="examples.mock_turtle.Victorian recipe" title="Victorian recipe">
        <declare location="doc_examples.ttd:935" brief_location="935">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <declare location="doc_examples.ttd:936" brief_location="936">bool is_tasty_now = true</declare>
        <perform location="doc_examples.ttd:937" brief_location="937">soup_mock-&gt;set_ret_default( is_tasty, [&amp;is_tasty_now]() {SPACE return is_tasty_now; SPACE})</perform>
        <stats name="examples.mock_turtle.Victorian recipe" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
        <test location="doc_examples.ttd:956" name="examples.mock_turtle.recipe" title="recipe">
        <declare location="doc_examples.ttd:958" brief_location="958">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <perform location="doc_examples.ttd:960" brief_location="960">soup_mock-&gt;schedule_ret(temp, 20, 40, 60, 80, 100)</perform>
        <stats name="examples.mock_turtle.recipe" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
        <test location="doc_examples.ttd:1014" name="examples.mock_turtle.mock turtle recipe 100" title="mock turtle recipe 100">
        <declare location="doc_examples.ttd:1017" brief_location="1017">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="doc_examples.ttd:1020" brief_location="1020" success="false" prefix="">
          <expression1 value="{}">soup_mock-&gt;logged_args(add_ingr)</expression1>
          <expression2 value="{{&quot;calf brains&quot;, 4}, {&quot;pork liver&quot;, 3}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}, {&quot;water&quot;, 1}}">{ { &quot;calf brains&quot;, 4 }, { &quot;pork liver&quot;, 3 }, { &quot;water&quot;, 1 }, { &quot;water&quot;, 1 }, { &quot;water&quot;, 1 } }</expression2>
        </check_equal>
        <check_true location="doc_examples.ttd:1030" brief_location="1030" success="error" prefix="">
          <expression1>soup_mock-&gt;log_size(add_ingr) &gt;= 3</expression1>
        </check_true>
          <indent location="" brief_location="">
          </indent>
        <check_true location="doc_examples.ttd:1037" brief_location="1037" success="error" prefix="">
          <expression1>soup_mock-&gt;log_size(add_ingr) &gt;= 3</expression1>
        </check_true>
          <indent location="" brief_location="">
          </indent>
        <stats name="examples.mock_turtle.mock turtle recipe 100" n_failed="1" n_total="1" n_errors="2" success="false"/>
        </test>
        <test location="doc_examples.ttd:1043" name="examples.mock_turtle.mock turtle recipe 200" title="mock turtle recipe 200">
        <declare location="doc_examples.ttd:1046" brief_location="1046">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="doc_examples.ttd:1049" brief_location="1049" success="false" prefix="">
          <expression1 value="{}">soup_mock-&gt;logged_ret(is_tasty)</expression1>
          <expression2 value="{{true}}">{ { true } }</expression2>
        </check_equal>
        <stats name="examples.mock_turtle.mock turtle recipe 200" n_failed="1" n_total="1" n_errors="0" success="false"/>
        </test>
        <test location="doc_examples.ttd:1053" name="examples.mock_turtle.mock turtle recipe 300" title="mock turtle recipe 300">
        <declare location="doc_examples.ttd:1056" brief_location="1056">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="doc_examples.ttd:1059" brief_location="1059" success="false" prefix="">
          <expression1 value="{}">soup_mock-&gt;logged_ret_args(add_ingr)</expression1>
          <expression2 value="{{{4}, {&quot;calf brains&quot;, 4}}, {{7}, {&quot;pork liver&quot;, 3}}, {{8}, {&quot;water&quot;, 1}}, {{9}, {&quot;water&quot;, 1}}, {{10}, {&quot;water&quot;, 1}}}">{ { { 4 }, { &quot;calf brains&quot;, 4 } }, { { 7 }, { &quot;pork liver&quot;, 3 } }, { { 8 }, { &quot;water&quot;, 1 } }, { { 9 }, { &quot;water&quot;, 1 } }, { { 10 }, { &quot;water&quot;, 1 } } }</expression2>
        </check_equal>
        <stats name="examples.mock_turtle.mock turtle recipe 300" n_failed="1" n_total="1" n_errors="0" success="false"/>
        </test>
        <test location="doc_examples.ttd:1068" name="examples.mock_turtle.mock turtle recipe 400" title="mock turtle recipe 400">
        <declare location="doc_examples.ttd:1071" brief_location="1071">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <check_equal location="doc_examples.ttd:1074" brief_location="1074" success="false" prefix="">
          <expression1 value="0">soup_mock-&gt;log_size(is_tasty)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <stats name="examples.mock_turtle.mock turtle recipe 400" n_failed="1" n_total="1" n_errors="0" success="false"/>
        </test>
        <test location="doc_examples.ttd:1102" name="examples.mock_turtle.mock turtle recipe 500" title="mock turtle recipe 500">
        <declare location="doc_examples.ttd:1104" brief_location="1104">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
        <declare location="doc_examples.ttd:1105" brief_location="1105">CallLedger cl</declare>
        <declare location="doc_examples.ttd:1106" brief_location="1106">call_ledger_report_to(*soup_mock, &amp;cl)</declare>
        <declare location="doc_examples.ttd:1107" brief_location="1107">auto it = iterate(cl)</declare>
          <declare_scope location="doc_examples.ttd:1109" brief_location="1109" declare="auto call = it.get_call(*soup_mock, add_ingr)">
          <check_equal location="doc_examples.ttd:1110" brief_location="1110" success="false" prefix="">
            <expression1 value="add_ingr:invalid">call</expression1>
            <expression2 value="{7 (&quot;water&quot;, 1)}">{ 7 }, { &quot;water&quot;, 1 }</expression2>
          </check_equal>
          </declare_scope>
          <declare_scope location="doc_examples.ttd:1114" brief_location="1114" declare="auto call = it.pop_call(*soup_mock, add_ingr)">
          <check_equal location="doc_examples.ttd:1115" brief_location="1115" success="false" prefix="">
            <expression1 value="add_ingr:invalid">call</expression1>
            <expression2 value="{7 (&quot;water&quot;, 1)}">{ 7 }, { &quot;water&quot;, 1 }</expression2>
          </check_equal>
          </declare_scope>
        <stats name="examples.mock_turtle.mock turtle recipe 500" n_failed="2" n_total="2" n_errors="0" success="false"/>
        </test>
        <test location="doc_examples.ttd:1119" name="examples.mock_turtle.mock turtle recipe 600" title="mock turtle recipe 600">
        <declare location="doc_examples.ttd:1122" brief_location="1122">auto soup_mock = make_shared&lt;SoupMock&gt;()</declare>
          <declare_scope location="doc_examples.ttd:1124" brief_location="1124" declare="auto it = iterate(soup_mock)">
            <declare_scope location="doc_examples.ttd:1125" brief_location="1125" declare="auto call = it.pop_call(*soup_mock, add_ingr)">
            </declare_scope>
          </declare_scope>
        <uncaught_exception>invalid call record</uncaught_exception>
        <stats name="examples.mock_turtle.mock turtle recipe 600" n_failed="0" n_total="0" n_errors="1" success="false"/>
        </test>
      <stats name="examples.mock_turtle" n_failed="6" n_total="6" n_errors="3" success="false"/>
      </test>
      <test location="" name="examples.namable" title="namable">
        <test location="doc_examples.ttd:979" name="examples.namable.exception 2nd set_name_is_good()" title="exception 2nd set_name_is_good()">
        <declare location="doc_examples.ttd:981" brief_location="981">MockNamable namable</declare>
        <perform location="doc_examples.ttd:983" brief_location="983">namable.schedule_ret(set_name_is_good, true, throw_exception(runtime_error(&quot;already named&quot;)))</perform>
        <stats name="examples.namable.exception 2nd set_name_is_good()" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
        <test location="doc_examples.ttd:992" name="examples.namable.exception 2nd create()" title="exception 2nd create()">
        <declare location="doc_examples.ttd:993" brief_location="993">MockNamable namable</declare>
        <perform location="doc_examples.ttd:995" brief_location="995">namable.schedule_ret(create, void_v, throw_exception(runtime_error(&quot;already created&quot;)))</perform>
        <stats name="examples.namable.exception 2nd create()" n_failed="0" n_total="0" n_errors="0" success="true"/>
        </test>
      <stats name="examples.namable" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:1089" name="examples.ledgers" title="ledgers">
      <declare location="doc_examples.ttd:1092" brief_location="1092">CallLedger cl</declare>
      <declare location="doc_examples.ttd:1093" brief_location="1093">MockLevel lev_1(12)</declare>
      <perform location="doc_examples.ttd:1094" brief_location="1094">call_ledger_report_to(lev_1, &amp;cl)</perform>
      <declare location="doc_examples.ttd:1095" brief_location="1095">auto lev_2 = make_shared&lt;MockLevel&gt;(47)</declare>
      <perform location="doc_examples.ttd:1096" brief_location="1096">call_ledger_report_to(lev_2, &amp;cl)</perform>
      <stats name="examples.ledgers" n_failed="0" n_total="0" n_errors="0" success="true"/>
      </test>
      <test location="doc_examples.ttd:1149" name="examples.call_ledger_report_to" title="call_ledger_report_to">
      <declare location="doc_examples.ttd:1152" brief_location="1152">CallLedger cl</declare>
      <declare location="doc_examples.ttd:1153" brief_location="1153">MockLevel lev_1(12)</declare>
      <perform location="doc_examples.ttd:1154" brief_location="1154">call_ledger_report_to(lev_1, &amp;cl)</perform>
      <declare location="doc_examples.ttd:1155" brief_location="1155">MockLevel lev_2(47)</declare>
      <perform location="doc_examples.ttd:1156" brief_location="1156">call_ledger_report_to(lev_2, &amp;cl)</perform>
      <perform location="doc_examples.ttd:1157" brief_location="1157">equalize(lev_1, lev_2)</perform>
      <check_equal location="doc_examples.ttd:1158" brief_location="1158" success="false" prefix="">
        <expression1 value="-1">lev_1.readout()</expression1>
        <expression2 value="52">52</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:1159" brief_location="1159" success="false" prefix="">
        <expression1 value="-1">lev_2.readout()</expression1>
        <expression2 value="52">52</expression2>
      </check_equal>
      <declare location="doc_examples.ttd:1160" brief_location="1160">auto it = iterate(cl)</declare>
      <perform location="doc_examples.ttd:1162" brief_location="1162">while (it.method_name() not_eq &quot;large_up&quot;) it.next()</perform>
      <check_equal location="doc_examples.ttd:1164" brief_location="1164" success="true" prefix="">
        <expression1 value="&quot;lev_1&quot;">it.mock_name()</expression1>
        <expression2 value="&quot;lev_1&quot;">&quot;lev_1&quot;</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:1165" brief_location="1165" success="true" prefix="">
        <expression1 value="&quot;large_up&quot;">it.method_name()</expression1>
        <expression2 value="&quot;large_up&quot;">&quot;large_up&quot;</expression2>
      </check_equal>
      <perform location="doc_examples.ttd:1166" brief_location="1166">it.next()</perform>
      <check_equal location="doc_examples.ttd:1167" brief_location="1167" success="false" prefix="">
        <expression1 value="&quot;lev_2&quot;">it.mock_name()</expression1>
        <expression2 value="&quot;lev_1&quot;">&quot;lev_1&quot;</expression2>
      </check_equal>
      <check_equal location="doc_examples.ttd:1168" brief_location="1168" success="false" prefix="">
        <expression1 value="&quot;large_up&quot;">it.method_name()</expression1>
        <expression2 value="&quot;readout&quot;">&quot;readout&quot;</expression2>
      </check_equal>
      <stats name="examples.call_ledger_report_to" n_failed="4" n_total="6" n_errors="0" success="false"/>
      </test>
      <test location="" name="examples.esperanto_test" title="Esperanto test">
        <test location="doc_examples.ttd:1423" name="examples.esperanto_test.numbers" title="numbers">
        <declare location="doc_examples.ttd:1425" brief_location="1425">auto const dictionary = vortaro</declare>
        <check_equal location="doc_examples.ttd:1426" brief_location="1426" success="true" prefix="">
          <expression1 value="1">dictionary.at(&quot;unu&quot;)</expression1>
          <expression2 value="1">1</expression2>
        </check_equal>
        <stats name="examples.esperanto_test.numbers" n_failed="0" n_total="1" n_errors="0" success="true"/>
        </test>
      <stats name="examples.esperanto_test" n_failed="0" n_total="1" n_errors="0" success="true"/>
      </test>
    <stats name="examples" n_failed="34" n_total="20183" n_errors="6" success="false"/>
    </test>
  <stats name="/" n_failed="184" n_total="22366" n_errors="15" success="false"/>
  </test>
</testudo>
