#ifndef NAUTOTEST

#include <testudo/testudo_lc.h>
#include <testudo/testudo_ext.h>

namespace {

  using namespace std;

  // a very short test to check the cartouche tag being longer than the
  // cartouched info
  define_top_test("testudo", "sh", 9999) {
    check(true)_true;
  }

  define_top_test_node("testudo", (testarudo, "testarudo tests"), 10);

  define_test(testarudo, "simple testarudo tests") {
    check(true)_true;
    check(false)_true;
    check(true)_false;
    check(false)_false;
    check(2+2==5)_false;
  }

  define_test_node(testarudo, (complex, "complex testarudo tests"));

  define_test(complex, "difficult test") {
    check(7)_equal(8);
    check(7)_not_equal(8);
    check("un chat")_equal(string("un chat"));
  }

  define_test(complex, "complicated test") {
    check("it's")_equal("complicated");
    check(6*9)_equal(42);
  }

  define_test(complex, "test_with_error") {
    check(22+22)_equal(44);
    perform(throw runtime_error("see if you can catch me!"));
    print_text("this should never appear");
    check("this should never appear either")_equal(string());
  }

  define_test(complex, "penultimate test") {
    check("there's nothing")_equal("penultimate");
  }

  template <typename T>
  auto gt(T &&t) { return predicate_c_a((t), a>t); }
  template <typename T>
  auto lt(T &&t) { return predicate_c_a((t), a<t); }
  template <typename T>
  auto ge(T &&t) { return predicate_c_a((t), a>=t); }
  template <typename T>
  auto le(T &&t) { return predicate_c_a((t), a<=t); }
  template <typename T>
  auto eq(T &&t) { return predicate_c_a((t), a==t); }
  template <typename T>
  auto ne(T &&t) { return predicate_c_a((t), a not_eq t); }

  define_test(complex, "\"verify\" syntax") {
    declare(auto is_even=predicate_a((a%2)==0));
    declare(auto is_multiple_of=
            [](auto n) { return predicate_c_a((n), (a%n)==0); });
    check(2*4)_verify(is_even);
    check(2*4+1)_verify(is_even);
    check(2*4)_verify(not is_even);
    check(2*4+1)_verify(not is_even);
    check(2*4)_verify(is_even and is_multiple_of(3));
    check(6*5)_verify(is_even and is_multiple_of(3));
    check(7*11)_verify(is_even and is_multiple_of(3));
    check(2*4)_verify(is_even and not is_multiple_of(3));
    check(6*5)_verify(is_even and not is_multiple_of(3));
    check(7*11)_verify(is_even and not is_multiple_of(3));
    check(2*4)_verify(is_even or is_multiple_of(3));
    check(6*5)_verify(is_even or is_multiple_of(3));
    check(7*11)_verify(is_even or is_multiple_of(3));
    print_text("the check syntax works with pure lambdas too:");
    declare(auto is_positive=predicate([](int n) { return n>0; }));
    check(2*4)_verify(is_positive);
    check(-2*4)_verify(is_positive);
    check(2*4)_not_verify(is_even);
    check(2*4+1)_not_verify(is_even);
    check(8)_verify(predicate_a(a>6));
    check(5)_verify(predicate_a(a>6));
    check(8)_verify(gt(6));
    check(5)_verify(gt(6));
    check(8)_verify(ne(6));
    check(6)_verify(ne(6));
    check(8)_verify(gt(6) and lt(10));
    check(4)_verify(gt(6) and lt(10));
  }

  define_test(complex, "\"true_for\" syntax") {
    declare(int a=7);
    declare(int b=8);
    check(a<b)_true;
    check(a>b)_true;
    check(a<b)_true_for(a, b);
    check(a>b)_true_for(a, b);
    check(a<b)_false;
    check(a>b)_false;
    check(a<b)_false_for(a, b);
    check(a>b)_false_for(a, b);
  }

  define_test(complex, (try_catch, "try-catch checks")) {
    check_try([]() { }())_catch();
    check_try(throw runtime_error("this'll be caught"))_catch();
    check_try(throw "this'll be too")_catch(char const *);
    check_try(throw "but this shouldn't")_catch();
    print_text("and this text should never be printed");
  }

  define_test(
    complex,
    (test_with_an_absurdly_long_name_so_we_can_check_multiline_cartouches,
     "a test with so many characters in the name and in the title that it'll"
     " have to be broken across several lines in the cartouche")) { }

  define_test(complex, "\"with\" checks") {
    declare(list<int> numbers_1{2, 4, 8});
    declare(list<int> numbers_2{2, 5, 8});
    with_data(x, numbers_1) check((x%2)==0)_true;
    with_data(x, numbers_2) check((x%2)==0)_true;
    with_data(x, list<int>{3, 4, 8}) check((x%2)==0)_true;
    with_data(x, list<int>{2, 4, 7}) check((x%2)==0)_true;
    with_data(x, numbers_1) check(0)_equal(x%2);
    with_data(x, numbers_2) check(0)_equal(x%2);

    print_break();

    with_data(x, numbers_1) {
      declare(auto is_even=predicate_a((a%2)==0));
      check(x)_verify(is_even);
      print_text("let's do something, just to see how it's shown");
      declare(auto y=x+1);
      show_value(y); // this shouldn't appear
    }
    with_data(x, numbers_2) {
      declare(auto is_even=predicate_a((a%2)==0));
      check(x)_verify(is_even);
      print_text("let's do something, just to see how it's shown");
      declare(auto y=x+1);
      show_value(y); // this shouldn't appear
    }

    print_break();

    with_data(x, numbers_1)
      with_data(y, numbers_2)
        check(x%2)_equal(y%2);
    with_data(x, list<int>{2, 4, 9})
      with_data(y, numbers_2)
        check(x%2)_equal(y%2);
    with_data(x, numbers_1)
      with_data(y, {2, 4, 10})
        check(x%2)_equal(y%2);

    print_break();

    declare(auto is_even=predicate_a((a%2)==0));
    with_data(x, numbers_1) check(x)_verify(is_even);
    with_data(x, numbers_1) {
      declare(int y=x+1);
      check(y)_verify(not is_even);
    }
    with_data(x, numbers_1) {
      check(x)_verify(is_even);
      with_data(y, numbers_1)
        check(x%2)_equal(y%2);
    }
    with_data(x, numbers_1) {
      check(x)_verify(is_even);
      with_data(y, numbers_2)
        check(x%2)_equal(y%2);
    }
    with_data(x, numbers_2) {
      check(x)_verify(is_even);
      with_data(y, numbers_1)
        check(x%2)_equal(y%2);
    }
    with_data(x, numbers_2) {
      check(x)_verify(is_even);
      with_data(y, numbers_2)
        check(x%2)_equal(y%2);
    }

    print_break();

    with_data(x, numbers_1) {
      with_data(y, numbers_1)
        check(x%2)_equal(y%2);
      check(x)_verify(is_even);
      with_data(y, numbers_2)
        check(x%2)_equal(y%2);
      check(x)_verify(is_even);
      with_data(y, numbers_1)
        check(x%2)_equal(y%2);
      check(x)_verify(is_even);
      with_data(y, list<int>{2, 4, 9})
        check(x%2)_equal(y%2);
    }
    with_data(x, numbers_1) check(0)_verify(is_even);

    with_data(x, {1, 2, 3})
      check(x)_equal(x);

    with_data((x), list<tuple<int>>{{3}, {4}, {8}})
      check((x%2)==0)_true;
    declare(list<tuple<int, int, int>>
              list_of_sums{{1, 3, 4}, {3, 7, 11}, {10, 15, 25}});
    with_data((a, b, sum), list_of_sums)
      check(sum)_equal(a+b);
    with_data((x), list<tuple<int>>{{2}, {4}, {8}})
      check((x%2)==0)_true;
    declare(list<tuple<int, int, int>>
              list_of_sums_2{{1, 3, 4}, {3, 7, 10}, {10, 15, 25}});
    with_data((a, b, sum), list_of_sums_2)
      check(sum)_equal(a+b);
  }

  define_test_node(testarudo, (disorder, "disordered tests"));

  define_top_test("testudo.testarudo.disorder",
                  (unu, "unu, but comes last"), 10) {
    check(string("unu")>string("du"))_true;
  }

  define_top_test("testudo.testarudo.disorder",
                  (du, "du, but comes first"), 10) {
    check(string("unu")<string("du"))_true;
  }

  struct ClassWithNoRepresentation { };
  bool operator==(ClassWithNoRepresentation, ClassWithNoRepresentation)
    { return false; }

  define_top_test("testudo.testarudo.disorder", (absdiff, "absdiff()"), 80) {
    set_approx_epsilon(1e-10);
    check(testudo::absdiff(5., 7.))_approx(2.);
    check(testudo::absdiff(7., 5.))_approx(2.);
    check(2.+2.)_approx(4.);
    check(2.+2.)_not_approx(5.);
  }

  define_top_test("testudo.testarudo.disorder",
                  (no_representation, "class with no representation"), 100) {
    check(ClassWithNoRepresentation())_equal(ClassWithNoRepresentation());
  }

  define_top_test("testudo.testarudo.disorder",
                  (testarudo_ext, "Testarudo support for STL objects"), 90) {
    set_approx_epsilon(1e-6);
    declare(tuple<float, int, double> ta={3.14, 8, 7.5});
    declare(tuple<double, float, int> tb={4.14, 7., 6});
    check(ta)_approx(tb);
    show_value(testudo::absdiff(ta, tb));
    declare(tuple<float, int, double> tc={3.14, 8, 7.5});
    check(ta)_approx(tc);
    print_break();
    declare(list<float> la={3.14, 8, 7.5});
    declare(list<float> lb={4.14, 7., 6});
    check(la)_approx(lb);
    show_value(testudo::absdiff(la, lb));
    declare(list<float> lc={3.14, 8, 7.5});
    check(la)_approx(lc);
    with_declare(auto x=string("hey")) {
      check(x)_equal("hey");
      check(x)_not_equal("hi");
    }
    with_declare(auto x=-12) {
      check(x)_equal(77);
      check(x)_not_equal(3);
    }
    with_declare(auto [action, occurrences]=tuple{"sin", 77*7}) {
      check(action)_equal("sin");
      check(occurrences)_equal(539);
    }
  }

  struct NumbersFixture : testudo::Fixture {
    NumbersFixture(testudo::test_management_t test_management)
      : Fixture(test_management),
        fixture_init(x, 1.), fixture_init(z, 3.14) { }
    fixture_member(double x);
    fixture_member(double y=-2.5, z);
    void check_initial_values() const {
      check(x)_approx(1.);
      check(y)_approx(-2.5);
      check(z)_approx(3.14);
    }
    void throw_something_unexpected() const
      { perform(throw "hey, here's something unexpected"); }
  };

  define_top_test_node("testudo", (fixture, "fixture tests"), 245);

  define_test(fixture, "+ commutativity",
              visible_fixture(NumbersFixture)) {
    perform(check_initial_values());
    check(x+y)_approx(y+x);
  }

  define_test(fixture, "* commutativity",
              with_fixture(NumbersFixture)) {
    perform(check_initial_values());
    check(x*y)_approx(y*x);
  }

  define_test(fixture, "associativity",
              with_fixture(NumbersFixture)) {
    check(x*(y+z))_approx(x*y+x*z);
    perform(throw_something_unexpected());
    print_text("this shouldn't show");
  }

  struct AtDestruction {
    AtDestruction(function<void ()> f) : f(f) { }
    ~AtDestruction() { f(); }
    function<void ()> const f;
  };
  define_top_test("testudo", (scope, "scope begin and end"), 375) {
    declare(int flag=10);
    in_scope("at_destruction_flag_20") {
      declare(AtDestruction at_destruction_flag_20([&flag]() { flag=20; }));
      in_scope() {
        declare(AtDestruction at_destruction_flag_30([&flag]() { flag=30; }));
        check(flag)_equal(10);
        print_text("now, a long text to check line breaking within scopes"
                   " (the following two tests have the same purpose)");
        check(string("1 2 3 4 5 6 7 8 9"))_equal("1 2 3 4 5 6 7 8 9");
        check(string("1 2 3 4 5 6 7 8 9"))_equal("1 2 3 4 5 6 7 8 8");
      }
      check(flag)_equal(30);
    }
    check(flag)_equal(20);
  }

  define_top_test("testudo", "Testudo syntax", 500) {
    print_text("tags in \"||~\"...\"~||\" are used internally");
    print_text("but they should still appear here");
    declare(string code="~pre~ ||~bold~|| ~post~");
    show_value(code);
    check(code)_equal("~pre~ ||~bold~|| ~post~");
  }

}

namespace testarudo_util {

  extern void test_commutativity(testudo::test_management_t, int a, int b);

}

namespace {

  define_test(testarudo, "external function") {
    perform(testarudo_util::test_commutativity(test_management, 2, 3));
    perform(testarudo_util::test_commutativity(test_management, -10, 7));
  }

}

#endif
